in main;
use std::{io, fs::_, time::_, rand};

mod balder;

use balder::{math::_, scene::node::_, core::_};
use balder::core::{shader::_,
                   application::_, driver::_,
                   application::drawer::_};

use balder::utils::_;

use vulkan::_;
use sdl2::_;

class MyActivity over Activity {

    let mut _allAngle = 0.f;
    let mut _radius = 0.f;
    let mut _increase = true;
    let dmut _color : (&ColorShape)? = none;

    pub self (dmut app : &Application)
        with super (alias app)
    {}

    pub over onStart (mut self) {
        self:.input:.connectQuit (&self:.onQuit);
        self:.input:.connect (KeyInfo (SDLK_r, KeyEvent::ALL), &self:.redraw);
        self:.input:.connectResize (&self:.onResize);


        self._color =
            self._app:.getWidgetDrawer ():.registerQuad (makeVec2 (20.f, 20.f),
                                                         makeVec4 (1.f, 1.f, 1.f, 1.f),
                                                         rotation-> 0.f,
                                                         radius-> 0.1f,
                                                         makeVec2 (100.f, 100.f))?;


        for j in 0 .. 20 {
            for i in 0 .. 20 {
                self._app:.getWidgetDrawer ():.registerQuad (makeVec2 (20.f + (cast!f32 (j) * 110.f), 130.f + (cast!f32 (i) * 110.f)),
                                                             makeVec4 (std::rand::uniform (0.f, 1.f), 1.f, 1.f, 1.f),
                                                             rotation-> std::rand::uniform (0.f, 90.f),
                                                             radius-> std::rand::uniform (0.f, 0.2f),
                                                             makeVec2 (100.f, 100.f))?;
            }
        }
    }

    pub fn redraw (mut self, _ : KeyInfo) {
        self:.window:.redraw ();
    }

    pub fn onResize (mut self, w : u32, h : u32) {
        println (w, " ", h);
    }

    pub over onUpdate (mut self, delta : Duration) {
        self._allAngle += (cast!f32 (delta.allMillis) / 50.f);
        self._allAngle %= 360.f;

        // if self._increase {
        //     self._radius += (cast!f32 (delta.allMillis) / 1000.f);
        //     if self._radius > 0.5f {
        //         self._increase = false;
        //     }
        // } else {
        //     self._radius -= (cast!f32 (delta.allMillis) / 1000.f);
        //     if self._radius <= 0.f {
        //         self._increase = true;
        //     }
        // }

        // if let Ok (dmut c) = alias self._color {
        //     c:.setRotation (self._allAngle);
        //     c:.setRadius (self._radius);
        // }
    }

    pub fn onQuit (mut self) {
        log::info ("Closing app");
        self._app:.quit ();
    }

}


fn main () {
    {
        let cfg = copy BalderConfig ("res:/config/app.toml");
        let dmut app = copy Application!{&MyActivity} (cfg);
        app:.run ();
        app:.dispose ();
    } catch {
        bd => {
            eprintln (bd);
        }
    }
} 
