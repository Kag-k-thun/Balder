in main;
use std::{io, fs::_, time::_, rand};

mod balder;

use balder::{math::_, scene::node::_, core::_, interface};
use balder::interface::{_, widget::_};

use balder::core::{shader::_,
                   application::_, driver::_,
                   application::drawer::_};

use balder::utils::_;

use vulkan::_;
use sdl2::_;

class MyActivity over Activity {

    let dmut _manager : (&WidgetManager)? = none;

    pub self (dmut app : &Application)
        with super (alias app)
    {
        let dmut man = copy WidgetManager (alias app);
        let rows = 72u32, cols = 128u32;

        let dmut lay = copy GridLayout (alias man, "root",
                                        columns-> cols,
                                        rows-> rows,
                                        border-> WidgetSize (minPix-> 10),
                                        margin-> WidgetSize (minPix-> 1));

        let mut z = 0;
        for i in 0 .. cols {
            for j in 0 .. rows {
                if (z + cast!i32 (i)) % 2 == 0 {
                    lay:.insertChild (i, j, copy Box (alias man, "box1",
                                                      radius-> 0.f,
                                                      color-> makeVec4 (cast!f32 (i) * 0.01f, cast!f32 (j) * 0.01f, 1.f, 1.f)));
                }
                z += 1;
            }
        }

        man:.setContent (alias lay);

        self._manager = (alias man)?;
    }

    pub over onStart (mut self) {
        self:.input:.connectQuit (&self:.onQuit);
        self:.input:.connect (KeyInfo (SDLK_r, KeyEvent::ALL), &self:.redraw);
    }

    pub fn redraw (mut self, _ : KeyInfo) {
        self:.window:.redraw ();
    }

    pub over onUpdate (mut self, _delta_ : Duration) {
        println (_delta_);
    }

    pub fn onQuit (mut self) {
        log::info ("Closing app");
        self._app:.quit ();
    }

    impl Disposable {
        pub over dispose (mut self) {
            if let Ok (dmut w) = alias self._manager {
                w:.dispose ();
                self._manager = none;
            }
        }
    }

}


fn main () {
    {
        let cfg = copy BalderConfig ("res:/config/app.toml");
        let dmut app = copy Application!{&MyActivity} (cfg);
        app:.run ();
        app:.dispose ();
    } catch {
        bd => {
            eprintln (bd);
        }
    }
} 
