in main;
use std::{io, fs::_, time::_, rand};

mod balder;

use balder::{math::_, scene::node::_, core::_, interface};
use balder::core::memory::_;
use balder::interface::{_,
                        widget::_,
                        widget::layout::_,
                        widget::text::_};

use balder::core::{shader::_,
                   application::_,
                   driver::_};

use balder::utils::_;

use vulkan::_;
use sdl2::_;

class MyActivity over Activity {

    let dmut _label : (&Widget)? = none;
    let dmut _menu : (&Widget)? = none;


    let mut _lastFrame : u32 = 0u32;

    pub self (uid : usize, dmut app : &Application, dmut window : &Window)
        with super (uid, alias app, alias window)
    {}

    over onStart (mut self) {
        self:.input:.quit ():.connect (self:.box, &self:.onQuit);
        self:.input:.keyboard (KeyInfo (SDLK_r, KeyEvent::ALL)):.connect (self:.box, &self:.redraw);
        self:.input:.mouse (MouseInfo (SDL_BUTTON_RIGHT, KeyEvent::DOWN)):.connect (self:.box, &self:.onRightClick);

        println ("StyleSheet : ", self:.gui:.loadStyleFile ("res:/config/app.style")?);
        println ("GUI : ", self:.gui:.loadGUIFile ("res:/config/app.gui")?);

        self._label = self:.gui:.find ("FPS");
        {
            let dmut d = self:.gui:.loadGUIFile ("res:/config/menu.gui", set-> false);
            if let Ok (dmut cl) = alias d:.find ("Close") {
                cl:.clicked ():.connect (self:.box, &self:.onCloseClicked);
            }

            if let Ok (dmut cl) = alias d:.find ("Open") {
                cl:.clicked ():.connect (self:.box, &self:.onOpenClicked);
            }


            self._menu = (alias d)?;
        } catch {
            err => {
                log::error #("Main", "Failed to load menu items", err);
            }
        }

    println (self._menu);
}

    pub fn redraw (mut self, _ : KeyInfo) {
        self:.window:.redraw ();
    }

    over onUpdate (mut self, _delta_ : Duration) {
        if self._lastFrame != self:.window.getNbFramesLastSecond () {
            self._lastFrame = self:.window.getNbFramesLastSecond ();
            if let Ok (dmut lbl : &Label) = alias self._label {
                lbl:.setText (std::conv::to!{[c8]} (self._lastFrame));
            }
        }
    }

    fn onRightClick (mut self, x : i32, y : i32, _ : MouseInfo) {
        println ("Here?");
        if let Ok (dmut m) = alias self._menu {
            if let Ok (dmut w : &FloatingLayout) = alias self:.gui:.getContent () {
                w:.openMenu (alias m,
                             x-> WidgetSize (pix-> cast!u32 (x)),
                             y-> WidgetSize (pix-> cast!u32 (y)));
            }
        }
    }

    pub fn onCloseClicked (mut self, b : u8) {
        if b == SDL_BUTTON_LEFT {
            log::info #("Main", "Closing app from button");
            self:.app:.close (alias self);
        }
    }

    pub fn onOpenClicked (mut self, b : u8) {
        if b == SDL_BUTTON_LEFT {
            if let Ok (dmut w : &FloatingLayout) = alias self:.gui:.getContent () {
                w:.closeAllMenu ();
            }

            let dmut n = copy MessageDialog (alias self:.app, "Want to Quit ?");
            n:.execute ();

            if n.isYes () {
                self:.onQuit ();
            }
        }
    }

    pub fn onQuit (mut self) {
        log::info #("Main", "Closing app");
        self:.app:.close (alias self);
    }

}


fn main () {
    {
        let cfg = copy BalderConfig ("res:/config/app.toml");
        let dmut app = copy Application ();
        app:.open!{&MyActivity} (cfg);

        app:.run ();
    } catch {
        bd => {
            eprintln (bd);
        }
    }
} 
