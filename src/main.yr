in main;
use std::{io, fs::_, time::_, rand};

mod balder;

use balder::{math::_, scene::node::_, core::_};
use balder::core::{shader::_,
                   application::_, driver::_,
                   application::drawer::_};

use balder::utils::_;

use vulkan::_;
use sdl2::_;

class MyActivity over Activity {

    let mut _allAngle = 0.f;
    let mut _radius = 0.f;
    let mut _increase = true;
    let dmut _shapes : [&Shape] = [];

    let dmut _tex : (&Texture)? = none;

    pub self (dmut app : &Application)
        with super (alias app)
    {}

    pub over onStart (mut self) {
        self:.input:.connectQuit (&self:.onQuit);
        self:.input:.connect (KeyInfo (SDLK_r, KeyEvent::ALL), &self:.redraw);
        self:.input:.connectResize (&self:.onResize);

        {
            let dmut tex = copy Texture2D (alias self:.window:.getVulkanDevice (), "res:/images/texture.jpg");

            for j in 0 .. 20 {
                for i in 0 .. 20 {
                    self._shapes ~= [self._app:.getShapeDrawer ():.registerQuad (makeVec2 (20.f + (cast!f32 (j) * 110.f), 20.f + (cast!f32 (i) * 110.f)),
                                                                                 color-> makeVec4 (0.f, 0.f, 0.f, 1.f),
                                                                                 rotation-> 45.f,
                                                                                 radius-> std::rand::uniform (0.f, 0.2f),
                                                                                 size-> makeVec2 (100.f, 100.f),
                                                                                 texture-> tex)];
                }
            }

            self._tex = (alias tex)?;
        } catch {
            err => println (err);
        }
    }

    pub fn redraw (mut self, _ : KeyInfo) {
        self:.window:.redraw ();
    }

    pub fn onResize (mut self, w : u32, h : u32) {
        println (w, " ", h);
    }

    pub over onUpdate (mut self, delta : Duration) {
        delta;
        println (delta);
        let d = cast!f32 (std::algorithm::comparison::max (delta.allMillis, 10u64));

        //self._allAngle += 1.f; // (d / 50.f);
        //self._allAngle %= 360.f;

        for dmut c in alias self._shapes {
            c:.setRotation (c.rotation + d);
        }

    }

    pub fn onQuit (mut self) {
        log::info ("Closing app");
        self._app:.quit ();
    }

    impl Disposable {
        pub over dispose (mut self) {
            self._app:.getShapeDrawer ():.clear ();
            if let Ok (dmut t) = alias self._tex {
                t:.dispose ();
                self._tex = none;
            }
        }
    }

}


fn main () {
    {
        let cfg = copy BalderConfig ("res:/config/app.toml");
        let dmut app = copy Application!{&MyActivity} (cfg);
        app:.run ();
        app:.dispose ();
    } catch {
        bd => {
            eprintln (bd);
        }
    }
} 
