in main;
use std::{io, fs::_, time::_, rand};

mod balder;

use balder::{math::_, scene::node::_, core::_, interface};
use balder::core::memory::_;
use balder::interface::{_,
                        widget::_,
                        widget::text::_};

use balder::core::{shader::_,
                   application::_,
                   driver::_,
                   application::drawer::_};

use balder::utils::_;

use vulkan::_;
use sdl2::_;

class MyActivity over Activity {

    let dmut _manager : (&WidgetManager)? = none;
    let dmut _label : (&Widget)? = none;
    let mut _lastFrame : u32 = 0u32;

    pub self (uid : usize, dmut app : &Application, dmut window : &Window)
        with super (uid, alias app, alias window)
    {}

    pub over onStart (mut self) {
        println ("On start ?");

        self:.input:.connectQuit (&self:.onQuit);
        self:.input:.connect (KeyInfo (SDLK_r, KeyEvent::ALL), &self:.redraw);

        let dmut man = copy WidgetManager (alias self._window);
        println ("StyleSheet : ", man:.loadStyleFile ("res:/config/app.style")?);
        println ("GUI : ", man:.loadGUIFile ("res:/config/app.gui")?);

        self._label = man:.find ("A/FPS_LABEL");

        if let Ok (dmut i : &InputText) = alias man:.find ("A/D/Input") {
            i:.connectTextValidate (&self.textValidated);
        }

        if let Ok (dmut b : &Button) = alias man:.find ("lbl") {
            b:.connectClicked (&self:.onButtonClick);
        }

        self._manager = (alias man)?;
    }

    pub fn redraw (mut self, _ : KeyInfo) {
        self._window:.redraw ();
    }

    pub fn textValidated (self, txt : [c8]) {
        println ("TEXT : ", txt);
    }

    pub over onUpdate (mut self, _delta_ : Duration) {
        if let Ok (dmut l : &Label) = alias self._label {
            let fps = self._window.getNbFramesLastSecond ();
            if fps != self._lastFrame {
                l:.setText ("FPS : " ~ std::conv::to![c8] (fps))?;
                self._lastFrame = fps;
            }
        }

        // println (_delta_, " ", self._label);
    }

    pub fn onQuit (mut self) {
        log::info #("Main", "Closing app");
        self._app:.close (alias self);
    }

    pub fn onButtonClick (mut self, _ : u8) {
        log::info #("Main", "Closing app from button");
        self._app:.close (alias self);
    }

    impl Disposable {
        pub over dispose (mut self) {
            if let Ok (dmut w) = alias self._manager {
                w:.dispose ();
                self._manager = none;
            }
        }
    }

}


fn main () {
    {
        let cfg = copy BalderConfig ("res:/config/app.toml");
        let dmut app = copy Application ();
        app:.open!{&MyActivity} (cfg);
        // app:.open!{&MyActivity} (cfg);

        app:.run ();
    } catch {
        bd => {
            eprintln (bd);
        }
    }
} 
