in main;
use std::{io, fs::_, time::_, rand};

mod balder;

use balder::{math::_, scene::node::_, core::_, interface};
use balder::interface::{_, widget::_};

use balder::core::{shader::_,
                   application::_, driver::_,
                   application::drawer::_};

use balder::utils::_;

use vulkan::_;
use sdl2::_;

class MyActivity over Activity {

    let dmut _manager : (&WidgetManager)? = none;
    let dmut _label : (&Label)? = none;
    let mut _lastFrame = 0u32;

    pub self (dmut app : &Application)
        with super (alias app)
    {
        let dmut man = copy WidgetManager (alias app);
        let dmut lay = copy GridLayout (alias man, "root", 1, 1);

        let dmut label = copy Label (alias man, "lbl", "res:/fonts/arial.ttf",
                                     40,
                                     xalign-> XAlign::LEFT,
                                     yalign-> YAlign::TOP,
                                     color-> makeVec4 (1.f, 0.f, 0.f, 0.9f));
        {
            label:.setText ("Hello world!!");
            lay:.insertChild (0, 0, alias label);
        } catch {
            err => {
                println (err);
            }
        }

        man:.setContent (alias lay);

        self._label = (alias label)?;
        self._manager = (alias man)?;
    }

    pub over onStart (mut self) {
        self:.input:.connectQuit (&self:.onQuit);
        self:.input:.connect (KeyInfo (SDLK_r, KeyEvent::ALL), &self:.redraw);
    }

    pub fn redraw (mut self, _ : KeyInfo) {
        self:.window:.redraw ();
    }

    pub over onUpdate (mut self, _delta_ : Duration) {
        if let Ok (dmut l) = alias self._label {
            let fps = self:.window.getNbFramesLastSecond ();
            if fps != self._lastFrame {
                l:.setText ("FPS : " ~ std::conv::to![c8] (fps))?;
                self._lastFrame = fps;
            }
        }

        // println (_delta_);
    }

    pub fn onQuit (mut self) {
        log::info #("Main", "Closing app");
        self._app:.quit ();
    }

    impl Disposable {
        pub over dispose (mut self) {
            if let Ok (dmut w) = alias self._manager {
                w:.dispose ();
                self._manager = none;
            }
        }
    }

}


fn main () {
    {
        let cfg = copy BalderConfig ("res:/config/app.toml");
        let dmut app = copy Application!{&MyActivity} (cfg);
        app:.run ();
        app:.dispose ();
    } catch {
        bd => {
            eprintln (bd);
        }
    }
} 
