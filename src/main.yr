in main;
use std::{io, fs::_, time::_, rand};

mod balder;

use balder::{math::_, scene::node::_, core::_, interface};
use balder::core::memory::_;
use balder::interface::{_,
                        widget::_,
                        widget::layout::_,
                        widget::button::_,
                        widget::text::_};

use balder::core::{shader::_,
                   application::_,
                   driver::_};

use balder::scene::node::{_, node3D::_};
use balder::scene::node::node3D::camera;

use balder::utils::_;

use vulkan::_;
use sdl2::_;

class MyActivity over Activity {

    let dmut _scene : (&Scene)? = none;
    let dmut _lbl : (&Label)? = none;

    pub self (uid : usize, dmut app : &Application, dmut window : &Window)
        with super (uid, alias app, alias window)
    {}

    over onStart (mut self) {
        self.input:.quit ():.connect (self.box, &self:.onQuit);

        println ("StyleSheet : ", self.gui:.loadStyleFile ("res:/config/app.style")?);
        println ("GUI : ", self.gui:.loadGUIFile ("res:/config/app.gui")?);

        if let Ok (dmut w : &Scene3DLayout) = self.gui:.find ("scene") {
            self._scene = w:.getScene ();
        }

        if let Ok (dmut l : &Label) = self.gui:.find ("fps") {
            self._lbl = (alias l)?;
        }

        {
            if let Ok (dmut s : &Scene) = alias self._scene {
                self:.createBoxMesh (alias s);
                self:.createCam (alias s);
            }
        } catch {
            err => {
                log::error #("Main", "Failed to load mesh", err);
            }
        }
    }

    pub fn redraw (mut self, _ : KeyInfo) {
        self.window:.redraw ();
    }

    over onUpdate (mut self, _delta_ : Duration) {
        if let Ok (dmut lbl) = alias self._lbl {
            lbl:.setText (std::conv::to!{[c8]} (self.window.getNbFramesLastSecond ()));
        }
    }

    pub fn onQuit (mut self) {
        log::info #("Main", "Closing app");
        self.app:.close (alias self);
    }


    fn createBoxMesh (mut self, dmut scene : &Scene)-> dmut &Node
        throws BalderError
    {
        let dmut solid = copy SolidObjectModel::fromFile ("box", scene:.getRootNode (),
                                                          "res:/models/cube/cube.obj");

        alias solid
    }

    fn createCam (mut self, dmut scene : &Scene)-> dmut &Node {
        let dmut cam = copy PerspectiveCamera ("cam", scene:.getRootNode ());
        cam.fov = 90.f;

        alias cam
    }

    // impl Disposable {
    //     pub over dispose (mut self) {
    //         if let Ok (dmut sc) = alias self._scene {
    //             sc:.dispose ();
    //             self._scene = none;
    //         }
    //     }
    // }

}


fn main () {
    {
        let cfg = copy BalderConfig ("res:/config/app.toml");
        let dmut app = copy Application ();
        app:.open!{&MyActivity} (cfg);

        app:.run ();
    } catch {
        bd => {
            eprintln (bd);
        }
    }
} 
