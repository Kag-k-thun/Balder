mod main;
import std::io;

import balder::_;
import std::fs::_;
import std::time::dur;

import std::fs::path;


struct
| pos : vec3
| color : vec3
 ->  ColorVertex;

struct
| v_view : mat4
| v_proj : mat4
 -> UniformValues;
    


class MyActivity over Activity {

    pub self (dmut app : &Application) with super (alias app) {    
        app:.getInputManager ():.connectQuit (&self:.onQuit);

        {            
            let dmut sh = Shader!{ColorVertex, UniformValues}::simplePass (alias app:.getWindow ():.getVulkanDevice (),
                                                                           Path::new ("./res/shaders/triangle/triangle.vert.spv"s8),
                                                                           Path::new ("./res/shaders/triangle/triangle.frag.spv"s8));
            
            sh:.dispose ();
        } catch {
            err : _ => {
                println (err);
                __pragma!panic ();
            }
        }
    }

    pub over onUpdate (mut self) {}

    
    pub def onQuit (mut self) {
        println ("Closing app");
        self._app:.closeActivity ();
        self._app:.quit ();
    }    

}


def main () {

    with dmut app = Application::new (Path::new ("config/app.toml"s8)) {
        app:.openActivity!{&MyActivity} ();
        app:.run ();
                
    } catch {
        bd : &BalderError => {
            println (bd);
        }
    }

} 
