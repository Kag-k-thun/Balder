in main;
use std::{io, fs::_, time::_, rand};

mod balder;

use balder::{math::_, scene::node::_, core::_, interface};
use balder::interface::{_, widget::_};

use balder::core::{shader::_,
                   application::_, driver::_,
                   application::drawer::_};

use balder::utils::_;

use vulkan::_;
use sdl2::_;

class MyActivity over Activity {

    let dmut _manager : (&WidgetManager)? = none;

    pub self (dmut app : &Application)
        with super (alias app)
    {
        let dmut man = copy WidgetManager (alias app);
        let dmut lay = copy LinearLayout (alias man, "root", vertical-> false);

        lay:.insertChild (WidgetSize (relative-> 1.f / 3.f), copy Box (alias man, "box1", color-> makeVec4 (1.f, 0.f, 0.f, 1.f)));

        let dmut lay2 = copy LinearLayout (alias man, "lay2", margin-> WidgetSize (relative-> 0.0f, minWidth-> 10, minHeight-> 20));
        lay2:.insertChild (WidgetSize (relative-> 1.f / 3.f), copy Box (alias man, "box2", color-> makeVec4 (1.f, 0.f, 0.f, 1.f)));
        lay2:.insertChild (WidgetSize (relative-> 1.f / 3.f), copy Box (alias man, "box3", color-> makeVec4 (0.f, 1.f, 0.1f, 1.f)));
        lay2:.insertChild (WidgetSize (relative-> 1.f / 3.f), copy Box (alias man, "box4", color-> makeVec4 (0.f, 0.f, 1.f, 1.f)));


        lay:.insertChild (WidgetSize (relative-> 1.f / 3.f), alias lay2);
        lay:.insertChild (WidgetSize (relative-> 1.f / 3.f), copy Box (alias man, "box5", color-> makeVec4 (0.f, 1.f, 0.f, 1.f)));

        man:.setContent (alias lay);

        self._manager = (alias man)?;
    }

    pub over onStart (mut self) {
        self:.input:.connectQuit (&self:.onQuit);
        self:.input:.connect (KeyInfo (SDLK_r, KeyEvent::ALL), &self:.redraw);
    }

    pub fn redraw (mut self, _ : KeyInfo) {
        self:.window:.redraw ();
    }

    pub over onUpdate (mut self, _delta_ : Duration) {
    }

    pub fn onQuit (mut self) {
        log::info ("Closing app");
        self._app:.quit ();
    }

    impl Disposable {
        pub over dispose (mut self) {
            if let Ok (dmut w) = alias self._manager {
                w:.dispose ();
                self._manager = none;
            }
        }
    }

}


fn main () {
    {
        let cfg = copy BalderConfig ("res:/config/app.toml");
        let dmut app = copy Application!{&MyActivity} (cfg);
        app:.run ();
        app:.dispose ();
    } catch {
        bd => {
            eprintln (bd);
        }
    }
} 
