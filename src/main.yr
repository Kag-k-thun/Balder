in main;
use std::{io, fs::_, time::_, rand};

mod balder;

use balder::{math::_, node::_, core::_};
use balder::core::{shader::_, application::_, driver::_};

use balder::node::mesh::indexed;
use balder::utils::_;

use vulkan::_;
use sdl2::_;

record ColorVertex {
    pub let mut v_pos : vec3;
    pub let mut v_color : vec3;
    pub self (pos : vec3, color : vec3)
        with v_pos = pos, v_color = color
    {}
}

record UniformValues {
    pub let mut model : mat4;
    pub let mut view : mat4;
    pub let mut proj : mat4;

    pub self ()
        with model = mat4 ()
        , view = mat4 ()
        , proj = mat4 ()
    {}
}


class MyActivity over Activity {

    let dmut _sh : (&Shader)? = none;

    let dmut _mesh : (&Mesh)? = none;

    let dmut _descSet : (&DescriptorSet)? = none;

    let dmut _uniform = UniformValues ();

    let mut _allAngle = 0.f;

    let dmut _texture : (&Texture)? = none;

    pub self (dmut app : &Application)
        with super (alias app)
    {
        app:.getInputManager ():.connectQuit (&self:.onQuit);
        app:.getInputManager ():.connect (KeyInfo (SDLK_r, KeyEvent::ALL), &self:.redraw);

        let dim = app:.getWindow ().getDimension ();
        self._uniform.view = math::utils::lookAt (makeVec3 (0.f, 1.f, 1.f), makeVec3 (0.f, 0.f, 0.f), makeVec3 (0.f, 1.f, 0.f));
        self._uniform.proj = math::utils::perspective (radian (90.f), cast!f32 (dim.0) / cast!f32 (dim.1), 0.1f, 10.0f);

        {
            let dmut sh = copy Shader!{ColorVertex}::simplePass (alias app:.getWindow ():.getVulkanDevice (),
                                                                 "shaders:/triangle/triangle.vert.spv",
                                                                 "shaders:/triangle/triangle.frag.spv");

            sh:.appendUniform!{UniformValues} ();
            sh:.uniforms [0]:.update (self._uniform);
            self._sh = (alias sh)?;
        } catch {
            err => {
                log::error (err);
                panic;
            }
        };

        let points = copy [ColorVertex (makeVec3 (-0.5f, -0.5f, 0.f), makeVec3 (1.0f, 0.0f, 0.0f)),
                           ColorVertex (makeVec3 (0.5f, -0.5f, 0.f), makeVec3 (0.0f, 1.0f, 0.0f)),
                           ColorVertex (makeVec3 (0.5f, 0.5f, 0.f), makeVec3 (0.0f, 0.0f, 1.0f)),
                           ColorVertex (makeVec3 (-0.5f, 0.5f, 0.f), makeVec3 (1.0f, 1.0f, 1.0f))];

        let indices = copy [0u32, 1u32, 2u32, 2u32, 3u32, 0u32];
        self._mesh = (copy IndexedMesh!{ColorVertex, u32} (alias app:.getWindow ():.getVulkanDevice (), points, indices))?;

        self._texture = (copy Texture2D (alias app:.getWindow ():.getVulkanDevice (), "images:/texture.jpg"))?;
        println (self._texture);

        self:.redraw (KeyInfo (SDLK_r, KeyEvent::DOWN));
    }

    pub fn redraw (mut self, _ : KeyInfo) {
        self._app:.getWindow ():.updateDrawing (
            &self:.loadPhase,
            &self:.drawPhase
            );
    }

    pub over onUpdate (mut self, delta : Duration) {
        self._allAngle += (cast!f32 (delta.allMillis) / 100.f);
        self._allAngle %= 360.f;

        // self._uniform.model = utils::rotationZ (radian (self._allAngle));
        self._uniform.model = utils::rotationZ (radian (self._allAngle));
        if let Ok (dmut sh) = alias self._sh {
            sh:.uniforms [0]:.update (self._uniform);
        }
    }

    pub fn loadPhase (mut self, dmut cmdAlloc : &IndirectCommandAllocator) {
        if let Ok (dmut mesh) = alias self._mesh {
            mesh:.register (alias cmdAlloc);
        }
    }

    pub fn drawPhase (mut self, dmut cmdAlloc : &IndirectCommandAllocator) {
        if let Ok (dmut s) = alias self._sh {
            s:.select ();
        }

        if let Ok (dmut m : _) = alias self._mesh {
            m:.draw (alias cmdAlloc);
        }
    }
    
    pub fn onQuit (mut self) {
        log::info ("Closing app");
        self._app:.closeActivity ();
        self._app:.quit ();
    }    

    impl Disposable {
        pub over dispose (mut self) {
            if let Ok (dmut m) = alias self._mesh {
                m:.dispose ();
                self._mesh = none;
            }

            if let Ok (dmut shader) = alias self._sh {
                shader:.dispose ();
                self._sh = none;
            }

            if let Ok (dmut i) = alias self._texture {
                i:.dispose ();
                self._texture = none;
            }
        }

    }
    
}


fn main () {
    {
        let dmut app = copy Application ("res:/config/app.toml");
        app:.openActivity!{&MyActivity} ();
        app:.run ();
        app:.dispose ();
    } catch {
        bd => {
            eprintln (bd);
        }
    }
} 
