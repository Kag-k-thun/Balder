in main;
use std::{io, fs::_, time::_, rand};

mod balder;

use balder::{math::_, scene::node::_, core::_, interface};
use balder::interface::{_, widget::_};

use balder::core::{shader::_,
                   application::_, driver::_,
                   application::drawer::_};

use balder::utils::_;

use vulkan::_;
use sdl2::_;

class MyActivity over Activity {

    let dmut _manager : (&WidgetManager)? = none;
    let dmut _label : (&Label)? = none;
    let mut _lastFrame = 0u32;

    pub self (dmut app : &Application)
        with super (alias app)
    {
        let dmut man = copy WidgetManager (alias app);

        let dmut floating = copy FloatingLayout (alias man, "float");
        let dmut lbl = copy Label (alias man, "fps",
                                   "res:/fonts/arial.ttf", 20,
                                   xalign-> XAlign::LEFT,
                                   yalign-> YAlign::TOP,
                                   color-> makeVec4 (1.f, 0.f, 0.f, 0.8f));
        lbl:.setText ("FPS : 0")?;
        self._label = (alias lbl)?;

        let dmut lay = copy LinearLayout (alias man, "root", margin-> WidgetSize (minPix-> 1), vertical-> false);
        let dmut lay2 = copy LinearLayout (alias man, "2", margin-> WidgetSize (minPix-> 1), vertical-> true);
        let dmut lay3 = copy LinearLayout (alias man, "2", margin-> WidgetSize (minPix-> 1), vertical-> true);

        let dmut upScroll = copy ScrollLayout (alias man, "up", alias lay2);
        let dmut upScroll2 = copy ScrollLayout (alias man, "up2", alias lay3);
        lay:.insertChild (WidgetSize (relative-> 0.2f), alias upScroll);
        lay:.insertChild (WidgetSize (relative-> 0.2f), alias upScroll2);

        let nb = 10;
        for i in 0 .. nb {
            let color = ColorPalette.get (DefaultColorPalettes::PURPLE, cast!f32 (i) / cast!f32 (nb));
            let color2 = ColorPalette.get (DefaultColorPalettes::GREEN, cast!f32 (i) / cast!f32 (nb));

            lay:.insertChild (WidgetSize (relative-> 0.2f), copy Box (alias man, "box", color-> color));
            lay2:.insertChild (WidgetSize (relative-> 0.2f), copy Box (alias man, "box", color-> color2));
            lay3:.insertChild (WidgetSize (relative-> 0.2f), copy Box (alias man, "box", color-> color2));
        }

        let dmut scroll = copy ScrollLayout (alias man, "scrollbar", alias lay);
        floating:.insertChild (alias scroll);
        floating:.insertChild (alias lbl,
                               x-> WidgetSize (minPix-> 5),
                               y-> WidgetSize (minPix-> 5),
                               withEvents-> false);

        man:.setContent (alias floating);

        // self._label = (alias label)?;
        self._manager = (alias man)?;
    }

    pub over onStart (mut self) {
        self:.input:.connectQuit (&self:.onQuit);
        self:.input:.connect (KeyInfo (SDLK_r, KeyEvent::ALL), &self:.redraw);
    }

    pub fn redraw (mut self, _ : KeyInfo) {
        self:.window:.redraw ();
    }

    pub over onUpdate (mut self, _delta_ : Duration) {
        if let Ok (dmut l) = alias self._label {
            let fps = self:.window.getNbFramesLastSecond ();
            if fps != self._lastFrame {
                l:.setText ("FPS : " ~ std::conv::to![c8] (fps))?;
                self._lastFrame = fps;
            }
        }

        // println (_delta_);
    }

    pub fn onQuit (mut self) {
        log::info #("Main", "Closing app");
        self._app:.quit ();
    }

    impl Disposable {
        pub over dispose (mut self) {
            if let Ok (dmut w) = alias self._manager {
                w:.dispose ();
                self._manager = none;
            }
        }
    }

}


fn main () {
    {
        let cfg = copy BalderConfig ("res:/config/app.toml");
        let dmut app = copy Application!{&MyActivity} (cfg);
        app:.run ();
        app:.dispose ();
    } catch {
        bd => {
            eprintln (bd);
        }
    }
} 
