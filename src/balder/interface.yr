in interface;

mod ::loader;
pub mod ::widget;
pub mod ::alignement;
pub mod ::font;
pub mod ::cursor;
pub mod ::style;

use balder::core::{_, application::_};
use balder::interface::_;
use balder::math::_;

use std::{io, conv, fs::_, syntax::_};
use std::time::_;

use ::sdl2::_;


@final
pub class WidgetManager {

    // The root widget
    let dmut _content : (&Widget)? = none;

    // The application to which the manager is attached
    let dmut _app : &Application;

    // The font manager used to render text to the screen
    let dmut _fontManager : &FontManager;

    // The manager of the mouse cursor
    let dmut _cursorManager : &CursorManager;

    // The style manager
    let dmut _styleManager : &StyleManager;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          MOUSE INFOS          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    prot { // focuses

        // True if  click of mouse button is active ([left, right, middle])
        let dmut _clicked : [bool ; 3] = [false ; 3];

        // The position of the mouse relative to window size (range [0, 1])
        let mut _mousePosition : vec2 = vec2 ();

        // The widget receiving text inputs
        let dmut _focus : (&Widget)? = none;

        // The widget being clicked
        let dmut _clickedW : [(&Widget)? ; 3] = [none ; 3];

        // True if the content was hovered in the last event
        let mut _wasHover : bool = false;

    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          CTOR/DTOR          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create a widget manager containing nothing
     * */
    pub self (dmut app : &Application)
        with _app = alias app
        , _fontManager = copy FontManager (app:.getWindow ():.getVulkanDevice ())
        , _cursorManager = copy CursorManager ()
        , _styleManager = copy StyleManager ()
    {
        app:.getInputManager ():.connect (MouseInfo (SDL_BUTTON_LEFT, KeyEvent::ALL), &self:.onMouseLeftClick);
        app:.getInputManager ():.connect (MouseInfo (SDL_BUTTON_RIGHT, KeyEvent::ALL), &self:.onMouseRightClick);
        app:.getInputManager ():.connect (MouseInfo (SDL_BUTTON_MIDDLE, KeyEvent::ALL), &self:.onMouseMiddleClick);

        app:.getInputManager ():.connectDoubleClick (&self:.onMouseDoubleClick);
        app:.getInputManager ():.connectMotion (&self:.onMouseMotion);
        app:.getInputManager ():.connectWheel (&self:.onMouseWheel);
        app:.getInputManager ():.connectResize (&self:.onWindowResize);

        app:.connectUITick (&self:.onTick);
    }

    __dtor (mut self) {
        self:.dispose ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          CONFIGURATION          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Load a toml file configuring the widgets
     * */
    pub fn loadGUIFile (mut self, path : [c8])
        throws BalderError
    {
           let completePath = balder::utils::path::projectPath (path);
        {
            let dmut file = File::open (completePath);
            let mut loader = GUIParser (alias self, file:.readAll ());

            loader:.load ();
        } catch {
            _ : &FsError => {
                throw copy BalderError ("File not found : " ~ completePath.toStr ());
            }
            b : &BalderError => {
                throw b;
            }
        }

    }

    /**
     * Load a timl file containing style informations
     * */
    pub fn loadStyleFile (mut self, path : [c8])
        throws BalderError
    {
        let completePath = balder::utils::path::projectPath (path);
        {
            let dmut file = File::open (completePath);
            let mut styleParser = StyleParser (alias self._styleManager, file:.readAll ());

            styleParser:.load ();
        } catch {
            _ : &FsError => {
                throw copy BalderError ("File not found : " ~ completePath.toStr ());
            }
            b : &BalderError => {
                throw b;
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Change the root widget of the interface
     * @warning: dispose the old one if any
     * */
    pub fn setContent (mut self, dmut root : &Widget) {
        if let Ok (dmut w) = alias self._content {
            w:.onDetach ();
            w:.dispose ();
        }

        root:.onAttach ();
        self._content = (alias root)?;
        self:.updateWidgets ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the application containing the widget manager
     * */
    pub fn getApplication (mut self)-> dmut &Application {
        alias self._app
    }

    /**
     * @returns: the window on which widgets are drawn
     * */
    pub fn getWindow (mut self)-> dmut &Window {
        alias self._app:.getWindow ()
    }

    /**
     * @returns: the manager of the font to render text
     * */
    pub fn getFontManager (mut self)-> dmut &FontManager {
        alias self._fontManager
    }

    /**
     * @returns: the manager of the cursor to change its icons
     * */
    pub fn getCursorManager (mut self)-> dmut &CursorManager {
        alias self._cursorManager
    }

    /**
     * @returns: the manager of input events to connect/disconnect to user inputs
     * */
    pub fn getInputManager (mut self)-> dmut &InputManager {
        alias self._app:.getInputManager ()
    }

    /**
     * @returns: the style manager to apply style to widgets
     * */
    pub fn getStyleManager (mut self)-> dmut &StyleManager {
        alias self._styleManager
    }

    /**
     * Find a widget with a path name
     * */
    pub fn find (mut self, name : [c8])-> dmut (&Widget)? {
        if let Ok (dmut c) = alias self._content {
            return c:.find (Path (name).parts ());
        }

        none
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          TICK          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Slot emitted at each UI frame update from the activity
     * */
    pub fn onTick (mut self, delta : Duration) {
        if let Ok (dmut w) = alias self._content {
            w:.onTick (delta);
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          USAGE          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Method called when the layout of widgets is updated
     * */
    pub fn updateWidgets (mut self) {
        if let Ok (dmut root) = alias self._content {
            let dim = self._app:.getWindow ().getDimension ();
            root:.setSize (makeVec2 (0.f, 0.f), makeVec2 (cast!f32 (dim._0), cast!f32 (dim._1)), 0);
            root:.setScissors (makeVec2 (0.f, 0.f), makeVec2 (cast!f32 (dim._0), cast!f32 (dim._1)));
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            self._app:.getInputManager ():.disconnect (MouseInfo (SDL_BUTTON_LEFT, KeyEvent::ALL), &self:.onMouseLeftClick);
            self._app:.getInputManager ():.disconnect (MouseInfo (SDL_BUTTON_RIGHT, KeyEvent::ALL), &self:.onMouseRightClick);
            self._app:.getInputManager ():.disconnect (MouseInfo (SDL_BUTTON_MIDDLE, KeyEvent::ALL), &self:.onMouseMiddleClick);

            self._app:.getInputManager ():.disconnectDoubleClick (&self:.onMouseDoubleClick);
            self._app:.getInputManager ():.disconnectMotion (&self:.onMouseMotion);
            self._app:.getInputManager ():.disconnectWheel (&self:.onMouseWheel);
            self._app:.getInputManager ():.disconnectResize (&self:.onWindowResize);

            self._app:.disconnectUITick (&self:.onTick);

            if let Ok (dmut w) = alias self._content {
                w:.dispose ();
                self._content = none;
            }

            self._fontManager:.dispose ();
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          WINDOW SLOT          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    fn onWindowResize (mut self, _ : u32, _ : u32) {
        self:.updateWidgets ();
        self._app:.getShapeDrawer ():.redraw ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          MOUSE SLOTS          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Slot activated when the mouse move on the screen
     */
    fn onMouseMotion (mut self, x : i32, y : i32) {
        if self._clicked [0] || self._clicked [1] || self._clicked [2] {
            self:.onMouseSliding (x, y);
            return;
        }

        let dim = self._app:.getWindow ().getDimension ();
        self._mousePosition = makeVec2 (cast!f32 (x) / cast!f32 (dim._0), cast!f32 (y) / cast!f32 (dim._1));

        if let Ok (dmut r) = alias self._content {
            if let Ok (relInner) = r.isInBorder (self._mousePosition) {
                r:.onHover (relInner);
                self._wasHover = true;
            } else if self._wasHover {
                r:.onLoseHoverFocus ();
                self._wasHover = false;
            }
        }
    }

    /**
     * Sliding event when the mouse is clicked and moved at the same time
     * */
    fn onMouseSliding (mut self, x : i32, y : i32) {
        let dim = self._app:.getWindow ().getDimension ();
        let cursorPos = makeVec2 (cast!f32 (x) / cast!f32 (dim._0), cast!f32 (y) / cast!f32 (dim._1));
        let speed = cursorPos - self._mousePosition;
        self._mousePosition = cursorPos;

        if let Ok (dmut w) = alias self._focus {
            let wsize = w.getAbsoluteSize (), wpos = w.getAbsolutePosition ();
            let relPos = makeVec2 ((cast!f32 (x) - wpos.x) / wsize.x, (cast!f32 (y) - wpos.y) / wsize.y);

            if self._clicked [0] {
                w:.onSliding (relPos, speed, SDL_BUTTON_LEFT);
            }

            else if self._clicked [1] {
                w:.onSliding (relPos, speed, SDL_BUTTON_RIGHT);
            }

            else {
                w:.onSliding (relPos, speed, SDL_BUTTON_MIDDLE);
            }
        }
    }

    /**
     * Slot activated when the mouse wheel is moved
     */
    fn onMouseWheel (mut self, x : i32, y : i32, amountX : i32, amountY : i32) {
        let dim = self._app:.getWindow ().getDimension ();
        self._mousePosition = makeVec2 (cast!f32 (x) / cast!f32 (dim._0), cast!f32 (y) / cast!f32 (dim._1));

        if self._clicked [0] || self._clicked [1] || self._clicked [2] { // sliding, so no wheel
            return;
        }

        // Event is not propagated if there is a sliding widget
        if let Ok (dmut w) = alias self._focus && w.captureWheelOnFocus () {
            let relPos = (self._mousePosition - w.getAbsolutePosition ()) / w.getAbsoluteSize ();
            w:.onScroll (relPos, amountX, amountY);
        }

        if let Ok (dmut w) = alias self._content {
            if let Ok (relPos) = w.isInBorder (self._mousePosition) {
                w:.onScroll (relPos, amountX, amountY);
            }
        }
    }

    /**
     * Slot activated when the left button of the mouse is clicked
     */
    fn onMouseLeftClick (mut self, x : i32, y : i32, info : MouseInfo) {
        if self._clicked [1] || self._clicked [2] {
            return;
        }

        let dim = self._app:.getWindow ().getDimension ();
        self._mousePosition = makeVec2 (cast!f32 (x) / cast!f32 (dim._0), cast!f32 (y) / cast!f32 (dim._1));

        if let Ok (dmut w) = alias self._content {
            if info.type == KeyEvent::DOWN {
                if let Ok (relPos) = w.isInBorder (self._mousePosition) {
                    let dmut f = w:.onClick (relPos, SDL_BUTTON_LEFT);
                    self._clickedW [0] = (alias f)?;
                    if f.isFocusableLeftClick () {
                        self:.setFocus ((alias f)?);
                    } else {
                        self:.setFocus (none);
                    }
                }
            }

            if info.type == KeyEvent::RELEASE {
                if let Ok (dmut f) = alias self._focus{
                    f:.onSlidingEnd (SDL_BUTTON_LEFT);

                    if f.loseFocusOnReleaseLeft () {
                        self:.setFocus (none);
                    }
                }

                if let Ok (dmut c) = alias self._clickedW [0] {
                    c:.onClickEnd (SDL_BUTTON_LEFT);
                    c.emitClicked (SDL_BUTTON_LEFT);
                    self._clickedW [0] = none;
                }
            }
        }

        self._clicked [0] = (info.type == KeyEvent::DOWN);
    }

    /**
     * Method called by the onMouseLeftClick if two clicks happend in less than __DOUBLE_CLICK_SENSIBILITY__
     */
    fn onMouseDoubleClick (mut self, x : i32, y : i32) {
        if let Ok (dmut w) = alias self._content {
            let wpos = w.getAbsolutePosition (), wsize = w.getAbsoluteSize ();
            let relPos = makeVec2 ((cast!f32 (x) - wpos.x) / wsize.x, (cast!f32 (y) - wpos.y) / wsize.y);

            w:.onDoubleClick (relPos);
        }

        self._clicked [0] = true;
    }

    /**
     * Slot activated when the right button of the mouse is clicked
     */
    fn onMouseRightClick (mut self, x : i32, y : i32, info : MouseInfo) {
        if self._clicked [0] || self._clicked [2] {
            return;
        }

        let dim = self._app:.getWindow ().getDimension ();
        self._mousePosition = makeVec2 (cast!f32 (x) / cast!f32 (dim._0), cast!f32 (y) / cast!f32 (dim._1));

        if let Ok (dmut w) = alias self._content {
            if info.type == KeyEvent::DOWN {
                if let Ok (relPos) = w.isInBorder (self._mousePosition) {
                    let dmut f = w:.onClick (relPos, SDL_BUTTON_RIGHT);
                    self._clickedW [1] = (alias f)?;

                    if f.isFocusableRightClick () {
                        self:.setFocus ((alias f)?);
                    } else {
                        self:.setFocus (none);
                    }
                }
            }

            else if info.type == KeyEvent::RELEASE {
                if let Ok (dmut f) = alias self._focus {
                    f:.onSlidingEnd (SDL_BUTTON_RIGHT);

                    if f.loseFocusOnReleaseRight () {
                        self:.setFocus (none);
                    }
                }

                if let Ok (dmut c) = alias self._clickedW [1] {
                    c:.onClickEnd (SDL_BUTTON_RIGHT);
                    c.emitClicked (SDL_BUTTON_RIGHT);
                    self._clickedW [1] = none;
                }
            }
        }

        self._clicked [1] = (info.type == KeyEvent::DOWN);
    }

    /**
     * Slot activated when the middle button of the mouse is clicked
     */
    fn onMouseMiddleClick (mut self, x : i32, y : i32, info : MouseInfo) {
        if self._clicked [0] || self._clicked [1] {
            return;
        }

        let dim = self._app:.getWindow ().getDimension ();
        self._mousePosition = makeVec2 (cast!f32 (x) / cast!f32 (dim._0), cast!f32 (y) / cast!f32 (dim._1));

        if let Ok (dmut w) = alias self._content {
            if info.type == KeyEvent::DOWN {
                if let Ok (relPos) = w.isInBorder (self._mousePosition) {
                    let dmut f = w:.onClick (relPos, SDL_BUTTON_MIDDLE);
                    self._clickedW [2] = (alias f)?;

                    if f.isFocusableMiddleClick () {
                        self:.setFocus ((alias f)?);
                    } else {
                        self:.setFocus (none);
                    }
                }
            }

            else if info.type == KeyEvent::RELEASE {
                if let Ok (dmut f) = alias self._focus {
                    f:.onSlidingEnd (SDL_BUTTON_MIDDLE);

                    if f.loseFocusOnReleaseMiddle () {
                        self:.setFocus (none);
                    }
                }

                if let Ok (dmut c) = alias self._clickedW [2] {
                    c:.onClickEnd (SDL_BUTTON_MIDDLE);
                    c.emitClicked (SDL_BUTTON_RIGHT);
                    self._clickedW [2] = none;
                }
            }
        }

        self._clicked [2] = (info.type == KeyEvent::DOWN);
    }

    /**
     * Change the widget having the focus
     * */
    pub fn setFocus (mut self, dmut w : (&Widget)?) {
        match (w, self._focus) {
            (Ok (new), Ok (old)) if new is old => { // do nothing if setting the same focus
                return;
            }
        }

        if let Ok (dmut old) = alias self._focus {
            old:.setFocus (false);
            old.emitUnfocused ();
            old:.onLoseFocus ();
        }

        if let Ok (dmut new) = alias w {
            new:.setFocus (true);
            new.emitFocused ();
            new:.onGainFocus ();
        }

        self._focus = alias w;
    }

}
