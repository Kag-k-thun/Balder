in interface;

mod ::loader;
pub mod ::widget;
pub mod ::alignement;
pub mod ::font;

use balder::core::{_, application::_};
use balder::interface::_;
use balder::math::_;

use std::{io, conv, fs::_};
use std::time::_;

use ::sdl2::_;

def __DOUBLE_CLICK_SENSIBILITY__ = (300).millis ();

@final
pub class WidgetManager {

    // The root widget
    let dmut _content : (&Widget)? = none;

    // The application to which the manager is attached
    let dmut _app : &Application;

    // The timer used to check double clicks
    let dmut _clickTimer = Timer ();

    // The font manager used to render text to the screen
    let dmut _fontManager : &FontManager;

    /**
     * Create a widget manager containing nothing
     * */
    pub self (dmut app : &Application)
        with _app = alias app
        , _fontManager = copy FontManager (app:.getWindow ():.getVulkanDevice ())
    {
        app:.getInputManager ():.connect (MouseInfo (SDL_BUTTON_LEFT, KeyEvent::ALL), &self:.onMouseLeftClick);
        app:.getInputManager ():.connect (MouseInfo (SDL_BUTTON_RIGHT, KeyEvent::ALL), &self:.onMouseRightClick);
        app:.getInputManager ():.connect (MouseInfo (SDL_BUTTON_MIDDLE, KeyEvent::ALL), &self:.onMouseMiddleClick);

        app:.getInputManager ():.connectMotion (&self:.onMouseMotion);
        app:.getInputManager ():.connectWheel (&self:.onMouseWheel);
        app:.getInputManager ():.connectResize (&self:.onWindowResize);
    }

    __dtor (mut self) {
        self:.dispose ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          CONFIGURATION          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Load a toml file configuring the widgets
     * */
    pub fn loadFromFile (mut self, path : [c8])
        throws BalderError
    {
        self:.setContent (loader::widgetFromFile (alias self, path));
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Change the root widget of the interface
     * @warning: dispose the old one if any
     * */
    pub fn setContent (mut self, dmut root : &Widget) {
        if let Ok (dmut w) = alias self._content {
            w:.dispose ();
        }

        self._content = (alias root)?;
        self:.updateWidgets ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the application containing the widget manager
     * */
    pub fn getApplication (mut self)-> dmut &Application {
        alias self._app
    }


    pub fn getWindow (mut self)-> dmut &Window {
        alias self._app:.getWindow ()
    }

    pub fn getFontManager (mut self)-> dmut &FontManager {
        alias self._fontManager
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          USAGE          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Method called when the layout of widgets is updated
     * */
    pub fn updateWidgets (mut self) {
        if let Ok (dmut root) = alias self._content {
            let dim = self._app:.getWindow ().getDimension ();
            root:.updateSizes (makeVec2 (0.f, 0.f), makeVec2 (cast!f32 (dim._0), cast!f32 (dim._1)), 0);
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            if let Ok (dmut w) = alias self._content {
                w:.dispose ();
                self._content = none;
            }

            self._fontManager:.dispose ();
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          WINDOW SLOT          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    fn onWindowResize (mut self, _ : u32, _ : u32) {
        self:.updateWidgets ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          MOUSE SLOTS          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Slot activated when the mouse move on the screen
     */
    fn onMouseMotion (mut self, x : i32, y : i32) {
        if let Ok (dmut r) = alias self._content {
            let dim = self._app:.getWindow ().getDimension ();
            r:.onHover (makeVec2 (cast!f32 (x) / cast!f32 (dim._0), cast!f32 (y) / cast!f32 (dim._1)));
        }
    }

    /**
     * Slot activated when the mouse wheel is moved
     */
    fn onMouseWheel (mut self, x : i32, y : i32, amountX : i32, amountY : i32) {
        x;
        y;
        amountX;
        amountY;
    }

    /**
     * Slot activated when the left button of the mouse is clicked
     */
    fn onMouseLeftClick (mut self, x : i32, y : i32, info : MouseInfo) {
        x;
        y;
        info;
    }

    /**
     * Method called by the onMouseLeftClick if two clicks happend in less than __DOUBLE_CLICK_SENSIBILITY__
     */
    fn onMouseDoubleClick (mut self, x : i32, y : i32, _ : MouseInfo) {
        x;
        y;
    }

    /**
     * Slot activated when the right button of the mouse is clicked
     */
    fn onMouseRightClick (mut self, _ : i32, _ : i32, _ : MouseInfo) {
        // println ("Right click : ", x, " ", y, " ", info);
    }

    /**
     * Slot activated when the middle button of the mouse is clicked
     */
    fn onMouseMiddleClick (mut self, _ : i32, _ : i32, _ : MouseInfo) {
        // println ("Middle click : ", x, " ", y, " ", info);
    }

}
