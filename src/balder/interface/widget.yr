in widget;

use balder::core::{shader::_, application::_};
use balder::core::_;
use balder::math::_;

use balder::interface::_;

pub mod ::layout;
pub mod ::box;
pub mod ::text;

use std::time::_;

@abstract
pub class Widget {

    // The name of the widget
    pub let name : [c8];

    // The manager of the widget
    let dmut _manager : &WidgetManager;

    // The size in pixel of the widget
    let mut _absoluteSize : vec2 = vec2 ();

    // The position of the widget in pixel
    let mut _absolutePosition : vec2 = vec2 ();

    // The scissor position
    let mut _scissorPos : vec2 = vec2 ();

    // The scissor size
    let mut _scissorSize : vec2 = vec2 ();

    // The depth of the widget (for the rendering order)
    let mut _depth : u32 = 0;

    prot self (dmut manager : &WidgetManager,
               name : [c8])
        with _manager = alias manager
        , name = name
    {}

    __dtor (mut self) {
        self:.dispose ()
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GET/SETS          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the depth of the widget tree
     * */
    pub fn getMaxDepth (self)-> u32 {
        self._depth
    }

    /**
     * @returns: the absolute position of the widget (in pixels)
     * */
    pub fn getAbsolutePosition (self)-> vec2 {
        self._absolutePosition
    }

    /**
     * @returns: the absolute size of the widget (in pixels)
     * */
    pub fn getAbsoluteSize (self)-> vec2 {
        self._absoluteSize
    }

    pub fn isFocusableLeftClick (self)-> bool {
        false
    }

    pub fn isFocusableRightClick (self)-> bool {
        false
    }

    pub fn isFocusableMiddleClick (self)-> bool {
        false
    }

    pub fn loseFocusOnReleaseLeft (self)-> bool {
        false
    }

    pub fn loseFocusOnReleaseRight (self)-> bool {
        false
    }

    pub fn loseFocusOnReleaseMiddle (self)-> bool {
        false
    }

    pub fn captureWheelOnFocus (self)-> bool {
        false
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          SIZES          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Update the size of the widget
     * */
    pub fn onUpdateSize (mut self, pos : vec2, viewport : vec2, depth : u32) {
        self._absoluteSize = viewport;
        self._absolutePosition = pos;
        self._depth = depth;
    }

    /**
     * Set the scissors of the shape to cut every pixel drawn outside
     * */
    pub fn setScissors (mut self, pos : vec2, size : vec2) {
        self._scissorPos = pos;
        self._scissorSize = size;
    }

    /**
     * Hide the widget
     * */
    pub fn hide (mut self) {}


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          TICK EVENTS          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Event emitted by the application at each UI frameo
     * */
    pub fn onTick (mut self, delta : Duration) {
        delta;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          MOUSE EVENTS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Method called when the object is on the widget
     * @params:
     *  - pos: the position of the cursor relative to the widget between 0 and 1
     */
    pub fn onHover (mut self, _ : vec2)-> dmut &Widget {
        alias self
    }

    /**
     * Method called when the cursor left the widget
     */
    pub fn onLoseHoverFocus (mut self) {}

    /**
     * Method called when the cursor is on the widget and left clicked
     * @params:
     *  - pos: the position of the cursor relative to the widget between 0 and 1
     * @returns: the widget that have been clicked
     */
    pub fn onClickLeft (mut self, _ : vec2)-> dmut &Widget {
        alias self
    }

    /**
     * Method called when the cursor is on the widget and the left clicked is pressed two times in less than __DOUBLE_CLICK_SENSIBILITY__
     * @params:
     *   - pos: the position of the cursor relative to the widget between 0 and 1
     * @returns: the widget that have been clicked
     */
    pub fn onDoubleClick (mut self, _ : vec2)-> dmut &Widget {
        alias self
    }

    /**
     * Method called when the cursor is on the widget and left clicked
     * @params:
     *  - pos: the position of the cursor relative to the widget between 0 and 1
     * @returns: the widget that have been clicked
     */
    pub fn onClickRight (mut self, _ : vec2)-> dmut &Widget {
        alias self
    }

    /**
     * Method called when the cursor is on the widget and left clicked
     * @params:
     *  - pos: the position of the cursor relative to the widget between 0 and 1
     * @returns: the widget that have been clicked
     */
    pub fn onClickMiddle (mut self, _ : vec2)-> dmut &Widget {
        alias self
    }

    /**
     * Method called when the mouse cursor is on the widget and the scroll event occurs
     * @params:
     *   - pos: the position of the cursor
     *   - amoutX: the amount of scrolling along the x axis
     *   - amountY: the amount of scrolling along the y axis
     * @returns: true, if the widget did scroll
     */
    pub fn onScroll (mut self, _ : vec2, _ : i32, _ : i32)-> bool {
        false
    }

    /**
     * Method called when a sliding event is observed by the manager and the widget has the focus
     * @params:
     *    - pos: the position of the cursor (relative to widget)
     *    - speed: the speed of the sliding
     *    - button: the button being pressed during sliding (SDL_BUTTON_LEFT, RIGHT, MIDDLE)
     * */
    pub fn onSliding (mut self, _ : vec2, _ : vec2, _ : u8) {}

    /**
     * Method called when sliding motions is released on the widget that is focused
     * @params:
     *    - button: the button that was pressed during the sliding event
     * */
    pub fn onSlidingEnd (mut self, _ : u8) {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          FOCUS EVENTS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Method called when the object gain the focus
     */
    pub fn onGainFocus (mut self) {}

    /**
     * Method called when the object lose the focus
     */
    pub fn onLoseFocus (mut self) {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          MISC          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {

        /**
         * Every widget is disposable
         * Even if this ancestor class Widget doesn't need to be disposed, some child class may
         */
        pub over dispose (mut self) {}
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          PROTECTED          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Clamp a size from a relative size to another relative size, but with garantee of pixel maximum and minimum size
     */
    @final
    fn clampSize (self, clamp : WidgetSize, viewport : f32) -> f32 {
        let size = std::algorithm::comparison::max (0.f, clamp.relative);

        let px_x =  cast!u32 (size * viewport);
        let size_x = if (px_x < clamp.minPix) {
            clamp.minPix
        } else if (px_x > clamp.maxPix) {
            clamp.maxPix
        } else { px_x }

        cast!f32 (size_x) / viewport
    }

    /**
     * Clamp a size from a relative size to another relative size, but with garantee of pixel maximum and minimum size
     */
    @final
    fn clampSize (self, x : f32, clamp : WidgetSize, viewport : f32) -> f32 {
        let size = std::algorithm::comparison::max (0.f, x);

        let px_x = cast!u32 (size * viewport);
        let size_x = if (px_x < clamp.minPix) {
            clamp.minPix
        } else if (px_x > clamp.maxPix) {
            clamp.maxPix
        } else { px_x }

        cast!f32 (size_x) / viewport
    }

    /**
     * @returns: true if the point is in the square
     * */
    fn isInSquare (self, pos : vec2, start : vec2, end : vec2)-> bool {
        return (pos.x >= start.x
                && pos.x <= end.x
                && pos.y >= start.y
                && pos.y <= end.y);
    }

}
