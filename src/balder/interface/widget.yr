in widget;

use balder::core::{shader::_,
                   application::_};

use balder::interface::shape::_;


use balder::core::_;
use balder::math::_;

use balder::interface::{_, widget::alignement};
use balder::utils::_;

pub mod ::layout;
pub mod ::box;
pub mod ::text;
pub mod ::alignement;

use std::{io,
          time::_,
          algorithm::comparison,
          fs::path};

pub enum : u8
| BACKGROUND = 1
| BORDER     = 2
| TEXT       = 3
| SELECTION  = 4
| IMAGE      = 5
 -> WidgetShapeKind;

pub class WidgetShape {
    pub let dmut shape : (&Shape)? = none;
    pub self () {}
}

@abstract
pub class Widget {

    // The name of the widget
    pub let name : [c8];

    // The manager of the widget
    let dmut _manager : &WidgetManager;


    prot { // widget sizes, a widget has 4 sizes, outer, margin, border, inner

        // The inner size
        let mut _absolutePosition : vec2 = vec2 ();
        let mut _absoluteSize : vec2 = vec2 ();

        // The size inside borders
        let mut _absolutePostBorderPosition : vec2 = vec2 ();
        let mut _absolutePostBorderSize : vec2 = vec2 ();

        // The size inside margins
        let mut _absolutePostMarginPosition : vec2 = vec2 ();
        let mut _absolutePostMarginSize : vec2 = vec2 ();

        // The outer size
        let mut _absoluteFullSize : vec2 = vec2 ();
        let mut _absoluteFullPosition : vec2 = vec2 ();

    }

    prot { // scissors defines the size of parent widget to avoid displaying shapes outside the correct bounding box
        let mut _scissorPos : vec2 = vec2 ();
        let mut _scissorSize : vec2 = vec2 ();
    }

    // The depth of the widget (for the rendering order)
    let mut _depth : u32 = 0;

    // The shapes of the widgets
    let dmut _shapes : [WidgetShapeKind => &Shape] = copy [];

    prot { // background image
        let dmut _backgroundTexture : &RefCount!{&Texture2D};
        let mut _backgroundTextureSize : uvec2 = uvec2 ();
        let mut _currentBackImage : [c8] = "";

        let mut _currentBackColor : vec4 = vec4 ();
        let mut _currentBorderColor : vec4 = vec4 ();

        let mut _hasBackground : bool = true;
        let mut _hasBorder : bool = true;
    }

    // True iif attached to a window
    let mut _attached : bool = false;

    prot { // The list of styles of the widget

        let _widgetKind : [c8] = "";

        // The style classes of the widget
        let mut _styleClasses : [c8] = "";

        // The current style of the widget
        let mut _currentStyle : &Style = copy Style ();

        // True iif the widget is not displayed (and does not receive events)
        let mut _hidden : bool = false;

    }

    prv { // states
        let mut _hover : bool = false;
        let mut _focus : bool = false;
        let mut _check : bool = false;
    }


    prot { // signals
        let dmut _clicked : (&Signal!{u8})? = none;
        let dmut _focused : (&Signal!{()})? = none;
        let dmut _unfocused : (&Signal!{()})? = none;
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          CTORS          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    prot self (dmut manager : &WidgetManager,
               name : [c8],
               widgetKind : [c8])

        with _manager = alias manager
        , name = name
        , _widgetKind = widgetKind
        , _backgroundTexture = manager:.getWindow ():.emptyResource!{&Texture2D} ()
    {}

    __dtor (mut self) {
        self:.dispose ()
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          CONFIGURATION          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Register a shape to be drawn by the widget when displayed
     * */
    @{final}
    prot fn registerColorShape (mut self, c : WidgetShapeKind) {
        let dmut shDr = self._manager:.getShapeDrawer ();

        {
            let dmut shape = shDr:.registerColorQuad (color-> self._currentStyle.getColor (c));
            if let Ok (dmut old) = alias self._shapes [c] {
                shDr:.removeShape (old.uid);
            }

            self._shapes [c] = alias shape;
        } catch {
            err => {
                log::error #("Widget", "Failed to create color shape : ", c, " => ", err);
            }
        }
    }

    /**
     * Register a shape to be drawn by the widget when displayed
     * */
    @{final}
    prot fn registerTextureShape (mut self, c : WidgetShapeKind, dmut texture : &RefCount!{&Texture2D}) {
        let dmut shDr = self._manager:.getShapeDrawer ();

        {
            let dmut shape = shDr:.registerTextureQuad (texture-> alias texture);
            if let Ok (dmut old) = alias self._shapes [c] {
                shDr:.removeShape (old.uid);
            }

            self._shapes [c] = alias shape;
            shape:.show ();
        } catch {
            err => {
                log::error #("Widget", "Failed to create texture shape : ", c, " => ", err);
            }
        }
    }

    /**
     * Register a shape to be drawn by the widget when displayed
     * */
    @{final}
    prot fn removeShape (mut self, c : WidgetShapeKind) {
        let dmut shDr = self._manager:.getShapeDrawer ();
        if let Ok (dmut old) = alias self._shapes [c] {
            shDr:.removeShape (old.uid);
            self._shapes:.remove (c);
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GET/SETS          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the depth of the widget tree
     * */
    pub fn getMaxDepth (self)-> u32 {
        self._depth
    }

    /**
     * @returns: the absolute position of the widget (in pixels)
     * */
    pub fn getAbsolutePosition (self)-> vec2 {
        self._absoluteFullPosition
    }

    /**
     * @returns: the absolute size of the widget (in pixels)
     * */
    pub fn getAbsoluteSize (self)-> vec2 {
        self._absoluteFullSize
    }

    /**
     * @returns: the absolute inner position of the widget (in pixels) after margin, border, padding
     * */
    pub fn getAbsoluteInnerPosition (self)-> vec2 {
        self._absolutePosition
    }

    /**
     * @returns: the absolute inner size of the widget (in pixels) after margin, border, padding
     * */
    pub fn getAbsoluteInnerSize (self)-> vec2 {
        self._absoluteSize
    }

    /**
     * @returns: the current style applied to the widget
     * */
    pub fn getStyle (self)-> &Style {
        self._currentStyle
    }

    /**
     * @returns: true iif the widget gains focus when left clicked
     * */
    pub fn isFocusableLeftClick (self)-> bool {
        false
    }

    /**
     * @returns: true iif the widget gains focus when right clicked
     * */
    pub fn isFocusableRightClick (self)-> bool {
        false
    }

    /**
     * @returns: true iif the widget gains focus when middle clicked
     * */
    pub fn isFocusableMiddleClick (self)-> bool {
        false
    }

    /**
     * @returns: true iif the widget lose focus when left click is released
     * */
    pub fn loseFocusOnReleaseLeft (self)-> bool {
        false
    }

    /**
     * @returns: true iif the widget lose focus when right click is released
     * */
    pub fn loseFocusOnReleaseRight (self)-> bool {
        false
    }

    /**
     * @returns: true iif the widget lose focus when middle click is released
     * */
    pub fn loseFocusOnReleaseMiddle (self)-> bool {
        false
    }

    /**
     * @returns: true iif the widget can capture wheel events when focused
     * */
    pub fn captureWheelOnFocus (self)-> bool {
        false
    }

    /**
     * @returns: the widget with the
     * */
    pub fn find (mut self, names : [[c8]])-> dmut (&Widget)? {
        names;
        none
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          SIZES          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Set the size of the widget in absolute position and size in pixels
     * @params:
     *   - pos: the position of the widget in pixels
     *   - size: the size of the widget in pixels
     *   - depth: the depth of the widget in pixels
     * */
    @{final}
    pub fn setSize (mut self, pos : vec2, size : vec2, depth : u32) {
        self._depth = depth + 5;
        self._absoluteFullSize = size;
        self._absoluteFullPosition = pos;

        self:.computeSize ();
    }

    /**
     * Compute the size of the different parts of the widget
     * */
    @{final}
    prot fn computeSize (mut self) {
        self:.computePostMarginSize ();
        self:.computePostBorderSize ();
        self:.computePostPaddingSize ();

        self:.onUpdateSize ();
        self:.applyStyle ();
    }


    /**
     * Set the scissors of the shape to cut every pixel drawn outside
     * */
    @{final}
    pub fn setScissors (mut self, pos : vec2, size : vec2) {
        self._scissorPos = pos;
        self._scissorSize = size;

        self:.onUpdateScissors ();
        self:.applyStyle ();
    }

    /**
     * Method called when the size of the widget have changed
     * */
    prot fn onUpdateSize (mut self) {}

    /**
     * Method when scissors have been updated
     * */
    prot fn onUpdateScissors (mut self) {}

    /**
     * @returns: the position and size of the shapes
     * */
    prot fn getShapePositionAndSize (self, kind : WidgetShapeKind)-> (vec2, vec2) {
        match kind {
            WidgetShapeKind::TEXT => { (self._absolutePosition, self._absoluteSize) }
            WidgetShapeKind::BORDER => { (self._absolutePostMarginPosition, self._absolutePostMarginSize) }
            WidgetShapeKind::BACKGROUND => { (self._absolutePostBorderPosition, self._absolutePostBorderSize) }
            WidgetShapeKind::IMAGE => { self.computeBackgroundImageSize () }
            _ => { (self._absoluteFullPosition, self._absoluteFullSize) }
        }
    }

    prot fn getScissors (self, wpos : vec2, wsize : vec2, kind : WidgetShapeKind)-> (vec2, vec2) {
        let (wpos2, wsize2) = match kind {
            WidgetShapeKind::TEXT => { (self._absolutePosition, self._absoluteSize) }
            WidgetShapeKind::BORDER => { (self._absolutePostMarginPosition, self._absolutePostMarginSize) }
            WidgetShapeKind::BACKGROUND => { (self._absolutePostBorderPosition, self._absolutePostBorderSize) }
            WidgetShapeKind::IMAGE => { (self._absolutePostBorderPosition, self._absolutePostBorderSize) }
            _ => { (self._absoluteFullPosition, self._absoluteFullSize) }
        };

        let (sciSelfPos, sciSelfSize) = self.getScissors (wpos2, wsize2);

        let sciPos = makeVec2 (max (wpos.x, sciSelfPos.x),
                               max (wpos.y, sciSelfPos.y));

        let sciEnd = makeVec2 (min (wpos.x + wsize.x, sciSelfPos.x + sciSelfSize.x),
                               min (wpos.y + wsize.y, sciSelfPos.y + sciSelfSize.y));


        (sciPos, sciEnd - sciPos)
    }

    prot fn getScissors (self, wpos : vec2, wsize : vec2)-> (vec2, vec2) {
        let sciPos = makeVec2 (max (wpos.x, self._scissorPos.x),
                               max (wpos.y, self._scissorPos.y));

        let sciEnd = makeVec2 (min (wpos.x + wsize.x, self._scissorPos.x + self._scissorSize.x),
                               min (wpos.y + wsize.y, self._scissorPos.y + self._scissorSize.y));


        (sciPos, sciEnd - sciPos)
    }

    fn computeBackgroundImageSize (self)-> (vec2, vec2) {
        if self._currentStyle.backgroundImageKeepRatio._1 {
            let test = if self._currentStyle.backgroundImageFill._1 {
                self._absolutePostBorderSize.x < self._absolutePostBorderSize.y
            } else {
                self._absolutePostBorderSize.x > self._absolutePostBorderSize.y
            };

            let (pos, size) = if test {
                let xsize = self._absolutePostBorderSize.y;
                let xpos = self._absolutePostBorderPosition.x + (self._absolutePostBorderSize.x - xsize) / 2.f;

                (makeVec2 (xpos, self._absolutePostBorderPosition.y), makeVec2 (xsize, self._absolutePostBorderSize.y))
            } else {
                let ysize = self._absolutePostBorderSize.x;
                let ypos = self._absolutePostBorderPosition.y + (self._absolutePostBorderSize.y - ysize) / 2.f;

                (makeVec2 (self._absolutePostBorderPosition.x, ypos), makeVec2 (self._absolutePostBorderSize.x, ysize))
            }

            (pos, size)
        } else {
            (self._absolutePostBorderPosition, self._absolutePostBorderSize)
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          TICK EVENTS          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Event emitted by the application at each UI frameo
     * */
    pub fn onTick (mut self, delta : Duration) {
        delta;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          MOUSE EVENTS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Method called when the object is on the widget
     * @params:
     *  - pos: the position of the cursor relative to the widget between 0 and 1
     */
    pub fn onHover (mut self, _ : vec2)-> dmut (&Widget)? {
        (alias self)?
    }

    /**
     * Method called when the cursor left the widget
     */
    pub fn onLoseHoverFocus (mut self) {}

    /**
     * Method called when the cursor is on the widget and clicked
     * @params:
     *  - pos: the position of the cursor relative to the widget between 0 and 1
     *  - button: the button being clicked
     * @returns: the widget that have been clicked
     */
    pub fn onClick (mut self, _ : vec2, _ : u8)-> dmut (&Widget)? {
        (alias self)?
    }

    /**
     * Method called when the cursor was clicked (self:.onClick ()) and click was released (even if the cursor is now outside the widget)
     * @params:
     *  - button: the button being clicked
     * @returns: the widget that have been clicked
     */
    pub fn onClickEnd (mut self, _ : u8)-> dmut (&Widget)? {
        (alias self)?
    }

    /**
     * Method called when the cursor is on the widget and the left clicked is pressed two times in less than __DOUBLE_CLICK_SENSIBILITY__
     * @params:
     *   - pos: the position of the cursor relative to the widget between 0 and 1
     * @returns: the widget that have been clicked
     */
    pub fn onDoubleClick (mut self, _ : vec2)-> dmut (&Widget)? {
        (alias self)?
    }

    /**
     * Method called when the mouse cursor is on the widget and the scroll event occurs
     * @params:
     *   - pos: the position of the cursor
     *   - amoutX: the amount of scrolling along the x axis
     *   - amountY: the amount of scrolling along the y axis
     * @returns: true, if the widget did scroll
     */
    pub fn onScroll (mut self, _ : vec2, _ : i32, _ : i32)-> bool {
        false
    }

    /**
     * Method called when a sliding event is observed by the manager and the widget has the focus
     * @params:
     *    - pos: the position of the cursor (relative to widget)
     *    - speed: the speed of the sliding
     *    - button: the button being pressed during sliding (SDL_BUTTON_LEFT, RIGHT, MIDDLE)
     * */
    pub fn onSliding (mut self, _ : vec2, _ : vec2, _ : u8) {}

    /**
     * Method called when sliding motions is released on the widget that is focused
     * @params:
     *    - button: the button that was pressed during the sliding event
     * */
    pub fn onSlidingEnd (mut self, _ : u8) {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          FOCUS EVENTS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Method called when the object gain the focus
     */
    pub fn onGainFocus (mut self) {}

    /**
     * Method called when the object lose the focus
     */
    pub fn onLoseFocus (mut self) {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          MISC          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Hide the widget and all its shapes
     * */
    @{final}
    pub fn hide (mut self) {
        self:.onHide ();

        if !self._hidden {
            self:.hideShapes ();
            self._hidden = true;
        }

        self:.applyStyle ();
    }

    /**
     * Show the widget and all its shapes
     * */
    @{final}
    pub fn show (mut self) {
        self:.onShow ();

        if self._hidden {
            self:.showShapes ();
            self._hidden = false;
        }

        self:.applyStyle ();
    }


    /**
     * Hide the shapes of the widget (without hiding the object itself)
     * */
    @{final}
    prot fn hideShapes (mut self) {
        for _, dmut ws in alias self._shapes {
            ws:.hide ();
        }
    }

    /**
     * Show the shapes of the widget (without showing the object itself)
     * */
    @{final}
    prot fn showShapes (mut self) {
        for _, dmut ws in alias self._shapes{
            ws:.show ();
        }
    }

    /**
     * Method called when the widget have been hidden
     * */
    prot fn onHide (mut self) {}

    /**
     * Method called when the widget have been displayed
     * */
    prot fn onShow (mut self) {}

    /**
     * Method called when the widget is attached to a window
     * */
    pub fn onAttach (mut self) {
        self._attached = true;
    }

    /**
     * Method called when the widget is detached from the window
     * */
    pub fn onDetach (mut self) {
        self._attached = false;
        self:.disposeShapes ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          STATES          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Set to true iif the widget is focused
     * */
    @{final}
    pub fn setFocus (mut self, set : bool) {
        if self._focus != set {
            self._focus = set;
            self:.reloadStyle ();
        }
    }

    /**
     * Set to true iif the widget is hovered
     * */
    @{final}
    prot fn setHover (mut self, set : bool) {
        if self._hover != set {
            self._hover = set;
            self:.reloadStyle ();
        }
    }

    /**
     * Set to true iif the widget is checked
     * */
    @{final}
    prot fn setChecked (mut self, set : bool) {
        if self._check != set {
            self._check = set;
            self:.reloadStyle ();
        }
    }

    /**
     * Set the style classes of the widget
     * */
    @{final}
    pub fn setStyleClasses (mut self, c : [c8]) {
        if self._styleClasses != c {
            self._styleClasses = c;
            self:.reloadStyle ();
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SIGNALS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the signal emitted when the widget is clicked
     * */
    pub fn clicked (mut self)-> dmut &Signal!{u8} {
        if let Ok (dmut t) = alias self._clicked {
            return alias t;
        }

        let dmut ret = copy Signal!{u8} ();
        self._clicked = (alias ret)?;

        alias ret
    }

    /**
     * Emit the click signal of the widget
     * */
    pub fn emitClicked (mut self, button : u8) {
        if let Ok (dmut m) = alias self._clicked {
            m:.emit (button);
        }
    }

    /**
     * @returns: the signal emitted when the widget is mouse focused
     * */
    pub fn focused (mut self)-> dmut &Signal!{()} {
        if let Ok (dmut t) = alias self._focused {
            return alias t;
        }

        let dmut ret = copy Signal!{()} ();
        self._focused = (alias ret)?;

        alias ret
    }

    /**
     * Emit the focus signal of the widget
     * */
    pub fn emitFocused (mut self) {
        if let Ok (dmut m) = alias self._focused {
            m:.emit ();
        }
    }

    /**
     * @returns: the signal emitted when the widget is mouse unfocused
     * */
    pub fn unfocused (mut self)-> dmut &Signal!{()} {
        if let Ok (dmut t) = alias self._unfocused {
            return alias t;
        }

        let dmut ret = copy Signal!{()} ();
        self._unfocused = (alias ret)?;

        alias ret
    }

    /**
     * Emit the unfocus signal of the widget
     * */
    pub fn emitUnfocused (mut self) {
        if let Ok (dmut m) = alias self._unfocused {
            m:.emit ();
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Dispose the shapes of the widgets
     * */
    @{final}
    fn disposeShapes (mut self) {
        let dmut shDr = self._manager:.getShapeDrawer ();
        for _, dmut ws in alias self._shapes {
            shDr:.removeShape (ws.uid);
        }

        self._shapes = copy [];
        self._backgroundTexture:.dispose ();

        self._currentBackImage = "";
        self._currentBackColor = vec4 ();
        self._currentBorderColor = vec4 ();
    }

    impl Disposable {

        /**
         * Every widget is disposable
         * Even if this ancestor class Widget doesn't need to be disposed, some child class may
         */
        pub over dispose (mut self) {
            self:.disposeShapes ();
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===============================          SHAPE MANAGEMENTS          ================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Load the hover style
     * */
    @{final}
    pub fn reloadStyle (mut self) {
        let newStyle = self._manager:.getStyleManager ().get (self._widgetKind,
                                                              self._styleClasses,
                                                              self._hover,
                                                              self._focus,
                                                              self._check);
        self:.setStyle (newStyle);
    }

    /**
     * Force the style of the widget
     * */
    @{final}
    pub fn setStyle (mut self, newStyle : &Style) {
        if self._attached {
            // no need to resize of the dimension did not change
            if !self._currentStyle.sameDimension (newStyle) {
                self._currentStyle = newStyle;
                self._manager:.updateWidgets ();
            }

            // but color might have
            else if !self._currentStyle.sameColors (newStyle) {
                self._currentStyle = newStyle;
                self:.applyStyle ();
            }

            // else exactly the same styles (no change required)
            // log::debug #("Widget", "Set style :", self.name, "=>", self._styleClasses, self._hover, self._focus, self._check);
        }

        self._currentStyle = newStyle;

    }

    /**
     * Apply the current style to the shapes of the widget
     * */
    @{final}
    prv fn applyStyle (mut self) {
        if self._hasBackground {
            self:.loadBackTexture ();
            self:.loadBackColor ();
        }

        if self._hasBorder {
            self:.loadBorderColor ();
        }

        for k, dmut ws in alias self._shapes {
            self:.applyStyle (k, alias ws);
        }

        self:.onApplyStyle ();
    }


    /**
     * Apply the background image style in case of update
     * */
    @{final}
    prv fn loadBackTexture (mut self) {
        if self._currentBackImage != self._currentStyle.backgroundImage._1 {
            self._currentBackImage = self._currentStyle.backgroundImage._1;

            let dmut shDr = self._manager:.getShapeDrawer ();
            if let Ok (dmut ws) = alias self._shapes [WidgetShapeKind::IMAGE] {
                shDr:.removeShape (ws.uid);
                self._shapes:.remove (WidgetShapeKind::IMAGE);
            }

            self._backgroundTexture:.dispose ();
            if self._currentBackImage != "" { // new image
                {
                    self._backgroundTexture = self._manager:.getWindow ():.loadResource!{&Texture2D} (self._currentBackImage);
                } catch {
                    err => {
                        log::error #("Widget", "Failed to load background image", err);
                        return;
                    }
                }

                if !self._backgroundTexture.isEmpty () {
                    {
                        let dmut newShape = shDr:.registerTextureQuad (texture-> self._backgroundTexture:.clone ());
                        self._shapes [WidgetShapeKind::IMAGE] = alias newShape;

                        self._backgroundTextureSize = makeVec2 (self._backgroundTexture.get ().width,
                                                                self._backgroundTexture.get ().height);

                    } catch {
                        err => {
                            log::error #("Widget", "Failed to create texture background image shape  => ", err);
                            return;
                        }
                    }
                }
            }
        }
    }

    /**
     * Load the background color shape
     * */
    @{final}
    prv fn loadBackColor (mut self) {
        if self._currentBackColor != self._currentStyle.getColor (WidgetShapeKind::BACKGROUND) {
            self._currentBackColor = self._currentStyle.getColor (WidgetShapeKind::BACKGROUND);

            if WidgetShapeKind::BACKGROUND !in alias self._shapes {
                self:.registerColorShape (WidgetShapeKind::BACKGROUND);
            }
        }
    }

    /**
     * Load the border color shape
     * */
    @{final}
    prv fn loadBorderColor (mut self) {
        if self._currentBorderColor != self._currentStyle.getColor (WidgetShapeKind::BORDER) {
            self._currentBorderColor = self._currentStyle.getColor (WidgetShapeKind::BORDER);

            if WidgetShapeKind::BORDER !in alias self._shapes {
                self:.registerColorShape (WidgetShapeKind::BORDER);
            }
        }
    }

    /**
     * Apply the current style to the shapes of the widget
     * */
    @{final}
    prv fn applyStyle (mut self, kind : WidgetShapeKind, dmut ws : &Shape) {
        let (pos, size) = self.getShapePositionAndSize (kind);
        let (sciPos, sciEnd) = self.getScissors (pos, size, kind);

        if self._hidden {
            ws:.hide ();
        } else {
            ws:.setPosition (pos);
            ws:.setSize (size);
            ws:.setScissors (sciPos, sciEnd);

            ws:.setColor (self._currentStyle.getColor (kind));
            ws:.setRadius (self._currentStyle.getRadius (kind));
            ws:.setLevel (self.getDepth (kind));
            ws:.show ();
        }
    }

    /**
     * Method called when the style of the widget has been applied
     * */
    prot fn onApplyStyle (mut self) {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          SIZE COMPUTING          =================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Clamp a size from a relative size to another relative size, but with garantee of pixel maximum and minimum size
     */
    @{final}
    fn clampSize (self, clamp : WidgetSize, viewport : f32) -> f32 {
        let size = std::algorithm::comparison::max (0.f, clamp.relative);

        let px_x =  cast!u32 (size * viewport);
        let size_x = if (px_x < clamp.minPix) {
            clamp.minPix
        } else if (px_x > clamp.maxPix) {
            clamp.maxPix
        } else { px_x }

        cast!f32 (size_x) / viewport
    }

    /**
     * Clamp a size from a relative size to another relative size, but with garantee of pixel maximum and minimum size
     */
    @{final}
    fn clampSize (self, x : f32, clamp : WidgetSize, viewport : f32) -> f32 {
        let size = std::algorithm::comparison::max (0.f, x);

        let px_x = cast!u32 (size * viewport);
        let size_x = if (px_x < clamp.minPix) {
            clamp.minPix
        } else if (px_x > clamp.maxPix) {
            clamp.maxPix
        } else { px_x }

        cast!f32 (size_x) / viewport
    }

    /**
     * @returns: true if the point is in the square
     * */
    @{final}
    fn isInSquare (self, pos : vec2, start : vec2, end : vec2)-> (vec2)? {
        if (pos.x >= start.x
            && pos.x <= end.x
            && pos.y >= start.y
            && pos.y <= end.y) {

            let relPos = makeVec2 ((pos.x - start.x) / (end.x - start.x),
                                   (pos.y - start.y) / (end.y - start.y));

            return (relPos)?;
        }

        none
    }

    /**
     * @returns: true if the point is in the border of the shape
     * @params:
     *    - pos: the position of the point relative to the widget (0 <= (x,y) <= 1)
     * */
    @{final}
    fn isInBorder (self, pos : vec2)-> (vec2)? {
        let a = (self._absolutePostMarginPosition - self._absoluteFullPosition) / self._absoluteFullSize;
        let b = a + (self._absolutePostMarginSize / self._absoluteFullSize);

        return self.isInSquare (pos, a, b);
    }

    /**
     * @returns: true if the point is in the border of the shape
     * @params:
     *    - pos: the position of the point relative to the widget (0 <= (x,y) <= 1)
     * */
    @{final}
    fn isInPadding (self, pos : vec2)-> (vec2)? {
        let a = (self._absolutePosition - self._absoluteFullPosition) / self._absoluteFullSize;
        let b = a + (self._absoluteSize / self._absoluteFullSize);

        return self.isInSquare (pos, a, b);
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ================================          SIZE COMPUTATION          ================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Compute the size of the outer part of the widget
     * */
    @{final}
    prv fn computePostMarginSize (mut self) {
        self._absolutePostMarginSize = self._absoluteFullSize;
        self._absolutePostMarginPosition = self._absoluteFullPosition;

        let margin = self.getMarginSize ();

        self._absolutePostMarginSize.y -= margin.x;
        self._absolutePostMarginSize.y -= margin.y;
        self._absolutePostMarginPosition.y += margin.x;

        self._absolutePostMarginSize.x -= margin.z;
        self._absolutePostMarginPosition.x += margin.z;
        self._absolutePostMarginSize.x -= margin.w;
    }

    /**
     * Compute the size of the middle part of the widget
     * */
    @{final}
    prv fn computePostBorderSize (mut self) {
        self._absolutePostBorderSize = self._absolutePostMarginSize;
        self._absolutePostBorderPosition = self._absolutePostMarginPosition;

        let border = self.getBorderSize ();

        self._absolutePostBorderSize.x -= border.x;
        self._absolutePostBorderSize.x -= border.y;
        self._absolutePostBorderPosition.x += border.x;

        self._absolutePostBorderSize.y -= border.y;
        self._absolutePostBorderPosition.y += border.y;
        self._absolutePostBorderSize.y -= border.y;
    }

    /**
     * Compute the size of the inner part of the widget
     * */
    @{final}
    prv fn computePostPaddingSize (mut self) {
        self._absoluteSize = self._absolutePostBorderSize;
        self._absolutePosition = self._absolutePostBorderPosition;

        let padding = self.getPaddingSize ();

        self._absoluteSize.y -= padding.x;
        self._absolutePosition.y += padding.x;
        self._absoluteSize.y -= padding.y;

        self._absoluteSize.x -= padding.z;
        self._absolutePosition.x += padding.z;
        self._absoluteSize.x -= padding.w;
    }


    /**
     * @returns: the line width of the border
     * */
    fn getBorderSize (self)-> vec2 {
        if self._currentStyle.borderSize.0 {
            let pixel = WidgetSize (pix-> self._currentStyle.borderSize.1);

            makeVec2 (self.clampSize (pixel, self._absoluteFullSize.x) * self._absoluteFullSize.x,
                      self.clampSize (pixel, self._absoluteFullSize.y) * self._absoluteFullSize.y)
        } else { vec2 () }
    }

    /**
     * @returns: the depth to apply to the shape
     * */
    fn getDepth (self, kind : WidgetShapeKind)-> u32 {
        match kind {
            WidgetShapeKind::BORDER => { self._depth - 4 }
            WidgetShapeKind::BACKGROUND => { self._depth - 3 }
            WidgetShapeKind::IMAGE => { self._depth - 2 }
            WidgetShapeKind::SELECTION => { self._depth - 1 }
            WidgetShapeKind::TEXT => { self._depth }
            _ => {
                self._depth
            }
        }
    }

    /**
     * @returns: the line width of the border
     * */
    fn getMarginSize (self)-> vec4 {
        let mut result = vec4 ();
        if self._currentStyle.marginSize [1].0 {
            result.x = self.clampSize (self._currentStyle.marginSize [1].1, self._absoluteFullSize.y) * self._absoluteFullSize.y;
        } else if self._currentStyle.marginSize [0].0 {
            result.x = self.clampSize (self._currentStyle.marginSize [0].1, self._absoluteFullSize.y) * self._absoluteFullSize.y;
        }

        if self._currentStyle.marginSize [2].0 {
            result.y = self.clampSize (self._currentStyle.marginSize [2].1, self._absoluteFullSize.y) * self._absoluteFullSize.y;
        }  else if self._currentStyle.marginSize [0].0 {
            result.y = self.clampSize (self._currentStyle.marginSize [0].1, self._absoluteFullSize.y) * self._absoluteFullSize.y;
        }

        if self._currentStyle.marginSize [3].0 {
            result.z = self.clampSize (self._currentStyle.marginSize [3].1, self._absoluteFullSize.x) * self._absoluteFullSize.x;
        } else if self._currentStyle.marginSize [0].0 {
            result.z = self.clampSize (self._currentStyle.marginSize [0].1, self._absoluteFullSize.x) * self._absoluteFullSize.x;
        }

        if self._currentStyle.marginSize [4].0 {
            result.w = self.clampSize (self._currentStyle.marginSize [4].1, self._absoluteFullSize.x) * self._absoluteFullSize.x;
        } else if self._currentStyle.marginSize [0].0 {
            result.w = self.clampSize (self._currentStyle.marginSize [0].1, self._absoluteFullSize.x) * self._absoluteFullSize.x;
        }

        result
    }

    /**
     * @returns: the line width of the border
     * */
    fn getPaddingSize (self)-> vec4 {
        let mut result = vec4 ();
        if self._currentStyle.paddingSize [1].0 {
            result.x = self.clampSize (self._currentStyle.paddingSize [1].1, self._absoluteFullSize.y) * self._absoluteFullSize.y;
        } else if self._currentStyle.paddingSize [0].0 {
            result.x = self.clampSize (self._currentStyle.paddingSize [0].1, self._absoluteFullSize.y) * self._absoluteFullSize.y;
        }

        if self._currentStyle.paddingSize [2].0 {
            result.y = self.clampSize (self._currentStyle.paddingSize [2].1, self._absoluteFullSize.y) * self._absoluteFullSize.y;
        } else if self._currentStyle.paddingSize [0].0 {
            result.y = self.clampSize (self._currentStyle.paddingSize [0].1, self._absoluteFullSize.y) * self._absoluteFullSize.y;
        }

        if self._currentStyle.paddingSize [3].0 {
            result.z = self.clampSize (self._currentStyle.paddingSize [3].1, self._absoluteFullSize.x) * self._absoluteFullSize.x;
        } else if self._currentStyle.paddingSize [0].0 {
            result.z = self.clampSize (self._currentStyle.paddingSize [0].1, self._absoluteFullSize.x) * self._absoluteFullSize.x;
        }

        if self._currentStyle.paddingSize [4].0 {
            result.w = self.clampSize (self._currentStyle.paddingSize [4].1, self._absoluteFullSize.x) * self._absoluteFullSize.x;
        } else if self._currentStyle.paddingSize [0].0 {
            result.w = self.clampSize (self._currentStyle.paddingSize [0].1, self._absoluteFullSize.x) * self._absoluteFullSize.x;
        }

        result
    }

}
