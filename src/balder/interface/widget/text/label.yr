in label;

use balder::core::{shader::_,
                   application::_};

use balder::core::_;
use balder::math::_;

use balder::interface::_;
use balder::interface::shape::_;
use balder::utils::_;

use std::io;
use std::algorithm::comparison;

pub class Label over Widget {

    // The text displayed by the label
    let mut _text : [c16];

    prot {  // Display configuration

        let mut _forceAlign = false;

        let mut _relTextSize : vec2 = vec2 ();

        let mut _relTextPos : vec2 = vec2 ();

        let mut _relFontSize : u32 = 0u32;
        let mut _relFont : [c8] = [];
    }

    prot {

        // The texture of the shape
        let dmut _texture : (&Texture)? = none;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          CTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (dmut manager : &WidgetManager,
              name : [c8])

        with super (alias manager, name, WidgetKeys::LABEL)
        , _text = ""
    {}

    over onApplyStyle (mut self) {
        if self._relFont != self.getFont () || self._relFontSize != self.getFontSize () {
            if self._attached && self._text != "" {
                self:.setText (self._text);
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          ATTACH/DETACH          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over onAttach (mut self) {
        self._attached = true;
        self:.registerShape (WidgetShapeKind::TEXT);

        self:.setText (self._text);
    }

    pub over onDetach (mut self) {
        self._attached = false;
        self:.dispose ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DRAW SIZES          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    over onUpdateSize (mut self) {
        if let Ok (d : &Texture2D) = self._texture {
            let relSize = makeVec2 (cast!f32 (d.width), cast!f32 (d.height)) / self._absoluteSize;

            let xalign = if self._forceAlign { XAlign::NONE } else { self.getStyle ().xalign._1 };
            let yalign = if self._forceAlign { YAlign::CENTER } else { self.getStyle ().yalign._1 };

            let mut x = if xalign == XAlign::LEFT || xalign == XAlign::NONE {
                0.f
            } else if xalign == XAlign::RIGHT {
                1.f - relSize.x
            } else { 0.5f - (relSize.x / 2.f) };

            let mut y = if yalign == YAlign::TOP {
                0.f
            } else if yalign == YAlign::BOTTOM {
                1.f - relSize.y
            } else {0.5f - (relSize.y / 2.f) };

            if xalign == XAlign::NONE {
                x = max (0.f, x);
            }

            y = max (0.f, y);

            self:.setShapesPosAndSize (WidgetShapeKind::TEXT,
                                       self._absolutePosition + (makeVec2 (x, y) * self._absoluteSize),
                                       relSize * self._absoluteSize);

            if let Ok (dmut ws) = alias self._shapes [WidgetShapeKind::TEXT] {
                if let Ok (dmut sh : &TextureShape) = alias ws.shape {
                    ws.commit = (self._relTextSize == relSize);
                    ws.hidden = false;
                    sh:.show ();
                }
            }

            self._relTextPos = makeVec2 (x, y);
            self._relTextSize = relSize;
        } else {
            self:.hide ();
            self._relTextSize = vec2 ();
            self._relTextPos = vec2 ();
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Set the text of the label
     * */
    pub fn setText (mut self, text : [c8]) {
        self:.setText (std::conv::to!{[c16]} (text));
    }

    /**
     * Set the text of the label
     * */
    pub fn setText (mut self, text : [c16]) {
        self._text = text;

        if self._attached {
            self._relFont = self.getFont ();
            self._relFontSize = self.getFontSize ();

            let dmut old = alias self._texture;
            {
                self._texture = alias self._manager:.getFontManager ():.render (text, self.getFont (), self.getFontSize ());
                self:.computeSize ();
            } catch {
                err => {
                    log::error #("Label", "failed to set text : ", err);
                    self._texture = none;
                }
            }

            if let Ok (dmut ws) = alias self._shapes [WidgetShapeKind::TEXT] {
                if let Ok (dmut sh : &TextureShape) = alias ws.shape {
                    if let Ok (d : &Texture2D) = self._texture {
                        sh:.setSize (makeVec2 (cast!f32 (d.width), cast!f32 (d.height)));
                        sh:.setTexture (self._texture);
                        sh:.show ();
                        ws.hidden = false;
                    } else {
                        sh:.setTexture (none);
                        sh:.hide ();
                        ws.hidden = true;
                    }

                    sh:.commit (true);
                }
            }

            if let Ok (dmut o) = alias old {
                self._manager:.getWindow ():.insertBin (alias o);
            }
        }
    }

    /**
     * Change the vertical alignement of the label
     * */
    pub fn forceAlign (mut self, force : bool) {
        self._forceAlign = force;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the font used by the label
     * */
    pub fn getFont (self)-> [c8] {
        self.getStyle ().font._1
    }

    /**
     * @returns: the size of the font
     * */
    pub fn getFontSize (self)-> u32 {
        self.getStyle ().fontSize._1
    }

    /**
     * @returns: the size of the displayed text in pixels
     * */
    pub fn getTextSize (self)-> vec2 {
        self._relTextSize * self._absoluteSize
    }

    /**
     * @returns: the position of the displayed text in pixels
     * */
    pub fn getTextPos (self)-> vec2 {
        self._absolutePosition + (self._relTextPos * self._absoluteSize)
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            self:.disposeShapes ();

            if let Ok (dmut t) = alias self._texture {
                self._manager:.getWindow ():.insertBin (alias t);
                self._texture = none;
            }

            self._text = "";
        }
    }

}
