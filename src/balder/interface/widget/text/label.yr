in label;

use balder::core::{shader::_, application::_};
use balder::core::_;
use balder::math::_;

use balder::interface::_;
use balder::utils::_;

use std::io;
use std::algorithm::comparison;

pub class Label over Widget {

    // The text displayed by the label
    let mut _text : [c16];

    prot {  // Display configuration
        let _color : vec4;
        let _fontSize : u32;
        let _fontPath : [c8];

        // The alignement of the text along the x axis
        let mut _xalign : XAlign;

        // The alignement of the text along the y axis
        let mut _yalign : YAlign;

        let mut _relTextSize : vec2 = vec2 ();

        let mut _relTextPos : vec2 = vec2 ();

    }

    prot {

        // Shape drawn on screen
        let dmut _shape : (&shape::texture::TextureShape)? = none;

        // The texture of the shape
        let dmut _texture : (&Texture)? = none;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          CTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (dmut manager : &WidgetManager,
              name : [c8],
              fontPath : [c8],
              fontSize : u32,
              color : vec4 = makeVec4 (1.f, 1.f, 1.f, 1.f),
              xalign : XAlign = XAlign::CENTER,
              yalign : YAlign = YAlign::CENTER)

        with super (alias manager, name)
        , _color = color
        , _text = ""
        , _fontPath = fontPath
        , _fontSize = fontSize
        , _xalign = xalign
        , _yalign = yalign
    {
        let dmut shDr = manager:.getApplication ():.getShapeDrawer ();

        {
            let dmut shape = shDr:.registerTextureQuad (vec2 (), self._color, vec2 (), texture-> self._texture);
            self._shape = (alias shape)?;
        } catch {
            err => {
                log::error #("Label", "Failed to add a shape : ", err);
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DRAW SIZES          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over onUpdateSize (mut self, pos : vec2, size : vec2, depth : u32) {
        self._absoluteSize = size;
        self._absolutePosition = pos;
        self._depth = depth;

        if let Ok (d : &Texture2D) = self._texture {
            let relSize = makeVec2 (cast!f32 (d.width), cast!f32 (d.height)) / size;

            let mut x = if self._xalign == XAlign::LEFT || self._xalign == XAlign::NONE {
                0.f
            } else if self._xalign == XAlign::RIGHT {
                1.f - relSize.x
            } else { 0.5f - (relSize.x / 2.f) };

            let mut y = if self._yalign == YAlign::TOP {
                0.f
            } else if self._yalign == YAlign::BOTTOM {
                1.f - relSize.y
            } else {0.5f - (relSize.y / 2.f) };

            if self._xalign == XAlign::NONE {
                x = max (0.f, x);
            }

            y = max (0.f, y);

            if let Ok (dmut sh) = alias self._shape {
                sh:.setPosition (pos + makeVec2 (x, y) * size);
                sh:.setLevel (depth);
                sh:.show ();

                if self._relTextSize == relSize {
                    sh:.commit (false);
                }
            }

            self._relTextPos = makeVec2 (x, y);
            self._relTextSize = relSize;
        } else {
            if let Ok (dmut sh) = alias self._shape {
                sh:.hide ();
            }

            self._relTextSize = vec2 ();
            self._relTextPos = vec2 ();
        }
    }

    pub over setScissors (mut self, pos : vec2, size : vec2) {
        if let Ok (dmut sh) = alias self._shape {
            sh:.setScissors (makeVec4 (pos.x, pos.y, pos.x + size.x, pos.y + size.y));
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Set the text of the label
     * */
    pub fn setText (mut self, text : [c8])
        throws BalderError
    {
        self:.setText (std::conv::to!{[c16]} (text));
    }

    /**
     * Set the text of the label
     * */
    pub fn setText (mut self, text : [c16])
        throws BalderError
    {
        let dmut old = alias self._texture;
        self._texture = alias self._manager:.getFontManager ():.render (text, self._fontPath, self._fontSize);
        self:.onUpdateSize (self._absolutePosition, self._absoluteSize, self._depth);

        if let Ok (d : &Texture2D) = self._texture {
            if let Ok (dmut sh) = alias self._shape {
                sh:.setSize (makeVec2 (cast!f32 (d.width), cast!f32 (d.height)));
                sh:.setTexture (self._texture);
            }
        }

        if let Ok (dmut o) = alias old {
            let dmut bin = self._manager:.getWindow ():.getGarbageBin ();
            bin:.insert (alias o);
        }
    }

    /**
     * Change the vertical alignement of the label
     * */
    pub fn setXAlign (mut self, xalign : XAlign) {
        self._xalign = xalign;
    }

    /**
     * Change the horizontal alignement of the label
     * */
    pub fn setYAlign (mut self, yalign : YAlign) {
        self._yalign = yalign;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the font used by the label
     * */
    pub fn getFont (self)-> [c8] {
        self._fontPath
    }

    /**
     * @returns: the size of the font
     * */
    pub fn getFontSize (self)-> u32 {
        self._fontSize
    }

    /**
     * @returns: the size of the displayed text in pixels
     * */
    pub fn getTextSize (self)-> vec2 {
        self._relTextSize * self._absoluteSize
    }

    /**
     * @returns: the position of the displayed text in pixels
     * */
    pub fn getTextPos (self)-> vec2 {
        self._absolutePosition + (self._relTextPos * self._absoluteSize)
    }

    /**
     * @returns: the horizontal alignement of the label
     * */
    pub fn getXAlign (self)-> XAlign {
        self._xalign
    }

    /**
     * @returns: the vertical alignement of the label
     * */
    pub fn getYAlign (self)-> YAlign {
        self._yalign
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            if let Ok (dmut sh) = alias self._shape {
                self._shape = none;
                sh:.dispose ();
            }

            let dmut bin = self._manager:.getWindow ():.getGarbageBin ();
            if let Ok (dmut t) = alias self._texture {
                bin:.insert (alias t);
                self._texture = none;
            }
        }
    }

}
