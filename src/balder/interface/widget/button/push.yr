in push;

use balder::core::application::_;
use balder::core::_;
use balder::math::_;

use balder::interface::_;
use balder::utils::_;

use balder::interface::widget::text::label;

use std::{io, conv, char, time::_};
use std::algorithm::_;


/**
 * A push button is a simple button widget that emit signal when hit
 * */
pub class PushButton over Button {

    let dmut _doubleClicked : (&Signal!{()})? = none;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          CTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (dmut manager : &WidgetManager, name : [c8])
        with super (alias manager, name, WidgetKeys::PUSH_BUTTON)
    {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          MOUSE EVENTS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over onDoubleClick (mut self, _ : vec2)-> dmut (&Widget)? {
        if let Ok (dmut m) = alias self._doubleClicked {
            m:.emit ();
        }

        (alias self)?
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SIGNALS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the signal emitted when the push button is double clicked
     * */
    pub fn doubleClick (mut self)-> dmut &Signal!{()} {
        if let Ok (dmut m) = alias self._doubleClicked {
            return alias m;
        }

        let dmut m = copy Signal!{()} ();
        self._doubleClicked = (alias m)?;

        alias m
    }

}
