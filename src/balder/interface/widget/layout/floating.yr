in floating;

use ::std::algorithm::comparison;

use std::{io, time::_};

use balder::core::_;
use balder::math::_;
use balder::interface::_;
use balder::interface::widget::_;

use balder::utils::log;

record Child {
    pub let mut x : WidgetSize;
    pub let mut y : WidgetSize;

    pub let dmut widget : &Widget;
    pub let mut propagate : bool;
    pub let mut level : u32;

    pub let mut pos : vec2 = vec2 ();
    pub let mut size : vec2 = vec2 ();

    pub self (dmut widget : &Widget, x : WidgetSize, y : WidgetSize, level : u32, propagate : bool)
        with widget = alias widget
        , propagate = propagate
        , level = level
        , x = x
        , y = y
    {}
}


pub class FloatingLayout over Layout {

    // The columns of the layout
    let dmut _childs : [Child] = [];

    // Set when to display a menu layout overriding any events until it loses focus
    let dmut _menuLayouts : [usize => Child] = copy [];

    // The menu layout sorted by level
    let dmut _sortedMenus : [Child] = [];

    // The uniq id of the menu layouts
    let mut _menuLayoutId : usize = 0us;

    // The widget that was hovered the last
    let dmut _lastHover : (&Widget)? = none;

    /**
     * @params:
     *    - position: the position relative to parent (between 0 and 1)
     *    - size: the size relative to parent (between 0 and 1)
     * */
    pub self (dmut manager : &WidgetManager, name : [c8])
        with super (alias manager, name, WidgetKeys::FLOATING_LAYOUT)
    {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          ATTACH/DETACH          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over onAttach (mut self) {
        self._attached = true;

        for dmut i in alias self._childs {
            i.widget:.onAttach ();
        }

        self:.closeAllMenu ();
    }

    pub over onDetach (mut self) {
        self._attached = false;
        for dmut i in alias self._childs {
            i.widget:.onDetach ();
        }

        self:.closeAllMenu ();
        self:.dispose ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DRAW SIZE          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Compute the drawing size of the inner widgets
     * Floating layout are computed in last by the widget manager, and can be attached to another widget to be relative from it
     */
    over onUpdateSize (mut self) {
        let mut currentMaxDepth = self._depth;

        for col in 0 .. self._childs.len {
            let w = self.clampSize (self._childs [col].widget.getStyle ().getWidth (), self._absoluteSize.x);
            let h = self.clampSize (self._childs [col].widget.getStyle ().getHeight (), self._absoluteSize.y);

            let x = self.clampSize (self._childs [col].x, self._absoluteSize.x);
            let y = self.clampSize (self._childs [col].y, self._absoluteSize.y);

            let wpos = makeVec2 (x, y) * self._absoluteSize + self._absolutePosition;
            let wsize = makeVec2 (w, h) * self._absoluteSize;
            let (sciPos, sciEnd) = self.getScissors (wpos, wsize);

            self._childs [col].widget:.setSize (wpos, wsize, currentMaxDepth + 1);
            self._childs [col].widget:.setScissors (sciPos, sciEnd);

            self._childs [col].pos = (wpos - self._absolutePosition) / self._absoluteSize;
            self._childs [col].size = wsize / self._absoluteSize;
            currentMaxDepth = self._childs [col].widget.getMaxDepth ();
        }

        for col in 0 .. self._sortedMenus.len {
            let w = self.clampSize (self._sortedMenus [col].widget.getStyle ().getWidth (), self._absoluteSize.x);
            let h = self.clampSize (self._sortedMenus [col].widget.getStyle ().getHeight (), self._absoluteSize.y);

            let x = self.clampSize (self._sortedMenus [col].x, self._absoluteSize.x);
            let y = self.clampSize (self._sortedMenus [col].y, self._absoluteSize.y);

            let wpos = makeVec2 (x, y) * self._absoluteSize + self._absolutePosition;
            let wsize = makeVec2 (w, h) * self._absoluteSize;
            let (sciPos, sciEnd) = self.getScissors (wpos, wsize);

            self._sortedMenus [col].widget:.setSize (wpos, wsize, currentMaxDepth + 1);
            self._sortedMenus [col].widget:.setScissors (sciPos, sciEnd);

            self._sortedMenus [col].pos = (wpos - self._absolutePosition) / self._absoluteSize;
            self._sortedMenus [col].size = wsize / self._absoluteSize;
            currentMaxDepth = self._sortedMenus [col].widget.getMaxDepth ();
        }
    }

    over onUpdateScissors (mut self) {
        for dmut i in alias self._childs {
            let wpos = (i.pos * self._absoluteSize) + self._absolutePosition;
            let wsize = (i.size * self._absoluteSize);
            let (sciPos, sciEnd) = self.getScissors (wpos, wsize);

            i.widget:.setScissors (sciPos, sciEnd);
        }

        for dmut i in alias self._sortedMenus {
            let wpos = (i.pos * self._absoluteSize) + self._absolutePosition;
            let wsize = (i.size * self._absoluteSize);
            let (sciPos, sciEnd) = self.getScissors (wpos, wsize);

            i.widget:.setScissors (sciPos, sciEnd);
        }
    }

    over onHide (mut self) {
        for dmut i in alias self._childs  {
            i.widget:.hide ();
        }
        self:.closeAllMenu ();
    }

    over onShow (mut self) {
        for dmut i in alias self._childs  {
            i.widget:.show ();
        }
        self:.closeAllMenu ();
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          INSERT CHILDS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Insert a child in the layout
     * @warning: child is disposed when layout is disposed
     * */
    pub fn insertChild (mut self, dmut ch : &Widget,
                        x : WidgetSize = WidgetSize (relative-> 0.f),
                        y : WidgetSize = WidgetSize (relative-> 0.f),
                        withEvents : bool = true,
                        level : u32 = 0)
    {
        self._childs ~= [Child (alias ch, x, y, propagate-> withEvents, level-> level)];
        std::algorithm::sorting::sort (alias self._childs, |x, y| => { x.level < y.level });

        self._manager:.updateWidgets ();
    }

    /**
     * Open a menu layout in the floating layout
     * @returns: the uniq id of the menu layout (to remove it)
     * */
    pub fn openMenu (mut self, dmut ch : &Widget, x : WidgetSize, y : WidgetSize)-> usize {
        if !self._attached {
            log::error #("FloatingLayout", "Cannot open a menu layout on an unattached floating layout");
            return 0;
        }

        let id = self._menuLayoutId + 1;
        self._menuLayoutId += 1;
        self._menuLayouts [id] = Child (alias ch, x, y, propagate-> true, level-> self.getMaxDepth ());

        self._sortedMenus = copy [alias i for _, dmut i in alias self._menuLayouts];
        std::algorithm::sorting::sort (alias self._sortedMenus, |x, y| => { x.level < y.level });

        ch:.onAttach ();
        self._manager:.updateWidgets ();
        id
    }

    /**
     * Close a menu layout
     * @params:
     *   - id: the uniq id of the menu widget
     * */
    pub fn closeMenu (mut self, id : usize) {
        if let Ok (dmut w) = alias self._menuLayouts [id] {
            w.widget:.onDetach ();
            w.widget:.dispose ();

            self._menuLayouts:.remove (id);

            self._sortedMenus = copy [alias i for _, dmut i in alias self._menuLayouts];
            std::algorithm::sorting::sort (alias self._sortedMenus, |x, y| => { x.level < y.level });

            self._manager:.updateWidgets ();
        }
    }

    /**
     * Close all menus of the floating layout
     * */
    prot fn closeAllMenu (mut self) {
        for dmut i in alias self._sortedMenus {
            i.widget:.onDetach ();
            i.widget:.dispose ();
        }

        let redraw = (self._sortedMenus.len != 0);

        self._sortedMenus = [];
        self._menuLayouts = copy [];

        if redraw {
            self._manager:.updateWidgets ();
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GET/SET          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over getMaxDepth (self)-> u32 {
        let mut max = self._depth;
        for i in self._childs {
            let chD = i.widget.getMaxDepth ();
            if chD > max { max = chD; }
        }

        for i in self._sortedMenus {
            let chD = i.widget.getMaxDepth ();
            if chD > max { max = chD; }
        }

        max
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          TICK EVENTS          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Propagate the tick events to childrens
     * */
    pub over onTick (mut self, delta : Duration) {
        for dmut c in alias self._childs {
            c.widget:.onTick (delta);
        }

        for dmut c in alias self._sortedMenus {
            c.widget:.onTick (delta);
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          MOUSE EVENTS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Propagate the signal to the childs
     * @params:
     *   - pos: the relative position of the cursor within the layout
     */
    pub over onHover (mut self, pos : vec2)-> dmut (&Widget)? {
        let mut canBeSelf = true;
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos, ref canBeSelf) {
            if let Ok (dmut w) = alias self._lastHover && c !is w {
                w:.onLoseHoverFocus ();
            }

            self._lastHover = (alias c)?;
            return c:.onHover (v);
        }

        if let Ok (dmut w) = alias self._lastHover {
            w:.onLoseHoverFocus ();
            self._lastHover = none;
        }

        if canBeSelf {
            self:.setHover (true);
            (alias self)?
        } else {
            none
        }
    }

    pub over onLoseHoverFocus (mut self) {
        if let Ok (dmut c) = alias self._lastHover {
            c:.onLoseHoverFocus ();
            self._lastHover = none;
        }

        self:.setHover (false);
    }

    /**
     * Propagate the signal to the childrens
     */
    pub over onDoubleClick (mut self, pos : vec2)-> dmut (&Widget)? {
        let mut canBeSelf = true;
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos, ref canBeSelf) {
            return c:.onDoubleClick (v);
        }

        if self._menuLayouts.len != 0 {
            self:.closeAllMenu ();
        }

        if canBeSelf {
            (alias self)?
        } else {
            none
        }
    }

    /**
     * Propagate the signal to the childrens
     */
    pub over onClick (mut self, pos : vec2, button : u8)-> dmut (&Widget)? {
        let mut canBeSelf = true;
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos, ref canBeSelf) {
            return c:.onClick (v, button);
        }

        if self._menuLayouts.len != 0 {
            self:.closeAllMenu ();
        }

        if canBeSelf {
            (alias self)?
        } else {
            none
        }
    }

    /**
     * Propagate the scrolling signal to children
     * */
    pub over onScroll (mut self, pos : vec2, amountX : i32, amountY : i32)-> bool {
        let mut ignore = false;
        let res = if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos, ref ignore) {
            c:.onScroll (v, amountX, amountY)
        } else { false };

        self:.onHover (pos);
        res
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over find (mut self, names : [[c8]])-> dmut (&Widget)? {
        if names.len == 0 { return none; }

        for dmut c in alias self._childs {
            if c.widget.name == names [0] {
                if names.len == 1 { return (alias c.widget)?; }
                else return c.widget:.find (names [1 .. $]);
            }
        }

        for dmut c in alias self._sortedMenus {
            if c.widget.name == names [0] {
                if names.len == 1 { return (alias c.widget)?; }
                else return c.widget:.find (names [1 .. $]);
            }
        }

        none
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            self:.closeAllMenu ();
            for dmut c in alias self._childs {
                c.widget:.dispose ();
            }

            self._super_:.dispose ();
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          PRIVATES          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns:
     *  - .1 : the widget on which the mouse is positionned
     *  - .2 : the position of the mouse relative to the widget
     */
    fn mouseToWidget (mut self, pos : vec2, ref mut canBeSelf : bool)-> dmut (&Widget, vec2)? {
        canBeSelf = false;
        if let Ok (inPaddingPos) = self.isInPadding (pos) {
            canBeSelf = true;

            // Try propagating the events on menu layout first
            for dmut w in alias self._sortedMenus {
                let a = w.pos;
                let b = a + w.size;

                if let Ok (relPos) = self.isInSquare (inPaddingPos, a, b) {
                    canBeSelf = false;
                    if let Ok (_) = w.widget.isInBorder (relPos) {
                        return (alias w.widget, relPos)?
                    }
                }
            }

            // Menu layouts overrides inner events
            if self._menuLayouts.len != 0 {
                return none;
            }

            // Otherwise propagate the events on sub layouts
            // iterate in reverse order to get the widget on top first
            for i in self._childs.len .. 0 {
                if self._childs [i - 1].propagate {
                    let a = self._childs [i - 1].pos;
                    let b = a + self._childs [i - 1].size;

                    if let Ok (relPos) = self.isInSquare (inPaddingPos, a, b) {
                        canBeSelf = false;
                        if let Ok (_) = self._childs [i - 1].widget.isInBorder (relPos) {
                            return (alias self._childs [i - 1].widget, relPos)?
                        }
                    }
                }
            }
        }

        none
    }

}
