in floating;

use ::std::algorithm::comparison;

use std::{io, time::_};

use balder::core::_;
use balder::math::_;
use balder::interface::_;
use balder::interface::widget::_;

record FloatingWidgetPosition {
    pub let x : WidgetSize;
    pub let y : WidgetSize;

    pub self (x : WidgetSize, y : WidgetSize)
        with x = x
        , y = y
    {}
}

pub class FloatingLayout over Layout {

    // The columns of the layout
    let dmut _childs : [(FloatingWidgetPosition, &Widget, vec2, vec2, bool, u32)] = [];

    // The widget that was hovered the last
    let dmut _lastHover : (&Widget)? = none;

    /**
     * @params:
     *    - position: the position relative to parent (between 0 and 1)
     *    - size: the size relative to parent (between 0 and 1)
     * */
    pub self (dmut manager : &WidgetManager, name : [c8])
        with super (alias manager, name, WidgetKeys::FLOATING_LAYOUT)
    {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          ATTACH/DETACH          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over onAttach (mut self) {
        self._attached = true;

        for dmut i in alias self._childs {
            i._1:.onAttach ();
        }
    }

    pub over onDetach (mut self) {
        self._attached = false;
        for dmut i in alias self._childs {
            i._1:.onDetach ();
        }

        self:.dispose ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DRAW SIZE          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Compute the drawing size of the inner widgets
     * Floating layout are computed in last by the widget manager, and can be attached to another widget to be relative from it
     */
    over onUpdateSize (mut self) {
        let mut currentMaxDepth = self._depth;

        for col in 0 .. self._childs.len {
            let w = self.clampSize (self._childs [col]._1.getStyle ().getWidth (), self._absoluteSize.x);
            let h = self.clampSize (self._childs [col]._1.getStyle ().getHeight (), self._absoluteSize.y);

            let x = self.clampSize (self._childs [col]._0.x, self._absoluteSize.x);
            let y = self.clampSize (self._childs [col]._0.y, self._absoluteSize.y);

            let wpos = makeVec2 (x, y) * self._absoluteSize + self._absolutePosition;
            let wsize = makeVec2 (w, h) * self._absoluteSize;

            let sciPos = makeVec2 (max (wpos.x, self._scissorPos.x),
                                   max (wpos.y, self._scissorPos.y));

            let sciEnd = makeVec2 (min (wpos.x + wsize.x, self._scissorPos.x + self._scissorSize.x),
                                   min (wpos.y + wsize.y, self._scissorPos.y + self._scissorSize.y));

            self._childs [col]._1:.setSize (wpos, wsize, currentMaxDepth + 1);
            self._childs [col]._1:.setScissors (sciPos, sciEnd - sciPos);

            self._childs [col]._2 = (wpos - self._absolutePosition) / self._absoluteSize;
            self._childs [col]._3 = wsize / self._absoluteSize;
            currentMaxDepth = self._childs [col]._1.getMaxDepth ();
        }
    }

    over onUpdateScissors (mut self) {
        for dmut i in alias self._childs {
            let wpos = (i._2 * self._absoluteSize) + self._absolutePosition;
            let wsize = (i._3 * self._absoluteSize);

            let sciPos = makeVec2 (max (wpos.x, self._scissorPos.x),
                                   max (wpos.y, self._scissorPos.y));

            let sciEnd = makeVec2 (min (wpos.x + wsize.x, self._scissorPos.x + self._scissorSize.x),
                                   min (wpos.y + wsize.y, self._scissorPos.y + self._scissorSize.y));

            i._1:.setScissors (sciPos, sciEnd - sciPos);
        }
    }

    over onHide (mut self) {
        for dmut i in alias self._childs  {
            i._1:.hide ();
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          INSERT CHILDS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Insert a child in the layout
     * @warning: child is disposed when layout is disposed
     * */
    pub fn insertChild (mut self, dmut ch : &Widget, x : WidgetSize = WidgetSize (relative-> 0.f), y : WidgetSize = WidgetSize (relative-> 0.f), withEvents : bool = true, level : u32 = 0) {
        self._childs ~= [(FloatingWidgetPosition (x, y), alias ch, makeVec2 (0.f, 0.f), makeVec2 (0.f, 0.f), withEvents, level)];
        std::algorithm::sorting::sort (alias self._childs, |x, y| => { x.5 < y.5 });

        self._manager:.updateWidgets ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GET/SET          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over getMaxDepth (self)-> u32 {
        let mut max = self._depth;
        for i in self._childs {
            let chD = i._1.getMaxDepth ();
            if chD > max { max = chD; }
        }

        max
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          TICK EVENTS          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Propagate the tick events to childrens
     * */
    pub over onTick (mut self, delta : Duration) {
        for dmut c in alias self._childs {
            c._1:.onTick (delta);
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          MOUSE EVENTS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Propagate the signal to the childs
     * @params:
     *   - pos: the relative position of the cursor within the layout
     */
    pub over onHover (mut self, pos : vec2)-> dmut (&Widget)? {
        let mut canBeSelf = true;
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos, ref canBeSelf) {
            if let Ok (dmut w) = alias self._lastHover && c !is w {
                w:.onLoseHoverFocus ();
            }

            self._lastHover = (alias c)?;
            return c:.onHover (v);
        }

        if let Ok (dmut w) = alias self._lastHover {
            w:.onLoseHoverFocus ();
            self._lastHover = none;
        }

        if canBeSelf {
            self:.setHover (true);
            (alias self)?
        } else {
            none
        }
    }

    pub over onLoseHoverFocus (mut self) {
        if let Ok (dmut c) = alias self._lastHover {
            c:.onLoseHoverFocus ();
            self._lastHover = none;
        }

        self:.setHover (false);
    }

    /**
     * Propagate the signal to the childrens
     */
    pub over onDoubleClick (mut self, pos : vec2)-> dmut (&Widget)? {
        let mut canBeSelf = true;
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos, ref canBeSelf) {
            return c:.onDoubleClick (v);
        }

        if canBeSelf {
            (alias self)?
        } else {
            none
        }
    }

    /**
     * Propagate the signal to the childrens
     */
    pub over onClick (mut self, pos : vec2, button : u8)-> dmut (&Widget)? {
        let mut canBeSelf = true;
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos, ref canBeSelf) {
            return c:.onClick (v, button);
        }

        if canBeSelf {
            (alias self)?
        } else {
            none
        }
    }

    /**
     * Propagate the scrolling signal to children
     * */
    pub over onScroll (mut self, pos : vec2, amountX : i32, amountY : i32)-> bool {
        let mut ignore = false;
        let res = if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos, ref ignore) {
            c:.onScroll (v, amountX, amountY)
        } else { false };

        self:.onHover (pos);
        res
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over find (mut self, names : [[c8]])-> dmut (&Widget)? {
        if names.len == 0 { return none; }

        for dmut c in alias self._childs {
            if c._1.name == names [0] {
                if names.len == 1 { return (alias c._1)?; }
                else return c._1:.find (names [1 .. $]);
            }
        }

        none
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            for dmut c in alias self._childs {
                c._1:.dispose ();
            }

            self._super_:.dispose ();
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          PRIVATES          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns:
     *  - .1 : the widget on which the mouse is positionned
     *  - .2 : the position of the mouse relative to the widget
     */
    fn mouseToWidget (mut self, pos : vec2, ref mut canBeSelf : bool)-> dmut (&Widget, vec2)? {
        canBeSelf = false;
        if let Ok (inPaddingPos) = self.isInPadding (pos) {
            canBeSelf = true;

            // iterate in reverse order to get the widget on top first
            for i in self._childs.len .. 0 {
                if self._childs [i - 1]._4 {
                    let a = self._childs [i - 1]._2;
                    let b = a + self._childs [i - 1]._3;

                    if let Ok (relPos) = self.isInSquare (inPaddingPos, a, b) {
                        canBeSelf = false;
                        if let Ok (_) = self._childs [i - 1]._1.isInBorder (relPos) {
                            return (alias self._childs [i - 1]._1, relPos)?
                        }
                    }
                }
            }
        }

        none
    }

}
