in floating;

use ::std::algorithm::comparison;

use std::io;

use balder::core::_;
use balder::math::_;
use balder::interface::_;
use balder::interface::widget::_;

record FloatingWidgetPosition {
    pub let x : WidgetSize;
    pub let y : WidgetSize;
    pub let z : WidgetSize;
    pub let w : WidgetSize;
    pub self (x : WidgetSize, y : WidgetSize, z : WidgetSize, w : WidgetSize)
        with x = x
        , y = y
        , z = z
        , w = w
    {}
}

pub class FloatingLayout over Layout {

    // The columns of the layout
    let dmut _childs : [(FloatingWidgetPosition, &Widget, vec2, vec2)] = [];

    // The widget that was hovered the last (to send onHoverEnd)
    let dmut _lastHover : (&Widget)? = none;

    /**
     * @params:
     *    - position: the position relative to parent (between 0 and 1)
     *    - size: the size relative to parent (between 0 and 1)
     * */
    pub self (dmut manager : &WidgetManager, name : [c8])
        with super (alias manager, name)
    {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DRAW SIZE          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Compute the drawing size of the inner widgets
     * Floating layout are computed in last by the widget manager, and can be attached to another widget to be relative from it
     */
    prot over onUpdateSizes (mut self, pos : vec2, viewport : vec2, depth : u32) {
        for col in 0 .. self._childs.len {
            let w = self.clampSize (self._childs [col]._0.z, viewport.x);
            let h = self.clampSize (self._childs [col]._0.w, viewport.y);

            let x = self.clampSize (self._childs [col]._0.x, viewport.x);
            let y = self.clampSize (self._childs [col]._0.y, viewport.y);

            let wpos = makeVec2 (x, y) * viewport + pos;
            let wsize = makeVec2 (w, h) * viewport;
            self._childs [col]._1:.updateSizes (wpos, wsize, depth + cast!u32 (col) + 1);
            self._childs [col]._2 = (wpos - pos) / viewport;
            self._childs [col]._3 = wsize / viewport;
        }
    }

    pub over hide (mut self) {
        for dmut i in alias self._childs  {
            i._1:.hide ();
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          INSERT CHILDS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Insert a child in the layout
     * @warning: child is disposed when layout is disposed
     * */
    pub fn insertChild (mut self, dmut ch : &Widget, x : WidgetSize = WidgetSize (relative-> 0.f), y : WidgetSize = WidgetSize (relative-> 0.f), width : WidgetSize = WidgetSize (relative-> 1.f), height : WidgetSize = WidgetSize (relative-> 1.f)) {
        self._childs ~= [(FloatingWidgetPosition (x, y, width, height), alias ch, makeVec2 (0.f, 0.f), makeVec2 (0.f, 0.f))];
        self._manager:.updateWidgets ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GET/SET          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over getMaxDepth (self)-> u32 {
        let mut max = self._depth;
        for i in self._childs {
            let chD = i._1.getMaxDepth ();
            if chD > max { max = chD; }
        }

        max
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          MOUSE EVENTS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Propagate the signal to the childs
     * @params:
     *   - pos: the relative position of the cursor within the layout
     */
    pub over onHover (mut self, pos : vec2) {
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos) {
            if let Ok (dmut h) = alias self._lastHover && h !is c {
                h:.onHoverEnd ();
            }

            c:.onHover (v);
            self._lastHover = (alias c)?;
        } else {
            if let Ok (dmut h) = alias self._lastHover {
                h:.onHoverEnd ();
            }
        }
    }

    /**
     * Propagate the signal to the childs
     */
    pub over onHoverEnd (mut self) {
        if let Ok (dmut h) = alias self._lastHover {
            h:.onHoverEnd ();
            self._lastHover = none;
        }
    }

    /**
     * Propagate the signal to the childrens
     */
    pub over onClickLeft (mut self, pos : vec2) {
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos) {
            c:.onClickLeft (v);
        }
    }

    /**
     * Propagate the signal to the childrens
     */
    pub over onClickLeftEnd (mut self, pos : vec2) {
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos) {
            c:.onClickLeftEnd (v);
        }
    }

    /**
     * Propagate the event to the childrens
     */
    pub over onScroll (mut self, pos : vec2, amountX : i32, amountY : i32)-> bool {
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos) {
            return c:.onScroll (v, amountX, amountY);
        }

        false
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            for dmut c in alias self._childs {
                c._1:.dispose ();
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          PRIVATES          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns:
     *  - .1 : the widget on which the mouse is positionned
     *  - .2 : the position of the mouse relative to the widget
     */
    fn mouseToWidget (mut self, pos : vec2)-> dmut (&Widget, vec2)? {
        // iterate in reverse order to get the widget on top first
        for i in self._childs.len .. 0 {
            let a = self._childs [i - 1]._2;
            let b = a + self._childs [i - 1]._3;

            if (pos.x >= a.x && pos.x <= b.x && pos.y >= a.y && pos.y <= b.y) {
                let relPos = makeVec2 ((pos.x - a.x) / (b.x - a.x),
                                       (pos.y - a.y) / (b.y - a.y));

                return (alias self._childs [i - 1]._1, relPos)?;
            }
        }

        return none;
    }

}
