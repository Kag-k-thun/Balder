in linear;

use ::std::algorithm::comparison;

use std::io;

use balder::utils::_;
use balder::core::_;
use balder::math::_;
use balder::interface::_;
use balder::interface::widget::_;

pub class LinearLayout over Layout {

    // The columns of the layout
    let dmut _childs : [(WidgetSize, &Widget, vec2, vec2)] = [];

    // The border size
    let _border : WidgetSize;

    // The margin between the columns
    let _margin : WidgetSize;

    // If true widget are draw vertically, horizontally otherwise
    let _vertical : bool;

    // The size of the border relative to window size
    let mut _relBorderSizes : vec2 = vec2 ();

    // The size (width if vertical, height otherwise) of the layout (relative to window size)
    let mut _relFullSize : f32 = 0.f;

    // The current shifting (wheel)
    let mut _shift = 0.f;

    // The widget that was hovered the last (to send onHoverEnd)
    let dmut _lastHover : (&Widget)? = none;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          CTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (dmut manager : &WidgetManager, name : [c8], margin : WidgetSize = WidgetSize (), border : WidgetSize = WidgetSize (), vertical : bool = true)
        with super (alias manager, name)
        , _margin = margin
        , _vertical = vertical
        , _lastHover = none
        , _border = border
    {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DRAW SIZE          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Compute the drawing size of the inner widgets
     */
    prot over onUpdateSizes (mut self, pos : vec2, viewport : vec2, depth : u32) {
        self._relBorderSizes = makeVec2 (self.clampSize (self._border, viewport.x),
                                         self.clampSize (self._border, viewport.y));

        if self._childs.len == 0 {
            if self._vertical {
                self._relFullSize = self._relBorderSizes.x * 2.f;
            } else self._relFullSize = self._relBorderSizes.y * 2.f;

            return;
        }

        let relMarginDrawSize = if (self._vertical) {
            self.clampSize (self._margin, viewport.x)
        } else {
            self.clampSize (self._margin, viewport.y)
        };

        let (mut current, viewportSize) = if self._vertical {
            (self._relBorderSizes.x, viewport.x - ((self._relBorderSizes.x * 2.f) * viewport.x))
        } else {
            (self._relBorderSizes.y, viewport.y - ((self._relBorderSizes.y * 2.f) * viewport.y))
        };

        if viewportSize <= 0.f {
            log::warn #("LinearLayout", "Border size are too big to display widgets");
            self:.hide ();

            return;
        }

        for col in 0 .. self._childs.len {
            let relColumnSize = self.clampSize (self._childs [col]._0, viewportSize);

            let (wpos, wsize) = if self._vertical {
                let wpos = makeVec2 (current + self._shift, self._relBorderSizes.y) * viewport + pos;
                let wsize = makeVec2 (relColumnSize, 1.f - (self._relBorderSizes.y * 2.f)) * makeVec2 (viewportSize, viewport.y);
                self._relFullSize = current + relColumnSize + self._relBorderSizes.x;

                current  += (wsize.x / viewport.x) + relMarginDrawSize;

                (wpos, wsize)
            } else {
                let wpos =  makeVec2 (self._relBorderSizes.x, current + self._shift) * viewport + pos;
                let wsize = makeVec2 (1.f - (self._relBorderSizes.x * 2.f), relColumnSize) * makeVec2 (viewport.x, viewportSize);
                self._relFullSize = current + relColumnSize + self._relBorderSizes.y;

                current  += (wsize.y / viewport.y) + relMarginDrawSize;

                (wpos, wsize)
            };

            self._childs [col]._1:.updateSizes (wpos, wsize, depth + 1);
            self._childs [col]._2 = (wpos - pos) / viewport;
            self._childs [col]._3 = wsize / viewport;
        }
    }

    pub over hide (mut self) {
        for dmut i in alias self._childs {
            i._1:.hide ();
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          INSERT CHILDS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Insert a child in the layout
     * @warning: child is disposed when layout is disposed
     * */
    pub fn insertChild (mut self, size : WidgetSize, dmut ch : &Widget) {
        self._childs ~= [(size, alias ch, makeVec2 (0.f, 0.f), makeVec2 (0.f, 0.f))];
        self._manager:.updateWidgets ();
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SET/GET          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Make the layout scroll up/down
     * */
    pub fn setShift (mut self, scroll : f32) {
        self._shift = scroll;
    }

    /**
     * The current shifting of the layout
     * */
    @field
    pub fn shift (self)-> f32 {
        self._shift
    }

    /**
     * @returns: the relative size of the border
     * */
    pub fn getRelativeBorderSize (self)-> vec2 {
        self._relBorderSizes
    }

    /**
     * @returns: true iif the widgets in the layout are rendered left to right (up to bottom otherwise)
     * */
    pub fn isVertical (self)-> bool {
        self._vertical
    }

    pub over getMaxDepth (self)-> u32 {
        let mut max = self._depth;
        for i in self._childs {
            let chD = i._1.getMaxDepth ();
            if chD > max { max = chD; }
        }

        max
    }

    /**
     * @returns: the full length of the layout relative to the window, (i.e. width if vertical, height otherwise)
     * @info: this can be greater than 1, depending on the size of inner elements
     * */
    pub fn getFullLength (self)-> f32 {
        self._relFullSize
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          MOUSE EVENTS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Propagate the signal to the childs
     * @params:
     *   - pos: the relative position of the cursor within the layout
     */
    pub over onHover (mut self, pos : vec2) {
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos) {
            if let Ok (dmut h) = alias self._lastHover && h !is c {
                h:.onHoverEnd ();
            }

            c:.onHover (v);
            self._lastHover = (alias c)?;
        } else {
            if let Ok (dmut h) = alias self._lastHover {
                h:.onHoverEnd ();
            }
        }
    }

    /**
     * Propagate the signal to the childs
     */
    pub over onHoverEnd (mut self) {
        if let Ok (dmut h) = alias self._lastHover {
            h:.onHoverEnd ();
            self._lastHover = none;
        }
    }

    /**
     * Propagate the signal to the childrens
     */
    pub over onClickLeft (mut self, pos : vec2) {
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos) {
            c:.onClickLeft (v);
        }
    }

    /**
     * Propagate the signal to the childrens
     */
    pub over onClickLeftEnd (mut self, pos : vec2) {
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos) {
            c:.onClickLeftEnd (v);
        }
    }

    /**
     * Propagate the event to the childrens
     */
    pub over onScroll (mut self, pos : vec2, amountX : i32, amountY : i32)-> bool {
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos) {
            return c:.onScroll (v, amountX, amountY);
        }

        false
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {

        pub over dispose (mut self) {
            for dmut c in alias self._childs {
                c._1:.dispose ();
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          PRIVATES          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns:
     *  - .1 : the widget on which the mouse is positionned
     *  - .2 : the position of the mouse relative to the widget
     */
    fn mouseToWidget (mut self, pos : vec2)-> dmut (&Widget, vec2)? {
        if pos.y < self._relBorderSizes.y || pos.y > 1.f - (self._relBorderSizes.y) {
            return none;
        }

        if pos.x < self._relBorderSizes.x || pos.x > 1.f - (self._relBorderSizes.x) {
            return none;
        }

        for i in 0 .. self._childs.len {
            let a = self._childs [i]._2;
            let b = a + self._childs [i]._3;

            if self._vertical {
                if (pos.x >= a.x && pos.x <= b.x) {
                    let relPos = makeVec2 ((pos.x - a.x) / (b.x - a.x),
                                           (pos.y - self._relBorderSizes.y) / (1.0f - (self._relBorderSizes.y * 2.f)));

                    return (alias self._childs [i]._1, relPos)?;
                }
            } else {
                if (pos.y >= a.y && pos.y <= b.y) {
                    let relPos = makeVec2 ((pos.x - self._relBorderSizes.x) / (1.0f - (self._relBorderSizes.x * 2.f)),
                                           (pos.y - a.y) / (b.y - a.y));

                    return (alias self._childs [i]._1, relPos)?;
                }
            }
        }

        return none;
    }

}
