in linear;

use ::std::algorithm::comparison;

use std::{io, time::_};

use balder::utils::_;
use balder::core::_;
use balder::math::_;
use balder::interface::_;
use balder::interface::widget::_;

pub class LinearLayout over Layout {

    // The columns of the layout
    let dmut _childs : [(WidgetSize, &Widget, vec2, vec2, u32)] = [];

    // If true widget are draw vertically, horizontally otherwise
    let _vertical : bool;

    // The current shifting (wheel)
    let mut _shift = 0.f;

    // The relative size of the widget (may be greater than 1 if containes too much widgets to fit on screenÂ°)
    let mut _relFullSize = 0.f;

    // The widget that was hovered the last (to send onHoverEnd)
    let dmut _lastHover : (&Widget)? = none;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          CTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (dmut manager : &WidgetManager, name : [c8], vertical : bool = true)
        with super (alias manager, name)
        , _vertical = vertical
        , _lastHover = none

    {
        self:.registerShape (WidgetShapeKind::BACKGROUND);
        self:.registerShape (WidgetShapeKind::BORDER);

        self:.reloadStyle ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DRAW SIZE          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Compute the drawing size of the inner widgets
     */
    over onUpdateSize (mut self) {
        if self._childs.len == 0 {
            return;
        }

        let mut current = 0.f;
        for col in 0 .. self._childs.len {
            let (wpos, wsize) = if self._vertical {
                let relColumnSize = self.clampSize (self._childs [col]._0, self._absoluteSize.x);
                let wpos = makeVec2 (current + self._shift, 0.f) * self._absoluteSize + self._absolutePosition;
                let wsize = makeVec2 (relColumnSize, 1.f) * self._absoluteSize;
                self._relFullSize = current + relColumnSize;

                current  += (wsize.x / self._absoluteSize.x);

                (wpos, wsize)
            } else {
                let relColumnSize = self.clampSize (self._childs [col]._0, self._absoluteSize.y);
                let wpos =  makeVec2 (0.f, current + self._shift) * self._absoluteSize + self._absolutePosition;
                let wsize = makeVec2 (1.f, relColumnSize) * self._absoluteSize;
                self._relFullSize = current + relColumnSize;

                current += (wsize.y / self._absoluteSize.y);

                (wpos, wsize)
            };

            self._childs [col]._1:.setSize (wpos, wsize, self._depth + 1);

            let sciPos = makeVec2 (max (wpos.x, self._scissorPos.x),
                                   max (wpos.y, self._scissorPos.y));

            let sciEnd = makeVec2 (min (wpos.x + wsize.x, self._scissorPos.x + self._scissorSize.x),
                                   min (wpos.y + wsize.y, self._scissorPos.y + self._scissorSize.y));

            self._childs [col]._1:.setScissors (sciPos, sciEnd - sciPos);

            self._childs [col]._2 = (wpos - self._absolutePosition) / self._absoluteSize;
            self._childs [col]._3 = wsize / self._absoluteSize;
        }
    }

    over onUpdateScissors (mut self) {
        for dmut i in alias self._childs {
            let wpos = (i._2 * self._absoluteSize) + self._absolutePosition;
            let wsize = (i._3 * self._absoluteSize);

            let sciPos = makeVec2 (max (wpos.x, self._scissorPos.x),
                                   max (wpos.y, self._scissorPos.y));

            let sciEnd = makeVec2 (min (wpos.x + wsize.x, self._scissorPos.x + self._scissorSize.x),
                                   min (wpos.y + wsize.y, self._scissorPos.y + self._scissorSize.y));

            i._1:.setScissors (sciPos, sciEnd - sciPos);
        }
    }

    over onHide (mut self) {
        for dmut i in alias self._childs {
            i._1:.hide ();
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          INSERT CHILDS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Insert a child in the layout
     * @warning: child is disposed when layout is disposed
     * */
    pub fn insertChild (mut self, size : WidgetSize, dmut ch : &Widget, level : u32 = 0) {
        self._childs ~= [(size, alias ch, makeVec2 (0.f, 0.f), makeVec2 (0.f, 0.f), level)];
        std::algorithm::sorting::sort (alias self._childs, |x, y| => { x._4 < y._4 });

        self._manager:.updateWidgets ();
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SET/GET          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Make the layout scroll up/down
     * */
    pub fn setShift (mut self, scroll : f32) {
        let oldShift = self._shift;

        for col in 0 .. self._childs.len {
            let mut wpos = self._childs [col]._2; // * self._absoluteSize + self._absolutePosition;
            let wsize = self._childs [col]._3 * self._absoluteSize;

            if self._vertical {
                wpos = makeVec2 (wpos.x - oldShift + scroll, wpos.y);
            } else {
                wpos = makeVec2 (wpos.x, wpos.y - oldShift + scroll);
            }

            self._childs [col]._2 = wpos;
            self._childs [col]._1:.setSize (wpos * self._absoluteSize + self._absolutePosition, wsize, self._depth + 1);
        }

        self._shift = scroll;
        self:.onUpdateScissors ();
    }

    /**
     * The current shifting of the layout
     * */
    @field
    pub fn shift (self)-> f32 {
        self._shift
    }

    /**
     * @returns: true iif the widgets in the layout are rendered left to right (up to bottom otherwise)
     * */
    pub fn isVertical (self)-> bool {
        self._vertical
    }

    pub over getMaxDepth (self)-> u32 {
        let mut max = self._depth;
        for i in self._childs {
            let chD = i._1.getMaxDepth ();
            if chD > max { max = chD; }
        }

        max
    }

    /**
     * @returns: the full length of the layout relative to the window, (i.e. width if vertical, height otherwise)
     * @info: this can be greater than 1, depending on the size of inner elements
     * */
    pub fn getFullLength (self)-> f32 {
        self._relFullSize
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          TICK EVENTS          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Propagate the tick events to childrens
     * */
    pub over onTick (mut self, delta : Duration) {
        for dmut c in alias self._childs {
            c._1:.onTick (delta);
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over find (mut self, names : [[c8]])-> dmut (&Widget)? {
        if names.len == 0 { return none; }

        for dmut c in alias self._childs {
            if c._1.name == names [0] {
                if names.len == 1 { return (alias c._1)?; }
                else return c._1:.find (names [1 .. $]);
            }
        }

        none
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          MOUSE EVENTS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Propagate the signal to the childs
     * @params:
     *   - pos: the relative position of the cursor within the layout
     */
    pub over onHover (mut self, pos : vec2)-> dmut &Widget {
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos) {
            if let Ok (dmut w) = alias self._lastHover && c !is w {
                w:.onLoseHoverFocus ();
            }

            self._lastHover = (alias c)?;
            return c:.onHover (v);
        }

        if let Ok (dmut w) = alias self._lastHover {
            w:.onLoseHoverFocus ();
            self._lastHover = none;
        }

        self:.setHover (true);
        alias self
    }

    pub over onLoseHoverFocus (mut self) {
        if let Ok (dmut c) = alias self._lastHover {
            c:.onLoseHoverFocus ();
            self._lastHover = none;
        }

        self:.setHover (false);
    }

    /**
     * Propagate the signal to the childrens
     */
    pub over onClick (mut self, pos : vec2, button : u8)-> dmut &Widget {
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos) {
            return c:.onClick (v, button);
        }

        alias self
    }

    /**
     * Propagate the signal to the childrens
     */
    pub over onDoubleClick (mut self, pos : vec2)-> dmut &Widget {
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos) {
            c:.onDoubleClick (v);
        }

        alias self
    }

    /**
     * Propagate the scrolling signal to children
     * */
    pub over onScroll (mut self, pos : vec2, amountX : i32, amountY : i32)-> bool {
        let res = if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos) {
            c:.onScroll (v, amountX, amountY)
        } else { false };

        self:.onHover (pos);
        res
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {

        pub over dispose (mut self) {
            self:.disposeShapes ();

            for dmut c in alias self._childs {
                c._1:.dispose ();
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          PRIVATES          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns:
     *  - .1 : the widget on which the mouse is positionned
     *  - .2 : the position of the mouse relative to the widget
     */
    fn mouseToWidget (mut self, pos : vec2)-> dmut (&Widget, vec2)? {
        for i in 0 .. self._childs.len {
            let a = self._childs [i]._2;
            let b = a + self._childs [i]._3;

            if let Ok (relPos) = self.isInSquare (pos, a, b) {
                if let Ok (relInner) = self._childs [i]._1.isInBorder (relPos) {
                    return (alias self._childs [i]._1, relInner)?
                }

                return none;
            }
        }

        none
    }

}
