in scrollbar;

use ::std::algorithm::comparison;

use std::io;

use balder::core::_;
use balder::math::_;
use balder::interface::_;
use balder::interface::widget::_;

use ::sdl2::_;

pub class ScrollLayout over Layout {

    // The scrollable layout
    let dmut _layout : &LinearLayout;

    // The size of the scrollbar square
    let _scrollSize : WidgetSize;

    // The size of the scrollbar relative to the layout
    let mut _relScrollBarSize : vec2 = vec2 ();

    // The current shifting of the scrollbar
    let mut _scrollShift = 0.f;

    // The color of the scrollbar
    let _scrollColor : vec4 = vec4 ();

    // The color of the scrollbar when hovered
    let _scrollHoverColor : vec4 = vec4 ();

    // The color of the scrollbar when clicked
    let _scrollClickColor : vec4 = vec4 ();

    // true iif the layout was hovered in last hover
    let mut _lastHoverLayout = false;

    // The slide start when sliding event starts
    let mut _slideStart : vec2 = vec2 ();

    // The scroll start when scroll event starts
    let mut _scollStart : f32 = 0.f;

    // The cursor to display when hovering the scrollbar
    let dmut _scrollMouseCursor : &SDL_Cursor = SDL_CreateSystemCursor (SDL_SystemCursor::SDL_SYSTEM_CURSOR_HAND);

    // The default cursor of the system (to restore when on hover end)
    let _defaultMouseCursor : &SDL_Cursor = SDL_GetDefaultCursor ();

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          CTOR/DTOR          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (dmut manager : &WidgetManager, name : [c8], dmut layout : &LinearLayout,
              scrollSize : WidgetSize = WidgetSize (minPix-> 10),
              scrollColor = ColorPalette.get ("grey")[2],
              scrollHoverColor = ColorPalette.get ("grey")[1],
              scrollClickColor = ColorPalette.get ("grey")[0])

        with super (alias manager, name)
        , _layout = alias layout
        , _scrollSize = scrollSize
        , _scrollColor = scrollColor
        , _scrollHoverColor = scrollHoverColor
        , _scrollClickColor = scrollClickColor
    {}

    __dtor (mut self) {
        self:.dispose ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DRAW SIZE          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    prot over onUpdateSizes (mut self, pos : vec2, viewport : vec2, depth : i32) {

    }



}
