in scrollbar;

use ::std::algorithm::comparison;

use std::{io, time::_, fs::path};

use balder::utils::_;
use balder::core::{_, application::_};
use balder::math::_;

use balder::interface::_;
use balder::interface::widget::_;

use balder::interface::widget::layout::linear;
use balder::interface::widget::layout::menu;

use ::sdl2::mouse;
use ::sdl2::events;

pub class ScrollLayout over Layout {

    // The scrollable layout
    let dmut _layout : &LinearLayout;

    prot { // computed sizes

        // The shape displaying the scrollbar
        let dmut _scrollbarShape : (&Shape)? = none;

        // The size of the scrollbar relative to the layout
        let mut _relScrollBarSize : vec2 = vec2 ();

        // The position of the scrollbar
        let mut _relScrollBarPos : vec2 = vec2 ();

        // The current shifting of the scrollbar
        let mut _scrollShift : f32 = 0.f;

        // The length of the scrollable part
        let mut _scrollLen : f32 = 0.f;

        // The depth of inside linear layout to draw scroll bar on top
        let mut _innerDepth : u32 = 0;

    }

    prot { // slide/scroll

        let mut _scrollSpeed : f32 = 1.f;

        // The slide start when sliding event starts
        let mut _slideStart : vec2 = vec2 ();

        // True iif the layout was hovered
        let mut _lastHoverLayout : bool = false;

    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          CTOR/DTOR          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (dmut manager : &WidgetManager, name : [c8], dmut layout : &LinearLayout, scrollSpeed : f32 = 2.f)
        with super (alias manager, name, WidgetKeys::LINEAR_LAYOUT)
        , _layout = alias layout
        , _scrollSpeed = scrollSpeed

    {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          ATTACH/DETACH          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over onAttach (mut self, parentPath : Path) {
        self.__super__:.onAttach (parentPath);

        let dmut shDr = self._manager:.getShapeDrawer ();
        {
            let dmut shape = shDr:.registerColorQuad ();
            shape:.setRadius (self.getStyle ().getSubStyle ("scrollbar").radius._1);

            self._scrollbarShape = (alias shape)?;
        } catch {
            err => {
                log::error #("Scrollbar", "Failed to construct shapes : ", err);
            }
        }

        self._layout:.onAttach (self._path);
    }

    pub over setMenuContext (mut self, dmut menu : &MenuLayout) {
        self._menuContext = (alias menu)?;
        self._layout:.setMenuContext (alias menu);
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DRAW SIZE          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    over onUpdateSize (mut self) {
        self._layout:.setSize (self._absolutePosition, self._absoluteSize, self._depth);

        let layoutSize = self._layout.getFullLength ();
        self._innerDepth = self._layout.getMaxDepth ();

        if (layoutSize <= 1.f) {
            self._scrollShift = 0.f;
            self._scrollLen = 1.f;
            self._layout:.setShift (0.f);
            if let Ok (dmut s) = alias self._scrollbarShape {
                s:.hide ();
            }

            return;
        }

        self._scrollLen = 1.f / layoutSize;
        self._scrollShift = -(self._layout.shift / layoutSize);

        if self._scrollShift + self._scrollLen > 1.f {
            self._scrollShift = 1.f - self._scrollLen;
        }

        self._layout:.setShift (-(self._scrollShift * layoutSize));
        let subStyle = self.getStyle ().getSubStyle ("scrollbar");

        if self._layout.isVertical () {
            let h = if subStyle.hasHeight () { subStyle.getHeight () } else { WidgetSize (pix-> 10) };
            self._relScrollBarSize = makeVec2 (self.clampSize (WidgetSize (relative-> self._scrollLen), self._absoluteSize.x),
                                               self.clampSize (h, self._absoluteSize.y));

            self._relScrollBarPos = makeVec2 (self.clampSize (WidgetSize (relative-> self._scrollShift), self._absoluteSize.x),
                                              1.f - self._relScrollBarSize.y);

        } else {
            let w = if subStyle.hasWidth () { subStyle.getWidth () } else { WidgetSize (pix-> 10) };
            self._relScrollBarSize = makeVec2 (self.clampSize (w, self._absoluteSize.x),
                                               self.clampSize (WidgetSize (relative-> self._scrollLen), self._absoluteSize.y));

            self._relScrollBarPos = makeVec2 (1.f - self._relScrollBarSize.x,
                                              self.clampSize (WidgetSize (relative-> self._scrollShift), self._absoluteSize.y));
        }

        if let Ok (dmut s) = alias self._scrollbarShape {
            s:.setPosition (self._relScrollBarPos * self._absoluteSize + self._absolutePosition);
            s:.setSize (self._relScrollBarSize * self._absoluteSize);
            s:.setLevel (self._innerDepth + 1);

            s:.show ();
        }
    }

    over onUpdateScissors (mut self) {
        let wpos = self._absolutePosition;
        let wsize = self._absoluteSize;
        let (sciPos, sciEnd) = self.getScissors (wpos, wsize);

        self._layout:.setScissors (sciPos, sciEnd);
        if let Ok (dmut s) = alias self._scrollbarShape {
            s:.setScissors (self._scissorPos, self._scissorSize);
        }
    }

    over onHide (mut self) {
        self._layout:.hide ();

        if let Ok (dmut s) = alias self._scrollbarShape {
            s:.hide ();
        }
    }

    over onShow (mut self) {
        self._layout:.show ();

        if let Ok (dmut s) = alias self._scrollbarShape {
            s:.show ();
        }
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GET/SET          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over getMaxDepth (self)-> u32 {
        // The depth of the scrollbar is already computed to be bigger than anything within the layout
        self._innerDepth + 1
    }

    pub over isFocusableLeftClick (self)-> bool {
        true
    }

    pub over loseFocusOnReleaseLeft (self)-> bool {
        true
    }

    pub over find (mut self, names : [[c8]])-> dmut (&Widget)? {
        self._layout:.find (names)
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          TICK EVENTS          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Propagate the tick events to childrens
     * */
    pub over onTick (mut self, delta : Duration) {
        self._layout:.onTick (delta);
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          MOUSE EVENTS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over onHover (mut self, pos : vec2)-> dmut (&Widget)? {
        if self.mouseOnLayout (pos) {
            self._lastHoverLayout = true;
            self:.setHover (false);
            self._manager:.getCursorManager ():.setCursor (SDL_SystemCursor::SDL_SYSTEM_CURSOR_ARROW);

            return self._layout:.onHover (pos);
        }

        if self._lastHoverLayout {
            self._layout:.onLoseHoverFocus ();
        }

        self._lastHoverLayout = false;
        self:.setHover (true);

        self._manager:.getCursorManager ():.setCursor (SDL_SystemCursor::SDL_SYSTEM_CURSOR_HAND);

        (alias self)?
    }

    pub over onLoseHoverFocus (mut self) {
        if self._lastHoverLayout {
            self._layout:.onLoseHoverFocus ();
        } else {
            self:.setHover (false);
            self._manager:.getCursorManager ():.setCursor (SDL_SystemCursor::SDL_SYSTEM_CURSOR_ARROW);
        }
    }

    pub over onClick (mut self, pos : vec2, button : u8)-> dmut (&Widget)? {
        if self.mouseOnLayout (pos) {
            return self._layout:.onClick (pos, button);
        }

        if button == SDL_BUTTON_LEFT {
            self._slideStart = makeVec2 (pos.x, pos.y) - self._scrollShift;
        }

        (alias self)?
    }

    pub over onDoubleClick (mut self, pos : vec2)-> dmut (&Widget)? {
        if self.mouseOnLayout (pos) {
            return self._layout:.onDoubleClick (pos);
        }

        (alias self)?
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          SLIDING EVENTS          =================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over onSliding (mut self, pos : vec2, _speed_ : vec2, _ : u8) {
        let amount = (pos - self._slideStart);

        if self._layout.getFullLength () > 1.f {
            if self._layout.isVertical () {
                self._scrollShift = clamp (amount.x, 0.f, 1.f - self._scrollLen);
                self._layout:.setShift (-(self._scrollShift * self._layout.getFullLength ()));
                self._relScrollBarPos = makeVec2 (self.clampSize (WidgetSize (relative-> self._scrollShift), self._absoluteSize.x),
                                                  1.f - self._relScrollBarSize.y);
            } else {
                self._scrollShift = clamp (amount.y, 0.f, 1.f - self._scrollLen);
                self._layout:.setShift (-(self._scrollShift * self._layout.getFullLength ()));
                self._relScrollBarPos = makeVec2 (1.f - self._relScrollBarSize.x,
                                                  self.clampSize (WidgetSize (relative-> self._scrollShift), self._absoluteSize.y));
            }

            if let Ok (dmut s) = alias self._scrollbarShape {
                s:.setPosition (self._relScrollBarPos * self._absoluteSize + self._absolutePosition);
                s:.setSize (self._relScrollBarSize * self._absoluteSize);
                s:.setLevel (self._innerDepth + 1);
            }
        }    
    }

    pub over onGainFocus (mut self) {
        self._manager:.getCursorManager ():.setCursor (SDL_SystemCursor::SDL_SYSTEM_CURSOR_HAND);
    }

    pub over onLoseFocus (mut self) {
        self._manager:.getCursorManager ():.setCursor (SDL_SystemCursor::SDL_SYSTEM_CURSOR_ARROW);
        self:.onLoseHoverFocus ();
    }

    prot over onApplyStyle (mut self) {
        if let Ok (dmut s) = alias self._scrollbarShape {
            s:.setColor (self.getStyle ().getSubStyle ("scrollbar").getColor (WidgetShapeKind::BACKGROUND));
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          SCROLL EVENTS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over onScroll (mut self, pos : vec2, amountX : i32, amountY : i32)-> bool {
        if self.mouseOnLayout (pos) {
            if self._layout:.onScroll (pos, amountX, amountY) {
                self:.onHover (pos);
                return true;
            }
        }

        if self._layout.getFullLength () > 1.f {
            let amount = -(cast!f32 (amountY) / 100.f) * self._scrollSpeed;
            self._scrollShift = clamp (self._scrollShift + amount, 0.f, 1.f - self._scrollLen);

            self._layout:.setShift (-(self._scrollShift * self._layout.getFullLength ()));
            if self._layout.isVertical () {
                self._relScrollBarPos = makeVec2 (self.clampSize (WidgetSize (relative-> self._scrollShift), self._absoluteSize.x),
                                                  1.f - self._relScrollBarSize.y);
            } else {
                self._relScrollBarPos = makeVec2 (1.f - self._relScrollBarSize.x,
                                                  self.clampSize (WidgetSize (relative-> self._scrollShift), self._absoluteSize.y));
            }

            if let Ok (dmut s) = alias self._scrollbarShape {
                s:.setPosition (self._relScrollBarPos * self._absoluteSize + self._absolutePosition);
                s:.setSize (self._relScrollBarSize * self._absoluteSize);
            }
        }

        self:.onHover (pos);
        true
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            self._attached = false;

            let dmut shDr = self._manager:.getShapeDrawer ();
            if let Ok (dmut s) = alias self._scrollbarShape {
                shDr:.removeShape (s.uid);
                self._scrollbarShape = none;
            }

            self._layout:.dispose ();
            self._super_:.dispose ();
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          PRIVATES          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    fn mouseOnLayout (self, pos : vec2)-> bool {
        if let Ok (_) = self.isInPadding (pos) {

            if self._scrollLen != 1.f {
                if let Ok (_) = self.isInSquare (pos, self._relScrollBarPos, self._relScrollBarPos + self._relScrollBarSize) {
                    return false;
                }
            }
        }

        true
    }

    /**
     * Scrollbar padding is managed by inner layout
     * */
    prot over getPaddingSize (self)-> vec4 {
        vec4 ()
    }

    /**
     * Scrollbar border is managed by inner layout
     * */
    prot over getBorderSize (self)-> vec2 {
        vec2 ()
    }

    /**
     * Scrollbar margin is managed by inner layout
     * */
    prot over getMarginSize (self)-> vec4 {
        vec4 ()
    }

}
