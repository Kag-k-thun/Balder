in grid;

use ::std::algorithm::comparison;

use std::{io, time::_};

use balder::utils::_;
use balder::core::_;
use balder::math::_;
use balder::interface::_;
use balder::interface::widget::_;

pub class GridLayout over Layout {

    // The widget in the grid
    let dmut _childs : [((&Widget)?, vec2, vec2)] = [];

    // The number of columns in the grid
    let _cols : u32;

    // The number of rows in the grid
    let _rows : u32;

    // Relative sizes computed on updateSize
    let mut _relCellSize : vec2 = vec2 ();

    let dmut _lastHover : (&Widget)? = none;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          CTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (dmut manager : &WidgetManager, name : [c8], columns : u32, rows : u32)
        with super (alias manager, name, WidgetKeys::GRID_LAYOUT)
        , _cols = columns
        , _rows = rows
        , _childs = copy [(none, vec2 (), vec2 ()) ; columns * rows]
    {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          ATTACH/DETACH          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over onAttach (mut self) {
        self._attached = true;

        for dmut i in alias self._childs if let Ok (dmut c) = alias i._0 {
            c:.onAttach ();
        }
    }

    pub over onDetach (mut self) {
        self._attached = false;
        for dmut i in alias self._childs if let Ok (dmut c) = alias i._0 {
            c:.onDetach ();
        }

        self:.dispose ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DRAW SIZE          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Compute the drawing size of the inner widgets
     */
    over onUpdateSize (mut self) {
        if self._childs.len == 0 { return; }

        let nbCells = makeVec2 (cast!f32 (self._cols), cast!f32 (self._rows));
        let absCellSize = self._absoluteSize / nbCells;
        self._relCellSize = absCellSize / self._absoluteSize;

        if absCellSize.x <= 0.f || absCellSize.y <= 0.f {
            log::warn #("GridLayout", "Borders and margins are too big to display widgets");
            self:.hide ();

            return;
        }

        let mut currentX = 0.f;
        for i in 0 .. self._cols {
            let mut currentY = 0.f;
            for j in 0 .. self._rows {
                if let Ok (dmut c) = alias self._childs [i * self._rows + j]._0 {
                    let absCellPos = makeVec2 (currentX, currentY) * self._absoluteSize + self._absolutePosition;
                    let (sciPos, sciEnd) = self.getScissors (absCellPos, absCellSize);

                    c:.setSize (absCellPos, absCellSize, self._depth + 1);
                    c:.setScissors (sciPos, sciEnd);

                    self._childs [i * self._rows + j]._1 = (absCellPos - self._absolutePosition) / self._absoluteSize;
                    self._childs [i * self._rows + j]._2 = (absCellSize / self._absoluteSize);
                }

                currentY += self._relCellSize.y;
            }

            currentX += self._relCellSize.x;
        }
    }

    over onUpdateScissors (mut self) {
        for dmut i in alias self._childs if let Ok (dmut c) = alias i._0 {
            let wpos = (i._1 * self._absoluteSize) + self._absolutePosition;
            let wsize = (i._2 * self._absoluteSize);
            let (sciPos, sciEnd) = self.getScissors (wpos, wsize);

            c:.setScissors (sciPos, sciEnd);
        }
    }

    over onHide (mut self) {
        for dmut i in alias self._childs if let Ok (dmut c) = alias i._0 {
            c:.hide ();
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GET/SET          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over getMaxDepth (self)-> u32 {
        let mut max = self._depth;
        for i in self._childs if let Ok (child) = i._0 {
            let chD = child.getMaxDepth ();
            if chD > max { max = chD; }
        }

        max
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          INSERT CHILDS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Insert a child in the layout
     * @warning: child is disposed when layout is disposed
     * */
    pub fn insertChild (mut self, col : u32, row : u32, dmut ch : &Widget) {
        if let Ok (dmut old) = alias self._childs [col * self._rows + row]._0 {
            old:.dispose ();
        }

        self._childs [col * self._rows + row] = ((alias ch)?, vec2 (), vec2 ());
        self._manager:.updateWidgets ();
    }

    /**
     * Remove a child in the layout
     * @warning: the child is disposed
     * */
    pub fn removeChild (mut self, col : u32, row : u32) {
        if let Ok (dmut ch) = alias self._childs [col * self._rows + row]._0 {
            ch:.dispose ();
            self._childs [col * self._rows + row] = (none, vec2 (), vec2 ());
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over find (mut self, names : [[c8]])-> dmut (&Widget)? {
        if names.len == 0 { return none; }

        for dmut w in alias self._childs if let Ok (dmut c) = alias w._0 {
            if c.name == names [0] {
                if names.len == 1 { return (alias c)?; }
                else return c:.find (names [1 .. $]);
            }
        }

        none
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          TICK EVENTS          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Propagate the tick events to childrens
     * */
    pub over onTick (mut self, delta : Duration) {
        for dmut ch in alias self._childs if let Ok (dmut c) = alias ch._0 {
            c:.onTick (delta);
        }
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          MOUSE EVENTS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */


    /**
     * Propagate the signal to the childs
     * @params:
     *   - pos: the relative position of the cursor within the layout
     */
    pub over onHover (mut self, pos : vec2)-> dmut (&Widget)? {
        let mut canBeSelf = true;
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos, ref canBeSelf) {
            if let Ok (dmut w) = alias self._lastHover && c !is w {
                w:.onLoseHoverFocus ();
            }

            self._lastHover = (alias c)?;
            return c:.onHover (v);
        }

        if let Ok (dmut w) = alias self._lastHover {
            w:.onLoseHoverFocus ();
            self._lastHover = none;
        }


        if canBeSelf {
            self:.setHover (true);
            (alias self)?
        } else {
            none
        }
    }

    pub over onLoseHoverFocus (mut self) {
        if let Ok (dmut c) = alias self._lastHover {
            c:.onLoseHoverFocus ();
            self._lastHover = none;
        }

        self:.setHover (false);
    }

    /**
     * Propagate the signal to the childrens
     */
    pub over onClick (mut self, pos : vec2, button : u8)-> dmut (&Widget)? {
        let mut canBeSelf = false;
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos, ref canBeSelf) {
            return c:.onClick (v, button);
        }

        if canBeSelf {
            (alias self)?
        } else {
            none
        }
    }

    /**
     * Propagate the signal to the childrens
     */
    pub over onDoubleClick (mut self, pos : vec2)-> dmut (&Widget)? {
        let mut canBeSelf = true;
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos, ref canBeSelf) {
            return c:.onDoubleClick (v);
        }

        if canBeSelf {
            (alias self)?
        } else {
            none
        }
    }

    /**
     * Propagate the scrolling signal to children
     * */
    pub over onScroll (mut self, pos : vec2, amountX : i32, amountY : i32)-> bool {
        let mut ignore = true;
        let res = if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos, ref ignore) {
            c:.onScroll (v, amountX, amountY)
        } else { false };

        self:.onHover (pos);
        res
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            for i in 0 .. self._childs.len {
                if let Ok (dmut c) = alias self._childs [i]._0 {
                    c:.dispose ();
                    self._childs [i] = (none, vec2 (), vec2 ());
                }
            }

            self._super_:.dispose ();
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          PRIVATES          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns:
     *  - .1 : the widget on which the mouse is positionned
     *  - .2 : the position of the mouse relative to the widget
     */
    fn mouseToWidget (mut self, pos : vec2, ref mut canBeSelf : bool)-> dmut (&Widget, vec2)? {
        canBeSelf = false;

        if let Ok (inPaddingPos) = self.isInPadding (pos) {
            canBeSelf = true;

            if self._childs.len == 0 { return none; }

            let cellX = cast!u32 (inPaddingPos.x * cast!f32 (self._cols));
            let cellY = cast!u32 (inPaddingPos.y * cast!f32 (self._rows));

            if cellY >= self._rows || cellX >= self._cols { return none; }

            let cellPosition = makeVec2 ((self._relCellSize.x) * cast!f32 (cellX),
                                         (self._relCellSize.y) * cast!f32 (cellY));

            let relPos = (inPaddingPos - cellPosition) / self._relCellSize;
            if relPos.x >= 0.f && relPos.x <= 1.f && relPos.y >= 0.f && relPos.y <= 1.f {
                if let Ok (dmut c) = alias self._childs [cellX * self._rows + cellY]._0 {
                    canBeSelf = false;
                    if let Ok (_) = c.isInBorder (relPos) {
                        return (alias c, relPos)?;
                    }
                }
            }
        }

        none
    }
}
