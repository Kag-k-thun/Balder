in grid;

use ::std::algorithm::comparison;

use std::io;

use balder::utils::_;
use balder::core::_;
use balder::math::_;
use balder::interface::_;
use balder::interface::widget::_;


pub class GridLayout over Layout {

    // The widget in the grid
    let dmut _childs : [(&Widget)?] = [];

    // The border size
    let _border : WidgetSize;

    // The margin between the columns
    let _margin : WidgetSize;

    // The number of columns in the grid
    let _cols : u32;

    // The number of rows in the grid
    let _rows : u32;

    // Relative sizes computed on updateSize
    let mut _relMarginSize : vec2 = vec2 ();
    let mut _relBorderSize : vec2 = vec2 ();
    let mut _relCellSize : vec2 = vec2 ();

    let dmut _lastHover : (&Widget)? = none;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          CTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (dmut manager : &WidgetManager, name : [c8], columns : u32, rows : u32, margin : WidgetSize = WidgetSize (), border : WidgetSize = WidgetSize ())
        with super (alias manager, name)
        , _margin = margin
        , _border = border
        , _cols = columns
        , _rows = rows
        , _childs = copy [none ; columns * rows]
    {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DRAW SIZE          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Compute the drawing size of the inner widgets
     */
    pub over onUpdateSize (mut self, pos : vec2, size : vec2, depth : u32) {
        self._absoluteSize = size;
        self._absolutePosition = pos;
        self._depth = depth;

        if self._childs.len == 0 { return; }
        self._relMarginSize = makeVec2 (self.clampSize (self._margin, size.x),
                                        self.clampSize (self._margin, size.y));

        self._relBorderSize = makeVec2 (self.clampSize (self._border, size.x),
                                        self.clampSize (self._border, size.y));


        let nbCells = makeVec2 (cast!f32 (self._cols), cast!f32 (self._rows));
        let absCellSize = (size - ((self._relBorderSize * 2.f + self._relMarginSize * (nbCells - 1.f)) * size)) / nbCells;
        self._relCellSize = absCellSize / size;

        if absCellSize.x <= 0.f || absCellSize.y <= 0.f {
            log::warn #("GridLayout", "Borders and margins are too big to display widgets");
            self:.hide ();

            return;
        }

        let mut currentX = self._relBorderSize.x;
        for i in 0 .. self._cols {
            let mut currentY = self._relBorderSize.y;
            for j in 0 .. self._rows {
                if let Ok (dmut c) = alias self._childs [i * self._rows + j] {
                    let absCellPos = makeVec2 (currentX, currentY) * size + pos;
                    c:.onUpdateSize (absCellPos, absCellSize, depth + 1);
                }

                currentY += self._relCellSize.y + self._relMarginSize.y;
            }

            currentX += self._relCellSize.x + self._relMarginSize.x;
        }
    }

    pub over hide (mut self) {
        for dmut i in alias self._childs if let Ok (dmut c) = alias i {
            c:.hide ();
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GET/SET          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over getMaxDepth (self)-> u32 {
        let mut max = self._depth;
        for i in self._childs if let Ok (child) = i {
            let chD = child.getMaxDepth ();
            if chD > max { max = chD; }
        }

        max
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          INSERT CHILDS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Insert a child in the layout
     * @warning: child is disposed when layout is disposed
     * */
    pub fn insertChild (mut self, col : u32, row : u32, dmut ch : &Widget) {
        if let Ok (dmut old) = alias self._childs [col * self._rows + row] {
            old:.dispose ();
        }

        self._childs [col * self._rows + row] = (alias ch)?;
        self._manager:.updateWidgets ();
    }

    /**
     * Remove a child in the layout
     * @warning: the child is disposed
     * */
    pub fn removeChild (mut self, col : u32, row : u32) {
        if let Ok (dmut ch) = alias self._childs [col * self._rows + row] {
            ch:.dispose ();
            self._childs [col * self._rows + row] = none;
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          MOUSE EVENTS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */


    /**
     * Propagate the signal to the childs
     * @params:
     *   - pos: the relative position of the cursor within the layout
     */
    pub over onHover (mut self, pos : vec2) {
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos) {
            if let Ok (dmut w) = alias self._lastHover && c !is w {
                w:.onLoseHoverFocus ();
            }

            self._lastHover = (alias c)?;
            c:.onHover (v);
        }
    }

    pub over onLoseHoverFocus (mut self) {
        if let Ok (dmut c) = alias self._lastHover {
            c:.onLoseHoverFocus ();
            self._lastHover = none;
        }
    }

    /**
     * Propagate the signal to the childrens
     */
    pub over onClickLeft (mut self, pos : vec2) {
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos) {
            c:.onClickLeft (v);
        }
    }

    /**
     * Propagate the signal to the childrens
     */
    pub over onDoubleClick (mut self, pos : vec2) {
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos) {
            c:.onDoubleClick (v);
        }
    }

    /**
     * Propagate the signal to the childrens
     */
    pub over onClickRight (mut self, pos : vec2) {
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos) {
            c:.onClickRight (v);
        }
    }

    /**
     * Propagate the signal to the childrens
     */
    pub over onClickMiddle (mut self, pos : vec2) {
        if let Ok ((dmut c, v)) = alias self:.mouseToWidget (pos) {
            c:.onClickMiddle (v);
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            for i in 0 .. self._childs.len {
                if let Ok (dmut c) = alias self._childs [i] {
                    c:.dispose ();
                    self._childs [i] = none;
                }
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          PRIVATES          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns:
     *  - .1 : the widget on which the mouse is positionned
     *  - .2 : the position of the mouse relative to the widget
     */
    fn mouseToWidget (mut self, pos : vec2)-> dmut (&Widget, vec2)? {
        if self._childs.len == 0 { return none; }

        if pos.y <= self._relBorderSize.y || pos.y >= (1.f - self._relBorderSize.y) {
            return none;
        }

        if pos.x <= self._relBorderSize.x || pos.x >= (1.f - self._relBorderSize.x) {
            return none;
        }

        let x = (pos.x - self._relBorderSize.x) / (1.0f - (self._relBorderSize.x * 2.f));
        let y = (pos.y - self._relBorderSize.y) / (1.0f - (self._relBorderSize.y * 2.f));

        let cellX = cast!u32 (x * cast!f32 (self._cols));
        let cellY = cast!u32 (y * cast!f32 (self._rows));

        if cellY >= self._rows || cellX >= self._cols { return none; }

        let cellPosition = self._relBorderSize + makeVec2 ((self._relCellSize.x + self._relMarginSize.x) * cast!f32 (cellX),
                                                           (self._relCellSize.y + self._relMarginSize.y) * cast!f32 (cellY));

        let relPos = (pos - cellPosition) / self._relCellSize;
        if relPos.x >= 0.f && relPos.x <= 1.f && relPos.y >= 0.f && relPos.y <= 1.f {
            if let Ok (dmut c) = alias self._childs [cellX * self._rows + cellY] {
                return (alias c, relPos)?;
            }
        }

        return none;
    }
}
