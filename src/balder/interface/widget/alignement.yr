in alignement;

use balder::core::error;
use std::{config, config::_, conv};

/**
 * Alignement along the X axis
 */
pub enum
| LEFT   = 0u8
| RIGHT  = 1u8
| CENTER = 2u8
| NONE   = 3u8
 -> XAlign;

/**
 * Alignement along the Y axis
 */
pub enum
| TOP    = 0u8
| BOTTOM = 1u8
| CENTER = 2u8
 -> YAlign;

/**
 * A size if composed of three elements
 */
pub record WidgetSize {
     // the relative size of the widget (between 0 and 1)
    pub let mut relative : f32 = 0.f;

     // The minimum size in pixels
    pub let mut minPix : u32 = 0u32;

     // The maximum size in pixels
    pub let mut maxPix : u32 = u32::max;

    pub self (relative : f32 = 0.f,
              minPix : u32 = 0,
              maxPix : u32 = cast!u32 (i32::max - 1))
        with relative = relative
        , minPix = minPix
        , maxPix = maxPix
    {}

    pub self (pix : u32)
        with relative = 1.f
        , minPix = pix
        , maxPix = pix
    {}

    pub self (cfg : &Config)
        with relative = 1.f
        , minPix = 0
        , maxPix = u32::max

        throws BalderError
    {
        if let Int (value-> s) = cfg {
            self.minPix = cast!u32 (s);
            self.maxPix = cast!u32 (s);
        }

        else {
            if let Ok (pix) = cfg ["min"]? {
                self.minPix = pix.to!{u32} ();
            }

            if let Ok (pix) = cfg ["max"]? {
                self.maxPix = pix.to!{u32} ();
            }

            if let Ok (pix) = cfg ["relative"]? {
                self.relative = pix.to!{f32} ();
            }
        } catch {
            _ => throw copy BalderError ("Failed to load size : " ~ std::conv::to!{[c8]} (cfg));
        }
    }

    pub fn opEquals (self, other : WidgetSize)-> bool {
        if self.relative != other.relative { return false; }
        if self.minPix != other.minPix { return false; }
        if self.maxPix != other.maxPix { return false; }

        true
    }

    pub fn opBinary {"+"} (self, other : WidgetSize)-> WidgetSize {
        WidgetSize (relative-> self.relative + other.relative,
                    minPix-> self.minPix + other.minPix,
                    maxPix-> self.maxPix + other.maxPix)
    }

}
