in box;


use balder::core::application::_;
use balder::core::_;
use balder::math::_;

use balder::interface::_;
use balder::utils::_;


pub class Box over Widget {

    // The color of the box
    let mut _color : vec4;

    // The shape of the box to draw on screen
    let dmut _shape : (&Shape)? = none;


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          CTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (dmut manager : &WidgetManager,
              name : [c8],
              color : vec4 = ColorPalette.get (DefaultColorPalettes::PURPLE, 0.f),
              radius : f32 = 0.0f)

        with super (alias manager, name)
        , _color = color
    {
        let dmut shDr = manager:.getApplication ():.getShapeDrawer ();
        {
            let dmut shape = shDr:.registerQuad (vec2 (), self._color, vec2 ());
            shape:.setRadius (radius);
            self._shape = (alias shape)?;
        } catch {
            err => {
                log::error #("Box", "Failed to add a shape : ", err);
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DRAW SIZES          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    prot over onUpdateSizes (mut self, pos : vec2, viewport : vec2, depth : u32) {
        if let Ok (dmut sh) = alias self._shape {
            sh:.setPosition (pos);
            sh:.setSize (viewport);
            sh:.setLevel (depth);
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          MOUSE EVENT          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over onHover (mut self, _ : vec2) {
        if let Ok (dmut sh) = alias self._shape {
            sh:.setColor (makeVec4 (1.f, 1.f, 1.f, 1.f));
        }
    }

    pub over onHoverEnd (mut self) {
        if let Ok (dmut sh) = alias self._shape {
            sh:.setColor (self._color);
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            if let Ok (dmut sh) = alias self._shape {
                sh:.dispose ();
                self._shape = none;
            }
        }
    }

}
