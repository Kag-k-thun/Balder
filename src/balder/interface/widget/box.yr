in box;


use balder::core::application::_;
use balder::core::_;
use balder::math::_;

use balder::interface::_;
use balder::utils::_;


pub class Box over Widget {

    // The color of the box
    let mut _color : vec4;

    pub self (dmut manager : &WidgetManager, name : [c8], color : vec4 = makeVec4 (1.f, 1.f, 1.f, 1.f), radius : f32 = 0.01f)
        with super (alias manager, name)
        , _color = color
    {
        let dmut shDr = manager:.getApplication ():.getShapeDrawer ();
        {
            let dmut shape = shDr:.registerQuad (vec2 (), self._color, vec2 ());
            shape:.setRadius (radius);
            self._shape = (alias shape)?;
        } catch {
            err => {
                log::error ("Failed to add a shape : ", err);
            }
        }
    }

    pub over onHover (mut self, _ : vec2) {
        if let Ok (dmut sh) = alias self._shape {
            sh:.setColor (makeVec4 (1.f, 1.f, 1.f, 1.f));
        }
    }

    pub over onHoverEnd (mut self) {
        if let Ok (dmut sh) = alias self._shape {
            sh:.setColor (self._color);
        }
    }

}
