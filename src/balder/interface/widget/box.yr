in box;


use balder::core::application::_;
use balder::core::_;
use balder::math::_;

use balder::interface::_;
use balder::utils::_;


pub class Box over Widget {

    // The color of the box
    let mut _color : vec4;

    // The shape of the box to draw on screen
    let dmut _shape : (&Shape)? = none;


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          CTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (dmut manager : &WidgetManager,
              name : [c8],
              color : vec4 = ColorPalette.get (DefaultColorPalettes::PURPLE, 0.f),
              radius : f32 = 0.0f)

        with super (alias manager, name)
        , _color = color
    {
        let dmut shDr = manager:.getApplication ():.getShapeDrawer ();
        {
            let dmut shape = shDr:.registerQuad (vec2 (), self._color, vec2 ());
            shape:.setRadius (radius);
            self._shape = (alias shape)?;
        } catch {
            err => {
                log::error #("Box", "Failed to add a shape : ", err);
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DRAW SIZES          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over onUpdateSize (mut self, pos : vec2, size : vec2, depth : u32) {
        self._absoluteSize = size;
        self._absolutePosition = pos;
        self._depth = depth;

        if let Ok (dmut sh) = alias self._shape {
            sh:.setPosition (pos);
            sh:.setSize (size);
            sh:.setLevel (depth);
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          MOUSE EVENT          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over onHover (mut self, _ : vec2) {
        if let Ok (dmut sh) = alias self._shape {
            sh:.setColor (makeVec4 (1.f, 1.f, 1.f, 1.f));
        }
    }

    pub over onLoseHoverFocus (mut self) {
        if let Ok (dmut sh) = alias self._shape {
            sh:.setColor (self._color);
        }
    }

    pub over onClickLeft (mut self, _ : vec2) {
        std::io::println ("Left clicked : ", self);
        self._manager:.setLeftClickFocus ((alias self)?);
    }

    pub over onClickLeftEnd (mut self) {
        std::io::println ("Left clicked end : ", self);
    }

    pub over onDoubleClick (mut self, _ : vec2) {
        std::io::println ("Left double clicked : ", self);
    }


    /*!
     * ====================================================================================================g
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            if let Ok (dmut sh) = alias self._shape {
                let dmut shDr = self._manager:.getApplication ():.getShapeDrawer ();
                self._shape = none;

                shDr:.removeColorShape (sh.uid);
            }
        }
    }

}
