in box;


use balder::core::application::_;
use balder::core::_;
use balder::math::_;

use balder::interface::_;
use balder::utils::_;

pub def __BOX_DEFAULT_STYLE__ = "default.box";
pub def __BOX_HOVER_STYLE__   = "default.box.hover.box-hover"

pub class Box over Widget {

    prot { // Styles
        let _defaultStyle : [c8];
        let _hoverStyle : [c8];
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          CTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (dmut manager : &WidgetManager, name : [c8],
              defaultStyle : [c8] = __BOX_DEFAULT_STYLE__,
              hoverStyle : [c8] = __BOX_HOVER_STYLE__)

        with super (alias manager, name, style-> defaultStyle)
        , _defaultStyle = defaultStyle
        , _hoverStyle = hoverStyle
    {
        self:.registerShape (WidgetShapeKind::BACKGROUND);
        self:.registerShape (WidgetShapeKind::BORDER);
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          MOUSE EVENT          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over onHover (mut self, _ : vec2)-> dmut &Widget {
        self:.loadStyle (self._hoverStyle);
        alias self
    }

    pub over onLoseHoverFocus (mut self) {
        self:.loadStyle (self._defaultStyle);
    }

    pub over onClickLeft (mut self, _ : vec2)-> dmut &Widget {
        alias self
    }

    pub over onDoubleClick (mut self, _ : vec2)-> dmut &Widget {
        alias self
    }

    /*!
     * ====================================================================================================g
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            self:.disposeShapes ();
        }
    }

}
