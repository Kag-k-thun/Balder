in label;

use balder::core::{shader::_, application::_};
use balder::core::_;
use balder::math::_;

use balder::interface::_;
use balder::utils::_;

use std::io;

pub class Label over Widget {

    let mut _text : [c8];
    let mut _color : vec4;
    let mut _fontSize : u32;
    let mut _fontPath : [c8];

    // The texture of the shape
    let dmut _texture : (&Texture)? = none;

    // The size of the font in pt (applicable only if != -1.f)
    let mut _forcedSize : f32;

    // The alignement of the text along the x axis
    let mut _xalign : XAlign;

    // The alignement of the text along the y axis
    let mut _yalign : YAlign;

    pub self (dmut manager : &WidgetManager, name : [c8],
              fontPath : [c8],
              fontSize : u32,
              color : vec4 = makeVec4 (1.f, 1.f, 1.f, 1.f),
              forcedSize : f32 = -1.f,
              xalign : XAlign = XAlign::CENTER,
              yalign : YAlign = YAlign::CENTER)
        with super (alias manager, name)
        , _color = color
        , _text = ""
        , _fontPath = fontPath
        , _fontSize = fontSize
        , _xalign = xalign
        , _yalign = yalign
        , _forcedSize = forcedSize
    {
        let dmut shDr = manager:.getApplication ():.getShapeDrawer ();

        {
            let dmut shape = shDr:.registerTextureQuad (vec2 (), self._color, vec2 (), texture-> self._texture);
            self._shape = (alias shape)?;
        } catch {
            err => {
                log::error ("Failed to add a shape : ", err);
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DRAW SIZES          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    prot over onUpdateSizes (mut self, pos : vec2, viewport : vec2, _depth_ : i32) {
        if let Ok (d : &Texture2D) = self._texture {
            let texS = makeVec2 (d.width, d.height);
            // let ratioW = cast!f32 (texS.x) / cast!f32 (texS.y);

            let ratio = if self._forcedSize != -1.f {
                self._forcedSize / cast!f32 (self._fontSize)
            } else { 1.f };

            let relSize = makeVec2 (cast!f32 (texS.x), cast!f32 (texS.y)) * ratio / viewport;

            let x = if relSize.x > 1.f {
                0.97f - relSize.x
            } else if self._xalign == XAlign::LEFT {
                0.f
            } else if self._xalign == XAlign::RIGHT {
                1.f - relSize.x
            } else { 0.5f - (relSize.x / 2.f) };

            let y = if self._yalign == YAlign::TOP {
                0.f
            } else if self._yalign == YAlign::BOTTOM {
                1.f - relSize.y
            } else {0.5f - (relSize.y / 2.f) };

            self._absolutePosition = pos + makeVec2 (x, y) * viewport;
            self._absoluteSize = relSize * viewport;

            println (self._absoluteSize, " ", self._absolutePosition);
        }
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Set the text of the label
     * */
    pub fn setText (mut self, text : [c8])
        throws BalderError
    {
        let dmut old = alias self._texture;
        self._texture = alias self._manager:.getFontManager ():.render (text, self._fontPath, self._fontSize);

        if let Ok (dmut sh) = alias self._shape {
            sh:.setTexture (self._texture)?;
        }

        if let Ok (dmut t) = alias old {
            t:.dispose ();
        }

        self._manager:.updateWidgets ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            if let Ok (dmut sh) = alias self._shape {
                sh:.dispose ();
                self._shape = none;
            }

            if let Ok (dmut t) = alias self._texture {
                t:.dispose ();
                self._texture = none;
            }
        }
    }

}
