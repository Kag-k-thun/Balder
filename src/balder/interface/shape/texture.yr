in texture;

use balder::math::_;
use balder::core::{_,
                   shader::_,
                   shader::buffers::_,
                   application::_,
                   driver::_,
                   config::_};

use balder::utils::_;
use balder::interface::drawer;

/**
 * A 2D textured shape
 * */
@final
pub class TextureShape over Shape {

    let mut _texture : (&Texture)? = none;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          CTOR/DTOR          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (uid : usize,
              dmut drawer : &ShapeDrawer,
              dmut shader : &Shader,
              vbo : &VertexBufferObject,
              ibo : &IndexBufferObject)

        with super (uid,
                    alias drawer,
                    vbo,
                    ibo,
                    ubo-> copy UniformBufferObject (alias shader:.getDevice (), 80),
                    descSet-> shader:.allocateDescriptorSet ())

        throws BalderError
    {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Change the texture of the shape
     * */
    pub fn setTexture (mut self, tex : (&Texture)?) {
        self._texture = tex;
        self._outOfBound = (!self._texture.hasValue);

        self._needRedraw = true;
        self._changed = true;
    }

    /**
     * @returns: true if the shape has a defined texture
     * */
    pub fn hasTexture (self)-> bool {
        self._texture.hasValue
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          USAGE          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over register (mut self, dmut cmd : &IndirectCommandAllocator) {
        cmd:.registerIndexedObject (self._ibo.getNbPoints ());
        if let Ok (tex) = self._texture {
            self._descSet:.setTexture (TextureKind::ALBEDO, tex)?;
        }
    }

}
