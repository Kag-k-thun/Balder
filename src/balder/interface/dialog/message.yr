in message;

use balder::{math::_, scene::node::_, core::_, interface};
use balder::core::application::_;
use balder::interface::widget::text::label;

use balder::utils::log;

use ::sdl2::_;


class MessageActivity over Activity {

    let mut _message : [c8] = "";
    let dmut _dialog : (&MessageDialog)? = none;

    pub self (uid : usize, dmut app : &Application, dmut window : &Window)
        with super (uid, alias app, alias window)
    {}

    pub fn setContext (mut self, message : [c8], dmut d : &MessageDialog) {
        self._dialog = (alias d)?;
        self._message = message;
    }

    over onStart (mut self) {
        self:.input:.quit ():.connect (self:.box, &self:.onQuit);
        self:.gui:.loadStyleFile ("res:/dialog/default.style")?;
        self:.gui:.loadGUIFile ("res:/dialog/message.gui")?;

        if let Ok (dmut yes) = alias self:.gui:.find ("YES") {
            yes:.clicked ():.connect (self:.box, &self:.onYesClicked);
        }

        if let Ok (dmut no) = alias self:.gui:.find ("NO") {
            no:.clicked ():.connect (self:.box, &self:.onNoClicked);
        }

        if let Ok (dmut question : &Label) = self:.gui:.find ("QUESTION") {
            question:.setText (self._message);
        }
    }

    fn onYesClicked (mut self, b : u8) {
        if b == SDL_BUTTON_LEFT {
            if let Ok (dmut d) = alias self._dialog {
                d:.answer (true);
            }
            self:.app:.close (alias self);
        }
    }

    fn onNoClicked (mut self, b : u8) {
        if b == SDL_BUTTON_LEFT {
            if let Ok (dmut d) = alias self._dialog {
                d:.answer (false);
            }
            self:.app:.close (alias self);
        }
    }

    fn onQuit (mut self) {
        if let Ok (dmut d) = alias self._dialog {
            d:.answer (false);
        }
        self:.app:.close (alias self);
    }

}


pub class MessageDialog over DialogWindow {

    let _message : [c8];
    let mut _yes : bool = false;

    pub self (dmut app : &Application, message : [c8])
        with super (alias app)
        , _message = message
    {}

    pub over execute (mut self) {
        {
            let cfg = copy BalderConfig ("res:/dialog/message.toml");

            let dmut act = self._app:.open!{&MessageActivity} (cfg);
            act:.setContext (self._message, alias self);

            self._sem:.wait ();
        } catch {
            err => {
                log::error #("MessageDialog", "Failed to open activity", err);
            }
        }
    }

    pub fn isYes (self)-> bool {
        self._yes
    }

    pub fn answer (mut self, b : bool) {
        self._yes = b;
        self._sem:.post ();
    }

}
