in implem;

use ::sdl2::{ttf, surface, pixels};
use std::{conv, io, fs::path};

use balder::core::{_, driver::_, shader::_};
use balder::math::_;

/**
 * Holder of a font, that can create textures containing text
 * */
@final
pub class Font {

    // The sdl handle to the font
    let dmut _font : *TTF_Font = null;

    // The path to the font
    let mut _path : Path;

    // The size of the font (before upscaling)
    let mut _size : u32 = 1;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          CTOR/DTOR          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self open (path : Path, size : u32)
        with _size = size
        , _path = path
        throws BalderError
    {
        self._font = TTF_OpenFont (path.toStr ().toStringZ (), cast!i32 (size));
        if self._font == null {
            throw copy BalderError ("Failed to open font : " ~ path.toStr ());
        }
    }

    __dtor (mut self) {
        self:.dispose ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the path of the font
     * */
    @field
    pub fn path (self)-> Path {
        self._path
    }

    /**
     * @returns: the size of the rendering in pixels
     * */
    pub fn getRenderSize (self, text : [c8])-> uvec2 {
        if self._font == null { return uvec2 (); }
        let mut w : i32 = 0, mut h : i32 = 0;
        TTF_SizeUTF8 (self._font, text.toStringZ (), alias &w, alias &h);
        makeVec2 (cast!u32 (w), cast!u32 (h))
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          RENDERING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create a texture using the font
     * */
    pub fn render (self, dmut device : &VulkanDevice, text : [c8])-> dmut (&Texture2D)?
        throws BalderError
    {
        if text.len == 0 { return none; }

        let dmut surf = TTF_RenderUTF8_Blended (self._font, text.toStringZ (), SDL_Color (r-> 255, g-> 255, b-> 255, a-> 255));
        if surf == null {
            throw copy BalderError ("Failed to render text");
        }

        let dmut tex = {
            SDL_LockSurface (alias surf);
            copy Texture2D::fromSDL (alias device, alias surf)
        } exit {
            SDL_UnlockSurface (alias surf);
            SDL_FreeSurface (alias surf);
        };

        return (alias tex)?;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */


    impl Disposable {
        pub over dispose (mut self) {
            if self._font != null {
                TTF_CloseFont (alias self._font);
                self._font = null;
                self._size = 0;
            }
        }
    }

}
