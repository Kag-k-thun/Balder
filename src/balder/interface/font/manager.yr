in manager;

use balder::interface::font::_;
use balder::core::{_, driver::_, shader::_};
use balder::math::_;

/**
 * Font manager to load/free fonts
 * */
@final
pub class FontManager {

    // The device used by the font manager to render textures
    let dmut _device : &VulkanDevice;

    // The maximum number of fonts that can be loaded at the same time
    let dmut _maxFonts : u32 = 10;

    // The list of loaded fonts
    let dmut _fonts : [([c8], u32) => (&Font, u32)] = copy [];

    /**
     * Create an empty manager that load and free fonts dynamically
     * */
    pub self (dmut device : &VulkanDevice, maxFonts : u32 = 10)
        with _device = alias device
        , _maxFonts = maxFonts
    {}

    __dtor (mut self) {
        self:.dispose ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the size of the rendering in pixels using a given font
     * */
    pub fn getRenderSize (mut self, text : [c8], fontPath : [c8], fontSize : u32)-> uvec2
        throws BalderError
    {
        if let Ok (f) = self:.loadFont (fontPath, fontSize)? {
            return f.getRenderSize (text);
        }

        throw copy BalderError ("Failed to load font " ~ fontPath);
    }

    /**
     * Render a text to a texture
     * @returns: the texture generated with the text (none if text is empty)
     * */
    pub fn render (mut self, text : [c8], fontPath : [c8], fontSize : u32)-> dmut (&Texture2D)?
        throws BalderError
    {
        if let Ok (f) = self:.loadFont (fontPath, fontSize)? {
            return f.render (alias self._device, text);
        }

        throw copy BalderError ("Failed to load font " ~ fontPath);
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          LOADING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Load (or reuse) a font in the list of loaded font
     * @params:
     *    - path: the path to the ttf file
     *    - size: the size of the font to load
     * @returns: the loaded font
     * */
    fn loadFont (mut self, path : [c8], size : u32)-> dmut &Font
        throws BalderError
    {
        if let Ok ((dmut f, u)) = alias self._fonts [(path, size)] {
            self._fonts [(path, size)] = (alias f, u + 1);
            return alias f;
        }

        if self._fonts.len == self._maxFonts {
            let mut min = u32::max, mut u : ([c8], u32) = ("", 0);
            for name, p in self._fonts {
                if p._1 < min {
                    min = p._1;
                    u = name;
                }
            }

            if let Ok ((dmut f, _)) = alias self._fonts [u] {
                f:.dispose ();
                self._fonts:.remove (u);
            }
        }

        let dmut font = copy Font::open (balder::utils::path::projectPath (path), size);
        self._fonts [(path, size)] = (alias font, 0);

        return alias font;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            for _, dmut f in alias self._fonts {
                f._0:.dispose ();
            }

            self._fonts = copy [];
        }
    }

}
