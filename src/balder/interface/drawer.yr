in drawer;

use balder::core::_;

use balder::core::{_,
                   shader::_,
                   shader::buffers::_,
                   application::_,
                   driver::_,
                   config::_};

use balder::{utils::_, math::_};
use balder::interface::shape::_;

use std::io;

/**
 * Shape drawer that draws 2D elements on the window
 * */
@final
pub class ShapeDrawer {

    let dmut _window : &Window;

    let dmut _colorShader : &RefCount!{&RasterShader};
    let dmut _textureShader : &RefCount!{&RasterShader};

    let dmut _quadColorVBO = copy VertexBufferObject ();
    let dmut _quadTextureVBO = copy VertexBufferObject ();
    let dmut _quadIBO = copy IndexBufferObject!{u16} ();

    let dmut _colorShapes : [usize => &ColorShape] = copy [];
    let dmut _textureShapes : [usize => &TextureShape] = copy [];

    let mut _colorToDraw : [usize => dmut &ColorShape] = copy [];
    let mut _textToDraw : [usize => dmut &TextureShape] = copy [];

    let dmut _uid = 1us;

    let mut _interactiveUpdate : bool = false;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          CTOR/DTOR          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (dmut win : &Window)
        with _window = alias win
        , _colorShader = win:.emptyResource!{&RasterShader} ()
        , _textureShader = win:.emptyResource!{&RasterShader} ()
    {}

    __dtor (mut self) {
        self:.dispose ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          CONFIGURATION          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Configure the widget drawer on the given window
     * */
    pub fn configure (mut self)
        throws BalderError
    {
        self._colorShader = self._window:.loadResource!{&RasterShader} (DefaultShaders::COLOR_2D);
        self._textureShader = self._window:.loadResource!{&RasterShader} (DefaultShaders::TEXTURE_2D);

        self._quadIBO:.update (alias self._window:.getVulkanDevice (), copy [1u32, 0u32, 2u32,
                                                                                        2u32, 0u32, 3u32]);

        self._quadColorVBO:.update (alias self._window:.getVulkanDevice (),
                                    4us,
                                    copy [-1.f, -1.f,
                                          -1.f, 1.f,
                                          1.f, 1.f,
                                          1.f, -1.f]);

        self._quadTextureVBO:.update (alias self._window:.getVulkanDevice (),
                                      4us,
                                      copy [-1.f, -1.f, 0.0f, 0.0f,
                                            -1.f, 1.f, 0.0f, 1.0f,
                                            1.f, 1.f, 1.0f, 1.0f,
                                            1.f, -1.f, 1.0f, 0.0f]);

        self._window:.setComposePass (&self:.loadPhase, &self:.drawPhase, &self:.cleanPhase);
    } catch {
        err => {
            log::error #("Drawer", "Failed to create widget drawer", err);
            throw err;
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the window on which the drawing is done
     * */
    pub fn getWindow (mut self)-> dmut &Window {
        alias self._window
    }

    /**
     * @returns: true iif the shapes have updated in the last UI frame
     * */
    pub fn hasUpdated (self)-> bool {
        self._interactiveUpdate
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          ADDING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Register a color quad in the window to draw
     * */
    pub fn registerQuad (mut self, position : vec2, color : vec4, size : vec2, rotation : f32 = 0.f, radius : u32 = 0)-> dmut &ColorShape
        throws BalderError
    {
        atomic self {
            let dmut s = (alias self._colorShader:.get ())?;
            if let Ok (dmut sh) = alias s {
                let dmut result = copy ColorShape (self._uid,
                                                   alias self,
                                                   alias sh,
                                                   self._quadColorVBO,
                                                   self._quadIBO);
                self._uid += 1;

                let dim = self._window.getDimension ();
                result:.setWindowDimension (makeVec2 (cast!f32 (dim._0), cast!f32 (dim._1)));
                result:.setPosition (position);
                result:.setSize (size);
                result:.setRotation (rotation);
                result:.setColor (color);
                result:.setRadius (radius);
                result:.setLevel (1);

                self._colorShapes [result.uid] = alias result;
                self:.redraw ();
                return alias result;
            }
        }

        throw copy BalderError ("Invalid shape drawer");
    }

    /**
     * Register a textured quad in the window to draw
     * */
    pub fn registerTextureQuad (mut self, position : vec2, color : vec4, size : vec2, texture : (&Texture)?, rotation : f32 = 0.f)-> dmut &TextureShape
        throws BalderError
    {
        atomic self {
            let dmut s = (alias self._textureShader:.get ())?;
            if let Ok (dmut sh) = alias s {
                let dmut result = copy TextureShape (self._uid,
                                                     alias self,
                                                     alias sh,
                                                     self._quadTextureVBO,
                                                     self._quadIBO);

                self._uid += 1;

                let dim = self._window.getDimension ();
                result:.setWindowDimension (makeVec2 (cast!f32 (dim._0), cast!f32 (dim._1)));
                result:.setPosition (position);
                result:.setSize (size);
                result:.setRotation (rotation);
                result:.setColor (color);

                result:.setLevel (1);
                result:.setTexture (texture);

                self._textureShapes [result.uid] = alias result;
                self:.redraw ();
                return alias result;
            }
        }

        throw copy BalderError ("Invalid shape drawer");
    }

    /**
     * Remove a texture shape from the drawer
     * */
    pub fn removeTextureShape (mut self, uid : usize) {
        if let Ok (dmut sh) = alias self._textureShapes [uid] {
            sh:.dispose ();
            self._textureShapes:.remove (uid);

            self:.redraw ();
        }
    }

    /**
     * Remove a color shape from the drawer
     * */
    pub fn removeColorShape (mut self, uid : usize) {
        if let Ok (dmut sh) = alias self._colorShapes [uid] {
            sh:.dispose ();
            self._colorShapes:.remove (uid);

            self:.redraw ();
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          DRAWING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Force a redrawing due to an update in shapes
     * */
    pub fn redraw (mut self) {
        self._window:.redraw ();
        self:.interactiveUpdate ();
    }

    /**
     * Load phase of the widget drawing
     * */
    fn loadPhase (mut self, dmut cmd : &IndirectCommandAllocator) {
        atomic self {
            let mut i = 0;
            for u, dmut c in alias self._colorShapes {
                if !c.isHidden () {
                    c:.register (alias cmd);
                    self._colorToDraw [u] = alias c;
                    i += 1;
                }
            }

            for u, dmut c in alias self._textureShapes {
                if !c.isHidden () {
                    c:.register (alias cmd);
                    self._textToDraw [u] = alias c;
                    i += 1;
                }
            }
        }
    }

    /**
     * Draw phase of the widget drawing
     * */
    fn drawPhase (mut self, dmut cmd : &IndirectCommandAllocator) {
        atomic self {
            let dmut s = (alias self._colorShader:.get ())?;
            if let Ok (dmut sh) = alias s {
                sh.select ();
                for _, c in self._colorToDraw {
                    c.draw (alias sh, alias cmd);
                }
            }

            let dmut s2 = (alias self._textureShader:.get ())?;
            if let Ok (dmut sh) = alias s2 {
                sh.select ();
                for _, c in self._textToDraw {
                    c.draw (alias sh, alias cmd);
                }
            }
        }
    }

    /**
     * Cleaning phase, that update the ubo descriptos if needed
     * */
    fn cleanPhase (mut self) {
        atomic self {
            for _, dmut c in alias self._colorToDraw {
                c:.clean ();
            }

            for _, dmut c in alias self._textToDraw {
                c:.clean ();
            }

            self._colorToDraw = copy [];
            self._textToDraw = copy [];
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          TRIGGERS          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Triggered when the window change size
     * */
    pub fn onWindowResize (mut self, x : u32, y : u32) {
        atomic self {
            for _, dmut c in alias self._colorShapes {
                c:.setWindowDimension (makeVec2 (cast!f32 (x), cast!f32 (y)));
            }

            for _, dmut c in alias self._textureShapes {
                c:.setWindowDimension (makeVec2 (cast!f32 (x), cast!f32 (y)));
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Set to true will trigger interactive update on the window if configured in interactive mode
     * */
    pub fn interactiveUpdate (mut self, set : bool = true) {
        self._interactiveUpdate = set;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLEARING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Clear all loaded widgets
     * */
    pub fn clear (mut self) {
        atomic self {
            for _, dmut c in alias self._colorShapes {
                c:.dispose ();
            }

            for _, dmut c in alias self._textureShapes {
                c:.dispose ();
            }

            self._colorShapes = copy [];
            self._textureShapes = copy [];
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            self:.clear ();

            atomic self {
                self._colorShader:.dispose ();
                self._textureShader:.dispose ();

                self._window:.insertBin (alias self._quadColorVBO);
                self._window:.insertBin (alias self._quadTextureVBO);
                self._window:.insertBin (alias self._quadIBO);
            }
        }
    }

}
