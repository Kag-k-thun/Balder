in shape;

use balder::math::_;
use balder::core::{_,
                   shader::_,
                   shader::buffers::_,
                   application::_,
                   driver::_,
                   config::_};

use balder::utils::_;
use balder::interface::drawer;

pub mod ::color;
pub mod ::texture;


extern (C) fn printf (c : *c8, ...);

record World {
    pub let mut dim : vec2 = vec2 ();
    pub let mut pos : vec2 = vec2 ();
    pub let mut size : vec2 = vec2 ();

    pub let mut radius : u32 = 0;
    pub let mut level : u32 = 0;

    pub let mut color : vec4 = vec4 ();
    pub let mut rotation : vec4 = vec4 ();
    pub let mut scissors : vec4 = vec4 ();

    pub self () {}
}

/**
 * Ancestor class of shapes that are drawn in 2D by the ShapeDrawer
 * */
@abstract
pub class Shape {

    pub let uid : usize;

    let dmut _context : &ShapeDrawer;

    let _vbo : &VertexBufferObject;
    let _ibo : &IndexBufferObject;

    let dmut _ubo : &UniformBufferObject;
    let dmut _descSet : (&DescriptorSet)?;

    let mut _hidden : bool = false;
    let mut _outOfBound : bool = false;
    let mut _needRedraw : bool = false;
    let mut _changed : bool = false;

    let mut _world : World = World ();

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          CTOR/DTOR          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (uid : usize,
              dmut drawer : &ShapeDrawer,
              vbo : &VertexBufferObject,
              ibo : &IndexBufferObject,
              dmut ubo : &UniformBufferObject,
              dmut descSet : &DescriptorSet)

        with uid = uid
        , _context = alias drawer
        , _vbo = vbo
        , _ibo = ibo
        , _ubo = alias ubo
        , _descSet = (alias descSet)?

        throws BalderError
    {
        descSet:.setUniform (UniformNames::WORLD, ubo);
    }

    __dtor (mut self) {
        self:.dispose ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Change the dimension of the window in which the shape is drawn
     * */
    pub fn setWindowDimension (mut self, dim : vec2) {
        self._world.dim = dim;
        self:.setScissors (makeVec2 (0.f, 0.f), dim);

        let pos = self._world.pos;
        let size = self._world.size;

        let outOfBound = (pos.x + size.x < -(dim.x / 2.f) || pos.x > dim.x * 1.5f  || pos.y + size.y < -(dim.y / 2.f) || pos.y > dim.y * 1.5f);
        if self._outOfBound != outOfBound {
            self._outOfBound = outOfBound;
            self._needRedraw = true;
        }

        self._changed = true;
    }

    /**
     * Change the position of the shape in the window (in pixels, (0,0) being top left corner)
     * */
    pub fn setPosition (mut self, pos : vec2) {
        self._world.pos = pos;

        let dim = self._world.dim;
        let size = self._world.size;

        let outOfBound = (pos.x + size.x < -(dim.x / 2.f) || pos.x > dim.x * 1.5f  || pos.y + size.y < -(dim.y / 2.f) || pos.y > dim.y * 1.5f);
        if self._outOfBound != outOfBound {
            self._outOfBound = outOfBound;
            self._needRedraw = true;
        }

        self._changed = true;
    }

    /**
     * Change the size of the shape in the window (in pixels)
     */
    pub fn setSize (mut self, size : vec2) {
        self._world.size = size;

        let dim = self._world.dim;
        let pos = self._world.pos;

        let outOfBound = (pos.x + size.x < -(dim.x / 2.f) || pos.x > dim.x * 1.5f  || pos.y + size.y < -(dim.y / 2.f) || pos.y > dim.y * 1.5f);
        if self._outOfBound != outOfBound {
            self._outOfBound = outOfBound;
            self._needRedraw = true;
        }

        self._changed = true;
    }

    /**
     * Change the roundeness of the corner of the shape
     */
    pub fn setRadius (mut self, v : u32) {
        self._world.radius = v;
        self._changed = true;
    }

    /**
     * Change the roundeness of the corner of the shape
     */
    pub fn setLevel (mut self, v : u32) {
        self._world.level = v;
        self._changed = true;
    }

    /**
     * Change the color of the shape
     */
    pub fn setColor (mut self, v : vec4) {
        self._world.color = v;
        self._changed = true;
    }

    /**
     * Change the rotation of the shape
     */
    pub fn setRotation (mut self, v : f32) {
        let m = math::utils::rotationZ2 (radian (v % 360.f));
        self._world.rotation = makeVec4 (m.a1, m.b1, m.a2, m.b2);
        self._changed = true;
    }

    /**
     * Change the scissors of the shape
     */
    pub fn setScissors (mut self, pos : vec2, size : vec2) {
        self._world.scissors = makeVec4 (pos.x, pos.y, pos.x + size.x, pos.y + size.y);
        self._changed = true;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          HIDE/SHOW          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Hide the shape in the next drawing
     * */
    @final
    pub fn hide (mut self) {
        if !self._hidden {
            self._hidden = true;
            self._needRedraw = true;
        }
    }

    /**
     * Show the shape in the next drawing
     * */
    @final
    pub fn show (mut self) {
        if self._hidden {
            self._hidden = false;
            self._needRedraw = true;
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          COMMIT          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Commit the modifications of the shape to be rendered in the next frame
     * */
    pub fn commit (mut self)-> bool {
        let mut toReturn = false;
        if self._changed {
            self._ubo:.setData (0, self._world, commit-> true);
            self._changed = false;

            toReturn = true;
        }

        if self._needRedraw {
            self._context:.redraw ();
            self._needRedraw = false;
        }

        toReturn
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: true iif the shape is hidden (and therefore must not be drawn)
     * */
    @final
    pub fn isHidden (self)-> bool {
        self._hidden || self._outOfBound
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          USAGE          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Register the drawing in the current draw iteration
     * */
    pub fn register (mut self, dmut cmd : &IndirectCommandAllocator) {
        cmd:.registerIndexedObject (self._ibo.getNbPoints ());
    }

    /**
     * Draw the shape
     * @assume: already registered and at correct index
     * */
    pub fn draw (self, dmut _ : &Shader, dmut cmd : &IndirectCommandAllocator) {
        if let Ok (ds) = self._descSet {
            ds.select ();
            self._vbo.select ();
            self._ibo.select ();

            cmd:.drawNextIndexed ();
        }
    }

    /**
     * Clean phase of a draw pass
     * */
    pub fn clean (mut self) {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            if let Ok (dmut ds) = alias self._descSet {
                self._context:.getWindow ():.insertBin (alias ds);
                self._context:.getWindow ():.insertBin (alias self._ubo);
                self._descSet = none;
            }
        }
    }

}
