in shape;

use balder::math::_;
use balder::core::{_,
                   shader::_,
                   shader::buffers::_,
                   application::_,
                   driver::_,
                   config::_};

use balder::utils::_;
use balder::interface::drawer;

pub mod ::color;
pub mod ::texture;
pub mod ::border;

/**
 * Ancestor class of shapes that are drawn in 2D by the ShapeDrawer
 * */
@abstract
pub class Shape {

    pub let uid : usize;

    let dmut _context : &ShapeDrawer;

    let _vbo : &VertexBufferObject;
    let _ibo : &IndexBufferObject;

    let mut _hidden : bool = false;
    let mut _outOfBound : bool = false;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          CTOR/DTOR          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (uid : usize,
              dmut drawer : &ShapeDrawer,
              vbo : &VertexBufferObject,
              ibo : &IndexBufferObject)

        with uid = uid
        , _context = alias drawer
        , _vbo = vbo
        , _ibo = ibo
    {}

    __dtor (mut self) {
        self:.dispose ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Change the dimension of the window in which the shape is drawn
     * */
    pub fn setWindowDimension (mut self, dim : vec2);

    /**
     * Change the scissor of the shape is drawn
     * */
    pub fn setScissors (mut self, pos : vec2, size : vec2);

    /**
     * Change the position of the shape in the window (in pixels, (0,0) being top left corner)
     * */
    pub fn setPosition (mut self, pos : vec2);

    /**
     * Change the size of the shape in the window (in pixels)
     */
    pub fn setSize (mut self, size : vec2);

    /**
     * Change the roundeness of the corner of the shape
     */
    pub fn setLevel (mut self, v : u32);

    /**
     * Change the color of the shape
     */
    pub fn setColor (mut self, v : vec4);

    /**
     * Change the rotation of the shape
     */
    pub fn setRotation (mut self, v : f32);

    /**
     * Hide the shape in the next drawing
     * */
    @final
    pub fn hide (mut self) {
        if !self._hidden {
            self._hidden = true;
            self._context:.redraw ();
        }
    }

    /**
     * Show the shape in the next drawing
     * */
    @final
    pub fn show (mut self) {
        if self._hidden {
            self._hidden = false;
            self._context:.redraw ();
        }
    }

    /**
     * Commit the modifications of the shape to be rendered in the next frame
     * */
    pub fn commit (mut self, redraw : bool);

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: true iif the shape is hidden (and therefore must not be drawn)
     * */
    @final
    pub fn isHidden (self)-> bool {
        self._hidden || self._outOfBound
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          USAGE          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Register the drawing in the current draw iteration
     * */
    pub fn register (mut self, dmut cmd : &IndirectCommandAllocator);

    /**
     * Draw the shape
     * @assume: already registered and at correct index
     * */
    pub fn draw (self, dmut _ : &Shader, dmut cmd : &IndirectCommandAllocator);

    /**
     * Clean phase of a draw pass
     * */
    pub fn clean (mut self);

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable;

}
