in parser;

use std::{conv, syntax::_, stream, io};
use std::algorithm::searching;

use balder::core::_;
use balder::interface::{_, style::_};

use balder::math::_;
use balder::utils::_;

/**
 * Class parsing a style sheet string
 * */
pub record StyleParser {

    // The content parsed by the parser
    let mut _content : [c8] = "";

    // The style manager
    let dmut _styleManager : &StyleManager;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          CTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (dmut manager : &StyleManager, content : [c8])
        with _styleManager = alias manager
        , _content = content
    {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          PARSING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Load a style sheet string and register the style into the parser
     * */
    pub fn load (mut self)
        throws BalderError
    {
        let dmut lex = copy Lexer!{c8} (self._content,
                                        tokens-> copy Tokens::__members__,
                                        comments-> copy Comments::__members__);

        while !lex.isEof () {
            let (widgetName, line, col) = lex:.next ();
            if widgetName != "" && !lex.isEof () {
                self.verifyIdentifier (widgetName, line, col);
                self:.readWidgetStyle (widgetName, alias lex);
            }
        }
    }

    /**
     * Read a widget style
     * */
    fn readWidgetStyle (mut self, widgetName : [c8], dmut lexer : &Lexer!{c8})
        throws BalderError
    {
        let mut classes : [[c8]] = [];
        let mut subItem = "";
        let dmut state = [false ; 3];
        let mut readClass = false, mut readState = false;

        loop {
            match lexer:.next () {
                (_ = Tokens::COLON, l, c) => {
                    if (readClass) { throw self.unexpected (Tokens::COLON, l, c); }
                    readState = true;

                    self.readStyleState (ref state, alias lexer);
                }
                (_ = Tokens::DCOLON, l, c) => {
                    if subItem != "" || readClass {
                        throw self.unexpected (Tokens::DCOLON, l, c);
                    }

                    let (ident, l2, c2) = lexer:.next ();
                    self.verifyIdentifier (ident, l2, c2);
                    subItem = ident;
                }
                (_ = Tokens::POINT, _, _) => {
                    let (ident, l2, c2) = lexer:.next ();
                    self.verifyIdentifier (ident, l2, c2);

                    classes = classes ~ [ident];
                    readClass = true;
                }
                (_ = Tokens::LACC, _, _) => { break; }
                (v, l, c) => {
                    throw self.unexpected (v, l, c);
                }
            }
        }

        let dmut result = self.readStyleContent (alias lexer, readState);
        if subItem != "" {
            let dmut inner = copy Style ();
            inner.subItems [subItem] = result;
            result = alias inner;
        }

        let hover = state [0];
        let focus = state [1];
        let check = state [2];
        let default = (!state [0] && !state [1] && !state [2]);

        if classes.len == 0 {
            classes ~= [""];
        }

        for c in classes {
            if hover {
                self._styleManager:.insertHover (widgetName, c, result);
            }
            if focus {
                self._styleManager:.insertFocus (widgetName, c, result);
            }
            if check {
                self._styleManager:.insertCheck (widgetName, c, result);
            }
            if default {
                self._styleManager:.insertDefault (widgetName, c, result);
            }
        }
    }

    /**
     * Read the style state
     * */
    fn readStyleState (self, ref dmut state : [bool ; 3], dmut lexer : &Lexer!{c8})
        throws BalderError
    {
        let (name, l, c) = lexer:.next ();
        match name {
            Keywords::HOVER => {
                state [0] = true;
            }
            Keywords::FOCUS => {
                state [1] = true;
            }
            Keywords::CHECK => {
                state [2] = true;
            }
            _ => {
                throw self.unexpected (name, l, c);
            }
        }
    }

    /**
     * Read the content of a style
     * @params:
     *    - lexer: the lexer tokenizing the style sheet string
     * */
    fn readStyleContent (self, dmut lexer : &Lexer!{c8}, withModifier : bool)-> dmut &Style
        throws BalderError
    {
        let dmut result = copy Style ();

        loop {
            let (n, l, c) = lexer:.next ();
            match n {
                Tokens::RACC => { break; }
                Keywords::COLOR => {
                    result.color.0 = true;
                    result.color.1 = self.readColor (alias lexer);
                }
                Keywords::BORDER_COLOR => {
                    result.borderColor.0 = true;
                    result.borderColor.1 = self.readColor (alias lexer);
                }
                Keywords::BACKGROUND_COLOR => {
                    result.backgroundColor.0 = true;
                    result.backgroundColor.1 = self.readColor (alias lexer);
                }
                Keywords::TEXT_COLOR => {
                    result.textColor.0 = true;
                    result.textColor.1 = self.readColor (alias lexer);
                }
                Keywords::TEXT_XALIGN => {
                    result.xalign.0 = true;
                    result.xalign.1 = self.readXAlign (alias lexer);
                }
                Keywords::TEXT_YALIGN => {
                    result.yalign.0 = true;
                    result.yalign.1 = self.readYAlign (alias lexer);
                }
                Keywords::SELECTION_COLOR => {
                    result.selectionColor.0 = true;
                    result.selectionColor.1 = self.readColor (alias lexer);
                }
                Keywords::FONT => {
                    result.font.0 = true;
                    result.font.1 = self.readString (alias lexer);
                }
                Keywords::FONT_SIZE => {
                    result.fontSize.0 = true;
                    result.fontSize.1 = self.readPixelSize (alias lexer);
                }
                Keywords::RADIUS => {
                    result.radius.0 = true;
                    result.radius.1 = self.readPixelSize (alias lexer);
                }
                _ => {
                    if withModifier {
                        let inner = self.unexpected (n, l, c);
                        throw copy BalderError ("Size modifier is only applicable on non-contextual style classes : " ~ inner.msg);
                    }

                    self.readStyleContentSize (n, l, c, alias lexer, alias result);
                }
            }
        }

        alias result
    }

    /**
     * Read a size style modifier
     * */
    fn readStyleContentSize (self, n : [c8], l : usize, c : usize, dmut lexer : &Lexer!{c8}, dmut result : &Style)
        throws BalderError
    {
        match n {
            Keywords::BORDER => {
                result.borderSize.0 = true;
                result.borderSize.1 = self.readPixelSize (alias lexer);
            }
            Keywords::PADDING => {
                result.paddingSize [0].0 = true;
                result.paddingSize [0].1 = self.readSize (alias lexer);
            }
            Keywords::PADDING_TOP => {
                result.paddingSize [1].0 = true;
                result.paddingSize [1].1 = self.readSize (alias lexer);
            }
            Keywords::PADDING_BOTTOM => {
                result.paddingSize [2].0 = true;
                result.paddingSize [2].1 = self.readSize (alias lexer);
            }
            Keywords::PADDING_LEFT => {
                result.paddingSize [3].0 = true;
                result.paddingSize [3].1 = self.readSize (alias lexer);
            }
            Keywords::PADDING_RIGHT => {
                result.paddingSize [4].0 = true;
                result.paddingSize [4].1 = self.readSize (alias lexer);
            }
            Keywords::MARGIN => {
                result.marginSize [0].0 = true;
                result.marginSize [0].1 = self.readSize (alias lexer);
            }
            Keywords::MARGIN_TOP => {
                result.marginSize [1].0 = true;
                result.marginSize [1].1 = self.readSize (alias lexer);
            }
            Keywords::MARGIN_BOTTOM => {
                result.marginSize [2].0 = true;
                result.marginSize [2].1 = self.readSize (alias lexer);
            }
            Keywords::MARGIN_LEFT => {
                result.marginSize [3].0 = true;
                result.marginSize [3].1 = self.readSize (alias lexer);
            }
            Keywords::MARGIN_RIGHT => {
                result.marginSize [4].0 = true;
                result.marginSize [4].1 = self.readSize (alias lexer);
            }
            Keywords::SIZE => {
                result.size [0].0 = true;
                result.size [0].1 = self.readSize (alias lexer);
            }
            Keywords::WIDTH => {
                result.size [1].0 = true;
                result.size [1].1 = self.readSize (alias lexer);
            }
            Keywords::HEIGHT => {
                result.size [2].0 = true;
                result.size [2].1 = self.readSize (alias lexer);
            }
            _ => {
                throw self.unexpected (n, l, c);
            }
        }
    }


    /**
     * Read a color
     * */
    fn readColor (self, dmut lexer : &Lexer!{c8})-> vec4
        throws BalderError
    {
        self.readTokens (alias lexer, Tokens::COLON);

        let mut color = vec4 ();
        let (colorS, l, c) = lexer:.next ();
        {
            if colorS.len != 0 && colorS [0] == '#' {
                color = palette::colorFromHex (std::conv::to!{u32} (colorS [1 .. $]));
            }

            else if let Ok (pos) = colorS.find ('!') {
                let level = std::conv::to!{u32} (colorS [pos + 1 .. $]);
                color = ColorPalette.get (colorS [0 .. pos], cast!f32 (level) / 100.f);
            }

            else {
                color = ColorPalette.get (colorS, 0.f);
            }
        } catch {
            _ => { throw self.unexpected (colorS, l, c); }
        }

        let (end, l2, c2) = lexer:.next ();
        let (end2, l4, c4) = if end == Tokens::COLON {
            let (alphaS, l3, c3) = lexer:.next ();
            {
                color.w = cast!f32 (std::conv::to!{u32} (alphaS)) / 255.f;
            } catch {
                _ => { throw self.unexpected (alphaS, l3, c3); }
            }

            lexer:.next ()
        } else {
            (end, l2, c2)
        };

        if end2 != Tokens::SEMI_COLON {
            throw self.unexpected (end2, l4, c4);
        }

        color
    }

    /**
     * Read a text xalignement
     * */
    fn readXAlign (self, dmut lexer : &Lexer!{c8})-> XAlign
        throws BalderError
    {
        self.readTokens (alias lexer, Tokens::COLON);
        let c = lexer:.next ();
        let align = match c._0 {
            Keywords::LEFT => { XAlign::LEFT }
            Keywords::RIGHT => { XAlign::RIGHT }
            Keywords::CENTER => { XAlign::CENTER }
            _ => {
                throw self.unexpected (expand c);
            }
        }

        self.readTokens (alias lexer, Tokens::SEMI_COLON);
        align
    }

    /**
     * Read a text xalignement
     * */
    fn readYAlign (self, dmut lexer : &Lexer!{c8})-> YAlign
        throws BalderError
    {
        self.readTokens (alias lexer, Tokens::COLON);
        let c = lexer:.next ();
        let align = match c._0 {
            Keywords::TOP => { YAlign::TOP }
            Keywords::BOTTOM => { YAlign::BOTTOM }
            Keywords::CENTER => { YAlign::CENTER }
            _ => {
                throw self.unexpected (expand c);
            }
        }

        self.readTokens (alias lexer, Tokens::SEMI_COLON);
        align
    }

    /**
     * Read a pixel size
     * */
    fn readPixelSize (self, dmut lexer : &Lexer!{c8})-> u32
        throws BalderError
    {
        self.readTokens (alias lexer, Tokens::COLON);

        let pix = lexer:.next ();
        let mut size = 0u32;

        {
            size = std::conv::to!{u32} (pix._0);
        } catch {
            _ => { throw self.unexpected (expand pix); }
        };

        self.readTokens (alias lexer, Tokens::SEMI_COLON);

        size
    }

    /**
     * Read a pixel size
     * */
    fn readRelativeSize (self, dmut lexer : &Lexer!{c8})-> f32
        throws BalderError
    {
        self.readTokens (alias lexer, Tokens::COLON);

        let pix = lexer:.next ();
        let point = lexer:.next ();

        let mut size = 0.f;
        {
            if point._0 == Tokens::SEMI_COLON {
                size = std::conv::to!{f32} (pix._0);
            } else {
                let end = lexer:.next ();
                size = std::conv::to!{f32} (pix._0 ~ "." ~ end._0);
            }
        } catch {
            _ => { throw self.unexpected (expand pix); }
        }

        if point._0 != Tokens::SEMI_COLON {
            self.readTokens (alias lexer, Tokens::SEMI_COLON);
        }

        size
    }

    /**
     * Read a string
     * */
    fn readString (self, dmut lexer : &Lexer!{c8})-> [c8]
        throws BalderError
    {
        self.readTokens (alias lexer, Tokens::COLON);
        let beg = self.readTokens (alias lexer, Tokens::SQUOTE, Tokens::DQUOTE);

        let dmut result = copy StringStream ();
        lexer:.setSkipTokens (false);
        {
            loop {
                let n = lexer:.next ();
                if n._0 == beg._0 { break; }
                result:.write (n._0);
            }
        } exit {
            lexer:.setSkipTokens (true);
        }

        self.readTokens (alias lexer, Tokens::SEMI_COLON);

        result[]
    }


    /**
     * Read a widget size
     * */
    fn readSize (self, dmut lexer : &Lexer!{c8})-> WidgetSize
        throws BalderError
    {
        self.readTokens (alias lexer, Tokens::COLON);

        let pix = lexer:.next ();
        if pix._0 == Tokens::LACC {
            return self.readComplexSize (alias lexer);
        }


        let mut size = {
            WidgetSize (pix-> std::conv::to!{u32} (pix._0))
        } catch {
            _ => {
                throw self.unexpected (expand pix);
            }
        };

        self.readTokens (alias lexer, Tokens::SEMI_COLON);

        size
    }

    /**
     * Read a complex size
     * */
    fn readComplexSize (self, dmut lexer : &Lexer!{c8})-> WidgetSize
        throws BalderError
    {
        let mut result = WidgetSize ();
        loop {
            let (n, l, c) = lexer:.next ();
            match n {
                Tokens::RACC => { break; }
                Keywords::RELATIVE => {
                    result.relative = self.readRelativeSize (alias lexer);
                }
                Keywords::MIN => {
                    result.minPix = self.readPixelSize (alias lexer);
                }
                Keywords::MAX => {
                    result.maxPix = self.readPixelSize (alias lexer);
                }
                _ => {
                    throw self.unexpected (n, l, c);
                }
            }
        }

        result
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CHECKING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Read the next token in the lexer and check that it correspond to one of the expected tokens
     * */
    fn readTokens {T...} (self, dmut lexer : &Lexer!{c8}, expect : T)-> ([c8], usize, usize)
        throws BalderError
    {
        let n = lexer:.next ();
        cte for j in expect {
            if n._0 == j { return n; }
        }

        throw self.unexpected (expand n);
    }

    /**
     * Read the next token in the lexer and check that it correspond to one of the expected tokens
     * */
    fn readTokens (self, dmut lexer : &Lexer!{c8}, expect : [c8])-> ([c8], usize, usize)
        throws BalderError
    {
        let n = lexer:.next ();
        if expect == n._0 {
            return n;
        }

        throw self.unexpected (expand n);
    }


    /**
     * Throw an unexpected token exception
     * @params:
     *    - tok: the read token
     *    - line: the line of the reading
     *    - col: the column of the reading
     * */
    fn unexpected (self, tok : [c8], line : usize, col : usize)-> &BalderError {
        let msg = if let Ok (m) = (std::format::format ("Unexpected '{}' at ({}:{})", tok, line, col))? {
            m
        } else {
            ("Unexpected '" ~ tok ~ "'")
        };

        copy BalderError (msg)
    }

    /**
     * Verify that the name is a identifier
     * */
    fn verifyIdentifier (self, name : [c8], line : usize, col : usize)
        throws BalderError
    {
        if !self.isIdentifier (name) {
            let msg = if let Ok (m) = (std::format::format ("Invalid identifier '{}' at ({}:{})", name, line, col))? {
                m
            } else {
                ("Invalid identifier '" ~ name ~ "'")
            };

            throw copy BalderError (msg);
        }
    }

    /**
     * @returns: true if name is an identifier
     * */
    fn isIdentifier (self, str : [c8])-> bool {
        let mut i = 0u64;
        let mut found = false;
        for j in str { // must start by a letter, but can be preceded by as many _ as wanted
            if (j >= 'a' && j <= 'z') || (j >= 'A' && j <= 'Z') {
                found = true;
                break;
            } else if (j != '_' && j != '-') {
                return false;
            }
            i += 1u64;
        }

        i += 1u64;
        if (i < str.len) { // the rest of the identifier must be composed of letters, numbers, or _
            for j in str [cast!usize (i) .. $] {
                if (j < 'a' || j > 'z') && (j < 'A' || j > 'Z') && (j != '_') && (j < '0' || j > '9') && (j != '-') {
                    return false;
                }
            }
        } else {
            return found;
        }

        true
    }

}
