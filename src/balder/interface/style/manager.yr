in manager;

use std::algorithm::searching;
use std::io;

use balder::core::error;
use balder::interface::_;
use balder::math::_;
use balder::utils::palette;


record WidgetStyles {

    pub let mut hover : [[c8] => mut &Style] = copy [];
    pub let mut focus : [[c8] => mut &Style] = copy [];
    pub let mut check : [[c8] => mut &Style] = copy [];
    pub let mut default : [[c8] => mut &Style] = copy [];

    pub self () {}

    pub fn insertHover (mut self, name : [c8], style : &Style) {
        if let Ok (f) = self.hover [name] {
            let dmut n = copy Style ();
            n:.merge (f);
            n:.merge (style);

            self.hover [name] = n;
        } else {
            self.hover [name] = style;
        }
    }

    pub fn insertFocus (mut self, name : [c8], style : &Style) {
        if let Ok (f) = self.focus [name] {
            let dmut n = copy Style ();
            n:.merge (f);
            n:.merge (style);

            self.focus [name] = n;
        } else {
            self.focus [name] = style;
        }
    }

    pub fn insertCheck (mut self, name : [c8], style : &Style) {
        if let Ok (f) = self.check [name] {
            let dmut n = copy Style ();
            n:.merge (f);
            n:.merge (style);

            self.check [name] = n;
        } else {
            self.check [name] = style;
        }
    }

    pub fn insertDefault (mut self, name : [c8], style : &Style) {
        if let Ok (f) = self.default [name] {
            let dmut n = copy Style ();
            n:.merge (f);
            n:.merge (style);

            self.default [name] = n;
        } else {
            self.default [name] = style;
        }
    }
}

/**
 * Manager of defined styles
 * */
pub class StyleManager {

    // The list of defined style classes
    let dmut _widgets : [[c8] => WidgetStyles] = copy [];

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          CTORS          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an empty style manager
     * */
    pub self () {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Register a style for a class
     * @params:
     *    - widget: the widget kind (empty means that style applies to all widgets that have not been overriden)
     *    - name: the name of the style
     *    - style: the registered style
     * */
    pub fn insertDefault (mut self, widget : [c8], name : [c8], style : &Style) {
        if let Ok (dmut w) = alias self._widgets [widget] {
            w:.insertDefault (name, style);
            self._widgets [widget] = alias w;
        } else {
            let dmut w = WidgetStyles ();
            w:.insertDefault (name, style);
            self._widgets [widget] = alias w;
        }
    }

    /**
     * Register a style for a class
     * @params:
     *    - widget: the widget kind (empty means that style applies to all widgets that have not been overriden)
     *    - name: the name of the style
     *    - style: the registered style
     * */
    pub fn insertHover (mut self, widget : [c8], name : [c8], style : &Style) {
        if let Ok (dmut w) = alias self._widgets [widget] {
            w:.insertHover (name, style);
            self._widgets [widget] = alias w;
        } else {
            let dmut w = WidgetStyles ();
            w:.insertHover (name, style);
            self._widgets [widget] = alias w;
        }
    }

    /**
     * Register a style for a class
     * @params:
     *    - widget: the widget kind (empty means that style applies to all widgets that have not been overriden)
     *    - name: the name of the style
     *    - style: the registered style
     * */
    pub fn insertFocus (mut self, widget : [c8], name : [c8], style : &Style) {
        if let Ok (dmut w) = alias self._widgets [widget] {
            w:.insertFocus (name, style);
            self._widgets [widget] = alias w;
        } else {
            let dmut w = WidgetStyles ();
            w:.insertFocus (name, style);
            self._widgets [widget] = alias w;
        }
    }

    /**
     * Register a style for a class
     * @params:
     *    - widget: the widget kind (empty means that style applies to all widgets that have not been overriden)
     *    - name: the name of the style
     *    - style: the registered style
     * */
    pub fn insertCheck (mut self, widget : [c8], name : [c8], style : &Style) {
        if let Ok (dmut w) = alias self._widgets [widget] {
            w:.insertCheck (name, style);
            self._widgets [widget] = alias w;
        } else {
            let dmut w = WidgetStyles ();
            w:.insertCheck (name, style);
            self._widgets [widget] = alias w;
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Retreive a style from a list of class names and the kind of widget that will be rendered
     * @params:
     *    - classList: the list of class to load
     * @returns: the composition of the style from the list of classes
     * @info: the order of classList is important, last class overrides the previous one
     * */
    pub fn get (self, widget : [c8], classList : [c8], hover : bool, focus : bool, check : bool)-> dmut &Style {
        let dmut resultStyle = if widget != "" {
            alias self.get ("", classList, hover-> hover, focus-> focus, check-> check)
        } else {
            copy Style ()
        };

        if let Ok (w) = self._widgets [widget] {
            let mut current = classList;

            while current.len > 0 {
                let fst = if let Ok (pos) = current.find ('.') {
                    let fst = current [0 .. pos];
                    current = current [pos + 1 .. $];
                    fst
                } else {
                    let fst = current;
                    current = "";
                    fst
                };

                if let Ok (s) = w.default [fst] {
                    resultStyle:.merge (s);
                }

                if hover {
                    if let Ok (s) = w.hover [fst] {
                        resultStyle:.merge (s);
                    }
                }

                if focus {
                    if let Ok (s) = w.check [fst] {
                        resultStyle:.merge (s);
                    }
                }

                if check {
                    if let Ok (s) = w.check [fst] {
                        resultStyle:.merge (s);
                    }
                }
            }
        }

        alias resultStyle
    }
}
