in implem;

use std::algorithm::searching;

use balder::core::error;
use balder::interface::_;
use balder::math::_;
use balder::utils::palette;


/**
 * Style definition
 * */
pub class Style {

    pub { // colors
        let dmut backgroundColor = (false, vec4 ());
        let dmut borderColor = (false, vec4 ());
        let dmut textColor = (false, vec4 ());
        let dmut selectionColor = (false, vec4 ());
        let dmut color = (false, vec4 ());
    }

    pub { // font
        let mut font : (mut bool, mut [c8]) = (false, "");
        let dmut fontSize = (false, 0u32);
    }

    pub { // sizes
        let dmut borderSize = (false, 0u32);
        let dmut radius = (false, 0u32);
        let dmut paddingSize = [(false, WidgetSize ()) ; 5];
        let dmut marginSize = [(false, WidgetSize ()) ; 5];
    }

    pub let mut subItems : [[c8] => mut &Style] = copy [];

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          CTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self () {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          COMPARISON          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub fn opEquals (self, other : &Style)-> bool {
        self.sameDimension (other) && self.sameColors (other)
    }

    /**
     * @returns: true if the dimension of the styles are equal
     * */
    pub fn sameDimension (self, other : &Style)-> bool {
        if self.font != other.font { return false; }
        if self.fontSize != other.fontSize { return false; }

        if self.borderSize != other.borderSize { return false; }
        if self.paddingSize != other.paddingSize { return false; }
        if self.marginSize != other.marginSize { return false; }

        if self.radius != other.radius { return false; }

        for n, i in other.subItems {
            if let Ok (w) = self.subItems [n] {
                if !w.sameDimension (i) { return false; }
            } else {
                return false;
            }
        }

        for n, _ in self.subItems {
            if n !in other.subItems { return false; }
        }

        true
    }

    /**
     * @returns: true if the colors of the styles are equal
     * */
    pub fn sameColors (self, other : &Style)-> bool {
        if self.backgroundColor != other.backgroundColor { return false; }
        if self.borderColor != other.borderColor { return false; }
        if self.textColor != other.textColor { return false; }
        if self.selectionColor != other.selectionColor { return false; }
        if self.color != other.color { return false; }

        for n, i in other.subItems {
            if let Ok (w) = self.subItems [n] {
                if !w.sameColors (i) { return false; }
            } else {
                return false;
            }
        }

        for n, _ in self.subItems {
            if n !in other.subItems { return false; }
        }

        true
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the color to apply on a shape
     * */
    pub fn getColor (self, kind : WidgetShapeKind)-> vec4 {
        match kind {
            WidgetShapeKind::BACKGROUND => {
                if self.backgroundColor.0 {
                    return self.backgroundColor._1;
                }
            }
            WidgetShapeKind::BORDER => {
                if self.borderColor.0 {
                    return self.borderColor._1
                }
            }
            WidgetShapeKind::TEXT => {
                if self.textColor.0 {
                    return self.textColor._1;
                }
            }
        }

        self.color._1
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          MERGING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create a new style that is the merging of self and right where right has the priority
     * @params:
     *    - right: the style that modifies current style during merge
     *    - state: the state of the merging
     * */
    pub fn merge (mut self, right : &Style) {
        if right.backgroundColor.0 { self.backgroundColor = right.backgroundColor; }
        if right.selectionColor.0 { self.selectionColor = right.selectionColor; }
        if right.textColor.0 { self.textColor = right.textColor; }
        if right.borderColor.0 { self.borderColor = right.borderColor; }
        if right.color.0 { self.color = right.color; }

        if right.font.0 { self.font = right.font; }
        if right.fontSize.0 { self.fontSize = right.fontSize; }

        if right.borderSize.0 { self.borderSize = right.borderSize; }
        if right.radius.0 { self.radius = right.radius; };

        for i in 0 .. 5 {
            if right.marginSize [i].0 { self.marginSize [i] = right.marginSize [i]; }
            if right.paddingSize [i].0 { self.paddingSize [i] = right.paddingSize [i]; };
        }

        for name, innerStyle in self.subItems {
            if let Ok (m) = right.subItems [name] {
                let dmut n = copy Style ();
                n:.merge (innerStyle);
                n:.merge (m);

                self.subItems [name] = n;
            }
        }

        for name, innerStyle in right.subItems {
            if name !in self.subItems {
                self.subItems [name] = innerStyle;
            }
        }
    }

}
