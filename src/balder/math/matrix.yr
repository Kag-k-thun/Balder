in matrix;
use balder::math::vector;
use std::{io, math, stream, traits};

/*!
 * ====================================================================================================
 * ====================================================================================================
 * =====================================          ERRORS          =====================================
 * ====================================================================================================
 * ====================================================================================================
 */

pub class MatrixError over Exception {
    pub let msg : [c8];
    pub self (msg : [c8]) with msg = msg {}

    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            self.super.toStream (alias stream);
        }
    }
}

/*!
 * ====================================================================================================
 * ====================================================================================================
 * =====================================          BASES          ======================================
 * ====================================================================================================
 * ====================================================================================================
 */


pub def mat2 : Matrix!{2u32, f32};
pub def imat2 : Matrix!{2u32, i32};

pub def mat3 : Matrix!{3u32, f32};
pub def imat3 : Matrix!{3u32, i32};

pub def mat4 : Matrix!{4u32, f32};
pub def imat4 : Matrix!{4u32, i32};

pub fn makeMat2 {T} (a1 : T, b1 : T, a2 : T, b2 : T)-> Matrix!{2u32, T} {
    Matrix!{2u32, T} (a1-> a1, b1-> b1,
                      a2-> a2, b2-> b2)
}

pub fn makeMat3 {T} (a1 : T, b1 : T, c1 : T, a2 : T, b2 : T, c2 : T, a3 : T, b3 : T, c3 : T)-> Matrix!{3u32, T} {
    Matrix!{3u32, T} (a1-> a1, b1-> b1, c1-> c1,
                      a2-> a2, b2-> b2, c2-> c2,
                      a3-> a3, b3-> b3, c3-> c3)
}

pub fn makeMat4 {T} (a1 : T, b1 : T, c1 : T, d1 : T,
                     a2 : T, b2 : T, c2 : T, d2 : T,
                     a3 : T, b3 : T, c3 : T, d3 : T,
                     a4 : T, b4 : T, c4 : T, d4 : T)-> Matrix!{4u32, T} {
    Matrix!{4u32, T} (a1-> a1, b1-> b1, c1-> c1, d1-> d1,
                      a2-> a2, b2-> b2, c2-> c2, d2-> d2,
                      a3-> a3, b3-> b3, c3-> c3, d3-> d3,
                      a4-> a4, b4-> b4, c4-> c4, d4-> d4)
}

/*!
 * ====================================================================================================
 * ====================================================================================================
 * =================================          TEMPLATE TESTS          =================================
 * ====================================================================================================
 * ====================================================================================================
 */

pub def isMatrixBigger {N : u32, T} = (isMatrix!{T}) && (arity!{T} >= N);
pub def isMatrix {T} = is!{T}{Z of Matrix!{N, U}, N : u32, U};
pub def isMatrixOf {T, U} = is!{T}{Z of Matrix!{N, U}, N : u32};

pub def arity {T of Matrix!{N, U}, N : u32, U} = N;

/*!
 * ====================================================================================================
 * ====================================================================================================
 * ==================================          MATRIX TYPE          ===================================
 * ====================================================================================================
 * ====================================================================================================
 */

def initF {T} = cte if isFloating!{T} { 0.f } else { 0 };
def init1F {T} = cte if isFloating!{T} { 1.f } else { 1 };

pub record if (isSigned!{T} || isFloating!{T})
    Matrix {N : u32, T}
{
    pub let mut a1 : T;
    pub let mut b1 : T;
    pub let mut a2 : T;
    pub let mut b2 : T;

    cte if N > 2 {
        pub let mut a3 : T;
        pub let mut b3 : T;
        pub let mut c1 : T;
        pub let mut c2 : T;
        pub let mut c3 : T;
    }

    cte if N > 3 {
        pub let mut a4 : T;
        pub let mut b4 : T;
        pub let mut c4 : T;
        pub let mut d1 : T;
        pub let mut d2 : T;
        pub let mut d3 : T;
        pub let mut d4 : T;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          CTORS          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    cte if N == 2 {
        pub self (a1 : T = init1F!{T}, b1 : T = initF!{T}, a2 : T = initF!{T}, b2 : T = init1F!{T})
            with a1 = a1, b1 = b1
            , a2 = a2, b2 = b2
        {}
    }

    cte if N == 3 {
        pub self (a1 : T = init1F!{T}, b1 : T = initF!{T}, c1 : T = initF!{T},
                  a2 : T = initF!{T}, b2 : T = init1F!{T}, c2 : T = initF!{T},
                  a3 : T = initF!{T}, b3 : T = initF!{T}, c3 : T = init1F!{T})
            with a1 = a1, b1 = b1, c1 = c1
            , a2 = a2, b2 = b2, c2 = c2
            , a3 = a3, b3 = b3, c3 = c3
        {}
    }

    cte if N == 4 {
        pub self (a1 : T = init1F!{T}, b1 : T = initF!{T}, c1 : T = initF!{T}, d1 : T = initF!{T},
                  a2 : T = initF!{T}, b2 : T = init1F!{T}, c2 : T = initF!{T}, d2 : T = initF!{T},
                  a3 : T = initF!{T}, b3 : T = initF!{T}, c3 : T = init1F!{T}, d3 : T = initF!{T},
                  a4 : T = initF!{T}, b4 : T = initF!{T}, c4 : T = initF!{T}, d4 : T = init1F!{T})
            with a1 = a1, b1 = b1, c1 = c1, d1 = d1
            , a2 = a2, b2 = b2, c2 = c2, d2 = d2
            , a3 = a3, b3 = b3, c3 = c3, d3 = d3
            , a4 = a4, b4 = b4, c4 = c4, d4 = d4
        {}
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          EXTRACTION          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub fn mat2 (self)-> Matrix!{2u32, T} {
        Matrix!{2u32, T} (a1-> self.a1, b1-> self.b1,
                          a2-> self.a2, b2-> self.b2)
    }

    cte if N > 2 {
        pub fn mat3 (self)-> Matrix!{3u32, T} {
            Matrix!{3u32, T} (a1-> self.a1, b1-> self.b1, c1-> self.c1,
                              a2-> self.a2, b2-> self.b2, c2-> self.c2,
                              a3-> self.a3, b3-> self.b3, c3-> self.c3)
        }
    }

    cte if N > 3 {
        pub fn mat4 (self)-> Matrix!{4u32, T} {
            self
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          BINARY SCALAR          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    // /**
    //  * binary operator of a matrix and a scalar
    //  */
    // pub fn opBinary {op : [c8]} (self, factor : T)-> Matrix!{N, T} {
    //     let dmut res = Matrix!{N, T} ();
    //     let infos = __pragma!field_infos (Matrix!{N, T});
    //     cte for i in 0 .. infos.len {
    //         cte if op == "*" {
    //             __pragma!field (res, infos [i].name) = __pragma!field (self, infos [i].name) * factor;
    //         }
    //         else cte if op == "/" {
    //             __pragma!field (res, infos [i].name) = __pragma!field (self, infos [i].name) / factor;
    //         }
    //         else cte if op == "+" {
    //             __pragma!field (res, infos [i].name) = __pragma!field (self, infos [i].name) + factor;
    //         }
    //         else cte if op == "-" {
    //             __pragma!field (res, infos [i].name) = __pragma!field (self, infos [i].name) - factor;
    //         }
    //         else {
    //             cte assert (false, "No operator " ~ op ~ "for matrix and " ~ T::typeid);
    //         }
    //     }

    //     res
    // }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          BINARY VECTOR          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    // /**
    //  * Binary operator of a matrix and a vector
    //  */
    // pub fn opBinary {"*"} (self, v : Vector!{N, T})-> Vector!{N, T} {
    //     let dmut res = Vector!{N, T} ();
    //     let m_infos = __pragma!field_infos (Matrix!{N, T});
    //     let v_infos = __pragma!field_infos (U);

    //     cte for i in 0u32 .. N {
    //         let mut sum : T = initF!{T};
    //         cte for j in 0u32 .. N {
    //             let ia = __pragma!field (self, m_infos [j * N + i].name);
    //             let b = __pragma!field (v, v_infos [j].name);

    //             sum += ia * b;
    //         }

    //         __pragma!field (res, v_infos [i].name) = sum;
    //     }

    //     res
    // }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ================================          BINARY MATRICES          =================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Addition two matrices
     */
    pub fn opBinary {op : [c8]} (self, b : Matrix!{N, T})-> Matrix!{N, T} {
        let dmut res = Matrix!{N, T} ();
        let infos = __pragma!field_infos (Matrix!{N, T});
        cte if op == "+" || op == "-" {
            cte for i in 0 .. infos.len {
                cte if op == "+" {
                    __pragma!field (res, infos [i].name) = __pragma!field (self, infos [i].name) + __pragma!field (b, infos [i].name);
                } else {
                    __pragma!field (res, infos [i].name) = __pragma!field (self, infos [i].name) - __pragma!field (b, infos [i].name);
                }
            }
        }
        else cte if op == "*" {
            cte for i in 0 .. N {
                cte for j in 0 .. N {
                    let mut sum : T = initF!{T};
                    cte for k in 0 .. N {
                        let ia = __pragma!field (self, infos [k * N + i].name);
                        let ib = __pragma!field (b, infos [j * N + k].name);
                        sum += ia * ib;
                    }

                    __pragma!field (res, infos [j * N + i].name) = sum;
                }
            }
        }
        else {
            cte assert (false, "No operator " ~ op ~ "for two matrices");
        }

        res
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          INVERSION          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */


    /**
     * @returns: the inverted copy of a matrix 2
     * @throws: &MatrixError, if the matrix is not invertible
     */
    pub fn inversed (self)-> Matrix!{N, T} {
        cte if N == 2 {
            let mut det = self.a1 * self.b2 - self.b1 * self.a2;
            if (det == initF!{T}) return Matrix!{N, T} ();

            let invDet = init1F!{T} / det;
            makeMat2 (self.b2 * invDet, -self.b1 * invDet,
                      -self.a2 * invDet, self.a1 * invDet)
        }

        else cte if N == 3 {
            let mut det = self.a1 * (self.b2 * self.c3 - self.c2 * self.b3)
                - self.b1 * (self.a2 * self.c3 - self.c2 * self.a3)
                + self.c1 * (self.a2 * self.b3 - self.b2 * self.a3);

            if (det == initF!{T}) return Matrix!{N, T} ();

            let invDet = init1F!{T} / det;
            makeMat3 (
                (self.b2 * self.c3 - self.b3 * self.c2) * invDet,
                -(self.b1 * self.c3 - self.c1 * self.b3) * invDet,
                (self.b1 * self.c2 - self.c1 * self.b2) * invDet,
                -(self.a2 * self.c3 - self.c2 * self.a3) * invDet,
                (self.a1 * self.c3 - self.c1 * self.a3) * invDet,
                -(self.a1 * self.c2 - self.a2 * self.c1) * invDet,
                (self.a2 * self.b3 - self.a3 * self.b2) * invDet,
                -(self.a1 * self.b3 - self.a3 * self.b1) * invDet,
                (self.a1 * self.b2 - self.a2 * self.b1) * invDet)
        }

        else {
            let dmut t : [T ; 6] = [initF!{T} ; 6];
            let a = self.a1, b = self.b1, c = self.c1, d = self.d1;
            let e = self.a2, f = self.b2, g = self.c2, h = self.d2;
            let i = self.a3, j = self.b3, k = self.c3, l = self.d3;
            let m = self.a4, n = self.b4, o = self.c4, p = self.d4;

            let dmut dest : [T ; 16] = [initF!{T} ; 16];

            t[0] = k * p - o * l; t[1] = j * p - n * l; t[2] = j * o - n * k;
            t[3] = i * p - m * l; t[4] = i * o - m * k; t[5] = i * n - m * j;

            dest[0] =   f * t[0] - g * t[1] + h * t[2];
            dest[4] = -(e * t[0] - g * t[3] + h * t[4]);
            dest[8] =   e * t[1] - f * t[3] + h * t[5];
            dest[12] = -(e * t[2] - f * t[4] + g * t[5]);

            dest[1] = -(b * t[0] - c * t[1] + d * t[2]);
            dest[5] =   a * t[0] - c * t[3] + d * t[4];
            dest[9] = -(a * t[1] - b * t[3] + d * t[5]);
            dest[13] =   a * t[2] - b * t[4] + c * t[5];

            t[0] = g * p - o * h; t[1] = f * p - n * h; t[2] = f * o - n * g;
            t[3] = e * p - m * h; t[4] = e * o - m * g; t[5] = e * n - m * f;

            dest[2] =   b * t[0] - c * t[1] + d * t[2];
            dest[6] = -(a * t[0] - c * t[3] + d * t[4]);
            dest[10] =   a * t[1] - b * t[3] + d * t[5];
            dest[14] = -(a * t[2] - b * t[4] + c * t[5]);

            t[0] = g * l - k * h; t[1] = f * l - j * h; t[2] = f * k - j * g;
            t[3] = e * l - i * h; t[4] = e * k - i * g; t[5] = e * j - i * f;

            dest[3]  = -(b * t[0] - c * t[1] + d * t[2]);
            dest[7]  =   a * t[0] - c * t[3] + d * t[4];
            dest[11] = -(a * t[1] - b * t[3] + d * t[5]);
            dest[15] =   a * t[2] - b * t[4] + c * t[5];

            let mut preDet = (a * dest[0] + b * dest[4] + c * dest[8] + d * dest[12]);
            if (preDet == initF!{T}) return Matrix!{N, T} ();

            let det = init1F!{T} / preDet;
            return makeMat4 (dest[0] * det, dest[1] * det, dest[2] * det, dest[3] * det,
                             dest[4] * det, dest[5] * det, dest[6] * det, dest[7] * det,
                             dest[8] * det, dest[9] * det, dest[10] * det, dest[11] * det,
                             dest[12] * det, dest[13] * det, dest[14] * det, dest[15] * det);

        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          TRANSPOSIION          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the transposed copy of a matrix
     */
    pub fn transposed (self)-> Matrix!{N, T} {
        let dmut res = Matrix!{N, T} ();
        let infos = __pragma!field_infos (Matrix!{N, T});

        cte for i in 0 .. N {
            cte for j in 0 .. N {
                let ia = __pragma!field (self, infos [j * N + i].name);
                __pragma!field (res, infos [i * N + j].name) = ia;
            }
        }

        res
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          COMPARISON          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */


    /**
     * Aompare two matriaes
     * @returns: true if a and b are equals
     */
    pub fn opEquals (self, o : Matrix!{N, T})-> bool {
        let infos = __pragma!field_infos (Matrix!{N, T});
        cte for i in 0 .. infos.len {
            if __pragma!field (self, infos [i].name) != __pragma!field (o, infos [i].name) {
                return false;
            }
        }

        true
    }

}
