in vector;

use std::{math, traits};

/*!
 * ====================================================================================================
 * ====================================================================================================
 * =====================================          BASES          ======================================
 * ====================================================================================================
 * ====================================================================================================
 */

pub def vec3 : Vector!{3u32, f32};
pub def ivec3 : Vector!{3u32, i32};
pub def uvec3 : Vector!{3u32, u32};

pub def vec4 : Vector!{4u32, f32};
pub def ivec4 : Vector!{4u32, i32};
pub def uvec4 : Vector!{4u32, u32};


pub def vec2 : Vector!{2u32, f32};
pub def ivec2 : Vector!{2u32, i32};
pub def uvec2 : Vector!{2u32, u32};


pub fn makeVec2 {T} (x : T, y : T)-> Vector!{2u32, T} {
    Vector!{2u32, T} (x-> x, y-> y)
}

pub fn makeVec3 {T} (x : T, y : T, z : T)-> Vector!{3u32, T} {
    Vector!{3u32, T} (x-> x, y-> y, z-> z)
}

pub fn makeVec4 {T} (x : T, y : T, z : T, w : T)-> Vector!{4u32, T} {
    Vector!{4u32, T} (x-> x, y-> y, z-> z, w-> w)
}

/*!
 * ====================================================================================================
 * ====================================================================================================
 * =================================          TEMPLATE TESTS          =================================
 * ====================================================================================================
 * ====================================================================================================
 */

pub def isVectorF {T} = is!{T}{U of Vector!{N, f32}, N : u32};
pub def isVectorI {T} = is!{T}{U of Vector!{N, i32}, N : u32};
pub def isVectorU {T} = is!{T}{U of Vector!{N, u32}, N : u32};

pub def isVector {T} = is!{T}{Z of Vector!{N, U}, N : u32, U};
pub def isVectorBigger {N : u32, T} = (isVector!{T}) && (arity!{T} >= N);
pub def isVectorOf {T, U} = is!{T}{Z of Vector!{N, U}, N : u32};

pub def arity {T of Vector!{N, U}, N : u32, U} = N;


/*!
 * ====================================================================================================
 * ====================================================================================================
 * =====================================          CLASS          ======================================
 * ====================================================================================================
 * ====================================================================================================
 */

def initF {T} = cte if isFloating!{T} { 0.f } else { 0 };

pub record Vector {N : u32, T} {
    pub let mut x : T;
    pub let mut y : T;
    cte if N > 2 { pub let mut z : T; }
    cte if N > 3 { pub let mut w : T; }

    cte if N == 2 {
        pub self (x : T = initF!{T}, y : T = initF!{T})
            with x = x, y = y
        {}
    }

    cte if N == 3 {
        pub self (x : T = initF!{T}, y : T = initF!{T}, z : T = initF!{T})
            with x = x, y = y, z = z
        {}
    }

    cte if N == 4 {
        pub self (x : T = initF!{T}, y : T = initF!{T}, z : T = initF!{T}, w : T = initF!{T})
            with x = x, y = y, z = z, w = w
        {}
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          EXTRACTION          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub fn xy (self)-> Vector!{2u32, T} {
        Vector!{2u32, T} (x-> self.x, y-> self.y)
    }

    cte if N >= 3 {
        pub fn xyz (self)-> Vector!{3u32, T} {
            Vector!{3u32, T} (x-> self.x, y-> self.y, z-> self.z)
        }
    }

    cte if N >= 4 {
        pub fn xyzw (self)-> Vector!{4u32, T} {
            Vector!{4u32, T} (x-> self.x, y-> self.y, z-> self.z, w-> self.w)
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          UNARY          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub fn opUnary {"-"} (self)-> Vector!{N, T} {
        cte if N == 2 {
            Vector!{2u32, T} (x-> -self.x, y-> -self.y)
        }

        else cte if N == 3 {
            Vector!{3u32, T} (x-> -self.x, y-> -self.y, z-> -self.z)
        }

        else {
            Vector!{4u32, T} (x-> -self.x, y-> -self.y, z-> -self.z, w-> -self.w)
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          FLOATING POINT          =================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @return: a normalize version of a vector
     */
    pub fn normalized (self)-> Vector!{N, T} {
        self / self.length ()
    }

    /**
     * @returns: the lenght of a vector
     */
    pub fn length (self)-> T {
        let mut res : T = initF!{T};
        let infos = __pragma!field_infos (Vector!{N, T});
        cte for i in 0 .. infos.len {
            let f = (__pragma!field (self, infos [i].name));
            res += f * f;
        }

        cte if isFloating!{T} {
            core::math::sqrt (res)
        } else {
            cast!T (core::math::sqrt (cast!fsize (res)))
        }
    }

    /**
     * @return: the distance between two vectors
     */
    pub fn distance (self, u : Vector!{N, T})-> T {
        (u.opBinary!{"-"} (self)).length ()
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          BINARY SCALAR          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Binary operation between a vector and a scalar
     * @returns: the result vector
     */
    pub fn opBinary {op : [c8]} (self, u : T)-> Vector!{N, T} {
        let dmut res = Vector!{N, T} ();
        let infos = __pragma!field_infos (Vector!{N, T});
        cte for i in 0us .. infos.len {
            cte if op == "+" {
                __pragma!field (res, infos [i].name) = __pragma!field (self, infos [i].name) + u;
            }
            else cte if op == "-" {
                __pragma!field (res, infos [i].name) = __pragma!field (self, infos [i].name) - u;
            }
            else cte if op == "/" {
                __pragma!field (res, infos [i].name) = __pragma!field (self, infos [i].name) / u;
            }
            else cte if op == "*" {
                __pragma!field (res, infos [i].name) = __pragma!field (self, infos [i].name) * u;
            }
            else {
                cte assert (false, "No operator " ~ op ~ "for vector and " ~ T::typeid);
            }
        }

        res
    }

    /**
     * Binary operation between a vector and a scalar
     * @returns: the result vector
     */
    pub fn opBinaryRight {op : [c8]} (self, u : T)-> Vector!{N, T} {
        let dmut res = Vector!{N, T} ();
        let infos = __pragma!field_infos (Vector!{N, T});
        cte for i in 0us .. infos.len {
            cte if op == "+" {
                __pragma!field (res, infos [i].name) = u + __pragma!field (self, infos [i].name);
            }
            else cte if op == "-" {
                __pragma!field (res, infos [i].name) = u - __pragma!field (self, infos [i].name);
            }
            else cte if op == "/" {
                __pragma!field (res, infos [i].name) = u / __pragma!field (self, infos [i].name);
            }
            else cte if op == "*" {
                __pragma!field (res, infos [i].name) = u * __pragma!field (self, infos [i].name) ;
            }
            else {
                cte assert (false, "No operator " ~ op ~ "for vector and " ~ T::typeid);
            }
        }

        res
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          BINARY VECTOR          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Binary operation between two vectors
     * @returns: the result vector
     */
    pub fn opBinary {op : [c8]} (self, u : typeof (self))-> Vector!{N, T} {
        let dmut res = Vector!{N, T} ();
        let infos = __pragma!field_infos (Vector!{N, T});

        cte for i in 0us .. infos.len {
            cte if op == "+" {
                __pragma!field (res, infos [i].name) = __pragma!field (self, infos [i].name) + __pragma!field (u, infos [i].name);
            }
            else cte if op == "-" {
                __pragma!field (res, infos [i].name) = __pragma!field (self, infos [i].name) - __pragma!field (u, infos [i].name);
            }
            else cte if op == "/" {
                __pragma!field (res, infos [i].name) = __pragma!field (self, infos [i].name) / __pragma!field (u, infos [i].name);
            }
            else cte if op == "*" {
                __pragma!field (res, infos [i].name) = __pragma!field (self, infos [i].name) * __pragma!field (u, infos [i].name);
            }
            else {
                cte assert (false, "No operator " ~ op ~ "for two vectors");
            }
        }

        res
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          DOT AND CROSS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Dot product of two vectors
     * @returns: the result vector
     */
    pub fn dot (self, u : Vector!{N, T})-> T {
        let mut sum : T = initF!{T};

        let infos = __pragma!field_infos (Vector!{N, T});
        cte for i in 0us .. infos.len {
            sum += __pragma!field (self, infos [i].name) * __pragma!field (u, infos [i].name);
        }

        sum
    }

    cte if N == 3 {
        /**
         * Cross product of two vectors
         * @returns: the result vector
         */
        pub fn cross (self, u : Vector!{N, T})-> Vector!{N, T} {
            makeVec3 (self.y * u.z - self.z * u.y,
                      self.z * u.x - self.x * u.z,
                      self.x * u.y - self.y * u.x)
        }
    }

    /**
     * reflect of two vectors
     * @returns: the result vector
     */
    pub fn reflect (self, u : Vector!{N, T})-> Vector!{N, T}  {
        cte if isFloating!{T} {
            self - (2.f * u.dot (self)) * u
        } else {
            self - (2 * u.dot (self)) * u
        }
    }

    cte if isFloating!{T} {
        pub fn angle {T} (self, u : Vector!{T})-> T {
            let aN = v.normalized ();
            let bN = u.normalized ();
            let dp = aN.dot (bN);

            if (dp < 0.f)
                return cast!T (PI) - 2.f * math::asin (((-bN) - aN).length () / 2.f);
            else
                return 2.f * math::asin ((bN - aN).length () / 2.f);
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          COMPARISON          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Compare two vectors
     * @returns: true if v and u are equals
     */
    pub fn opEquals (self, u : Vector!{N, T})-> bool {
        let infos = __pragma!field_infos (Vector!{N, T});
        cte for i in 0 .. infos.len {
            if __pragma!field (self, infos [i].name) != __pragma!field (u, infos [i].name) {
                return false;
            }
        }

        true
    }

}
