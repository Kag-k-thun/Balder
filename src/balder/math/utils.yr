in utils;

use balder::math::{matrix, vector};
use std::{traits, math};

def initF {T} = cte if isFloating!{T} { 0.f } else { 0 };
def init1F {T} = cte if isFloating!{T} { 1.f } else { 1 };

/*!
 * ====================================================================================================
 * ====================================================================================================
 * ==========================          SPECIAL MATRIX CONSTRUCTIONS          ==========================
 * ====================================================================================================
 * ====================================================================================================
 */

pub fn if isFloating!{T} radian {T} (angle : T)-> T {
    angle / cast!{T} (180.f) * cast!T (std::math::PI)
}

pub fn if isFloating!{T} degree {T} (angle : T)-> T {
    angle / cast!T (std::math::PI) * cast!{T} (180.f)
}

/**
 * Construct a diagonal matrix from a vector
 */
pub fn diag {N : u32, T} (v : Vector!{N, T})-> Matrix!{N, T} {
    let mut res = Matrix!{N, T} ();
    let m_infos = __pragma!field_infos (Matrix!{N, T});
    let v_infos = __pragma!field_infos (Vector!{N, T});

    cte for i in 0 .. N {
        cte for j in 0 .. N {
            if (i == j) {
                __pragma!field (res, m_infos [i * N + j].name) = __pragma!field (v, v_infos [i].name);
            } else {
                __pragma!field (res, m_infos [i * N + j].name) = initF!{T};
            }
        }
    }

    res
}

/**
 * @returns: a translation matrix from a vector
 */
pub fn translation {N : u32, T} (v : Vector!{N, T})-> Matrix!{N + 1u32, T}  {
    let dmut res = Matrix!{N + 1u32, T} ();
    let m_infos = __pragma!field_infos (typeof (res));
    let v_infos = __pragma!field_infos (Vector!{N, T});

    cte for i in 0 .. N {
        __pragma!field (res, m_infos [N * (N + 1) + i].name) = __pragma!field (v, v_infos [i].name);
    }

    res
}

/**
 * @returns: a scaling matrix from a vector
 */
pub fn scaling {N : u32, T} (v : Vector!{N, T})-> Matrix!{N + 1u32, T}  {
    let dmut res = Matrix!{N + 1u32, T} ();
    let m_infos = __pragma!field_infos (typeof (res));
    let v_infos = __pragma!field_infos (Vector!{N, T});

    cte for i in 0 .. N {
        __pragma!field (res, m_infos [i * (N + 1) + i].name) = __pragma!field (v, v_infos [i].name);
    }

    res
}

/**
 * @returns: a rotation matrix from an angle (in radian) and an axis
 */
pub fn if isFloating!{T} rotation {T} (angle : T, axis : Vector!{3u32, T})-> Matrix!{4u32, T}  {
    let c = cos (angle);
    let oneMinusC = init1F!{T} - c;
    let s = sin (angle);
    let n = axis.normalized ();

    let x = n.x, y = n.y, z = n.z;

    Matrix!{4u32, T} (
        a1-> x * x * oneMinusC + c,
        a2-> x * y * oneMinusC - z * s,
        a3-> x * z * oneMinusC + y * s,
        b1-> y * x * oneMinusC + z * s,
        b2-> y * y * oneMinusC + c,
        b3-> y * z * oneMinusC - x * s,
        c1-> z * x * oneMinusC - y * s,
        c2-> z * y * oneMinusC + x * s,
        c3-> z * z * oneMinusC + c)
}


/**
 * Rotate along a the X axis
 * @returns: the rotation matrix along the x axis
 */
pub fn if isFloating!{T} rotationX {T} (angle : T)-> Matrix!{4u32, T} {
    let cosa = cos (angle);
    let sina = sin (angle);

    Matrix!{4u32, T} (
        b2-> cosa,
        b3-> -sina,
        c2-> sina,
        c3-> cosa)
}

/**
 * Rotate along a the X axis
 * @returns: the rotation matrix along the x axis
 */
pub fn if isFloating!{T} rotationY {T} (angle : T)-> Matrix!{4u32, T} {
    let cosa = cos (angle);
    let sina = sin (angle);
    Matrix!{4u32, T} (
        c3-> cosa,
        c1-> -sina,
        a3-> sina,
        a1-> cosa)
}

/**
 * Rotate along a the Z axis
 * @returns: the rotation matrix along the x axis
 */
pub fn if isFloating!{T} rotationZ {T} (angle : T)-> Matrix!{4u32, T} {
    let cosa = cos (angle);
    let sina = sin (angle);
    Matrix!{4u32, T} (
        a1-> cosa,
        a2-> -sina,
        b1-> sina,
        b2-> cosa)
}

/**
 * Rotate along a the Z axis in a 2D environment
 * @returns: the rotation matrix along the x axis
 */
pub fn if isFloating!{T} rotationZ2 {T} (angle : T)-> Matrix!{2u32, T} {
    let cosa = cos (angle);
    let sina = sin (angle);

    Matrix!{2u32, T} (
        a1-> cosa,
        a2-> -sina,
        b1-> sina,
        b2-> cosa)
}

/**
 * @returns: the angle of the rotation of a 2D rotation matrix
 * */
pub fn if isFloating!{T} angleZ2 {T} (mat : Matrix!{2u32, T})-> T {
    acos (mat.a1)
}

/*!
 * ====================================================================================================
 * ====================================================================================================
 * ==============================          PROJECTION MATRICES          ===============================
 * ====================================================================================================
 * ====================================================================================================
 */



/**
 * @returns: a matrix of orthopgraphic projection
 */
pub fn if isFloating!{T} ortho {T} (left : T, right : T, bottom : T, top : T, near : T, far : T)-> Matrix!{4u32, T} {
    let dx = right - left, dy = top - bottom, dz = far - near;

    let tx = -(right + left) / dx;
    let ty = -(top + bottom) / dy;
    let tz = -(far + near)   / dz;

    makeMat4 (2.f / dx,   initF!{T},      initF!{T},    initF!{T},
              initF!{T},    2.f / dy,   initF!{T},    initF!{T},
              initF!{T},      initF!{T},   -2.f / dz, initF!{T},
              tx,      ty,      tz,     init1F!{T})
}

/**
 * @returns: a matrix of perspective projection
 * @params:
 *  - fov: fov angle in radians
 */
pub fn if isFloating!{T} perspective {T} (fov : T, aspect : T, near : T, far : T)-> Matrix!{4u32, T} {
    let f = init1F!{T} / math::tan (fov / 2.f);
    let d = init1F!{T} / (near - far);

    makeMat4 (f / aspect, initF!{T}, initF!{T},                     initF!{T},
              initF!{T},        f,   initF!{T},                     initF!{T},
              initF!{T},        initF!{T}, (far + near) * d,     -init1F!{T},
              initF!{T},        initF!{T}, 2.f * d * far * near,  initF!{T})
}

/**
 * @returns: a matrix of look at projection
 */
pub fn if isFloating!{T} lookAt {T} (eye : Vector!{3u32, T}, target : Vector!{3u32, T}, up : Vector!{3u32, T})-> Matrix!{4u32, T} {
    let Z = (eye - target).normalized ();
    let X = (-up).cross (Z).normalized ();
    let Y = Z.cross (-X);

    makeMat4 (a1-> -X.x,
              a2-> -X.y,
              a3-> -X.z,
              a4 -> X.dot(eye),

              b1-> Y.x,
              b2-> Y.y,
              b3-> Y.z,
              b4-> -(Y.dot(eye)),

              c1-> Z.x,
              c2-> Z.y,
              c3-> Z.z,
              c4-> -(Z.dot(eye)),

              d1-> initF!{T},
              d2-> initF!{T},
              d3-> initF!{T},
              d4-> init1F!{T})
}
