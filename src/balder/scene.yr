in scene;

pub mod ::node;

use balder::core::_;
use balder::core::{application::_, shader::_, driver::_};
use balder::scene::node::node3D::visual;

use balder::utils::_;

use std::fs::path;


@final
pub class Scene {

    prot {
        // The window to which the scene is attached
        let dmut _window : &Window;

        // The subpass generating the final scene image
        let dmut _vk : (&VulkanSubpass)? = none;

        // The name of the scene
        let _name : [c8];

        // The width of the generated texture
        let _width : u32;

        // The height of the generated texture
        let _height : u32;
    }

    prot {
        // The list of shaders loaded by the 3D scene
        let dmut _shaders : [[c8] => &Shader] = copy [];

        // The shader to mesh association
        let dmut _nodeAssoc : [[c8] => [usize => &VisualInstance3D]] = copy [];

        // The list of meshes casting shadow
        let dmut _shadowMeshes : [usize => &VisualInstance3D] = copy [];

        // The uniq id of the attached visual instances attached to the scene
        let dmut _uniqInstanceIds : usize = 1us;
    }

    prot {
        // The root node of the scene
        let dmut _rootNode : &Node = copy Node ("");

        // The list of nodes in the scene (flattened out)
        let dmut _nodes : [Path => &Node] = copy [];
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          CTORS          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create a new scene
     * */
    pub self (dmut window : &Window, name : [c8], width : u32, height : u32)
        with _window = alias window
        , _name = name
        , _width = width
        , _height = height
        throws BalderError
    {
        self:.configure ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          CONFIGURATION          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Configure the scene and load the basic shaders, and subpasses
     * */
    fn configure (mut self)
        throws BalderError
    {
        self._window:.addSubpass (name-> "scene_" ~ self._name,
                                  loadPhase-> &self:.composeLoadPhase,
                                  drawPhase-> &self:.composeDrawPhase,
                                  width-> self._width,
                                  height-> self._height,
                                  onlyDepth-> false);

        self._vk = (alias self._window:.getSubpass ("scene_" ~ self._name))?;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the root node of the scene
     * */
    pub fn getRootNode (mut self)-> dmut &Node {
        alias self._rootNode
    }

    /**
     * @returns: the generated color texture of the scene
     * */
    pub fn getColorTexture (mut self)-> dmut &ColorTexture {
        if let Ok (dmut vk : &VulkanColorSubpass) = alias self._vk {
            return vk:.getColor ();
        }

        panic;
    }

    /**
     * @returns: the generated depth texture of the scene
     * */
    pub fn getDepthTexture (mut self)-> dmut &DepthTexture {
        if let Ok (dmut vk : &VulkanColorSubpass) = alias self._vk {
            return vk:.getDepth ();
        }

        panic;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          DRAWING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Update the indirect command buffer to draw the correct number of triangles
     * */
    fn composeLoadPhase (mut self, dmut cmd : &IndirectCommandAllocator) {
        cmd;
    }

    /**
     * Draw the visual instances on the output compose texture
     * */
    fn composeDrawPhase (mut self, dmut cmd : &IndirectCommandAllocator) {
        cmd;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===========================          NODE ATTACHEMENT/REMOVING          ============================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Attach a node in the rendering scene
     * */
    pub fn attach (mut self, dmut node : &Node) {
        self._nodes [node.getName ()] = alias node;
        if let Ok (dmut sub) = alias self._vk {
            if let dmut vi : &VisualInstance3D = alias node {
                let dmut uid = self._uniqInstanceIds;
                vi:.setUID (uid);

                self._uniqInstanceIds += 1;

                if vi.castShadow () {
                    self._shadowMeshes [uid] = alias vi;
                }

                let shCfg = vi.material.shaderConfig;
                {
                    if shCfg.name !in self._shaders {
                        let dmut shader = copy SubpassShader (alias self._window:.getVulkanDevice (),
                                                              shCfg,
                                                              sub);

                        self._shaders [shCfg.name] = alias shader;
                        vi:.attach (alias shader);
                    }
                    else if let Ok (dmut sh) = alias self._shaders [shCfg.name] {
                        vi:.attach (alias sh);
                    }

                    if let Ok (dmut inner) = alias self._nodeAssoc [shCfg.name] {
                        inner [uid] = alias vi;
                    } else {
                        self._nodeAssoc [shCfg.name] = copy [uid => alias vi];
                    }
                } catch {
                    err => {
                        log::error ("Failed to attach visual instance ", err);
                        self._nodes:.remove (node.getName ());
                    }
                }
            }
        }
    }

    /**
     * Detach a node from the rendering scene
     * */
    pub fn detach (mut self, dmut node : &Node) {
        self._nodes:.remove (node.getName ());
        if let dmut vi : &VisualInstance3D = alias node {
            let shCfg = vi.material.shaderConfig;
            vi:.detach ();

            self._shadowMeshes:.remove (vi.uid);
            if let Ok (dmut inner) = alias self._nodeAssoc [shCfg.name] {
                inner:.remove (vi.uid);
                if inner.len == 0us {
                    if let Ok (dmut sh) = alias self._shaders [shCfg.name] {
                        sh:.dispose ();
                        self._shaders:.remove (shCfg.name);
                    }
                    self._nodeAssoc:.remove (shCfg.name);
                }
            }
        }
    }


}
