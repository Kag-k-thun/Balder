in log;

use std::{io, conv, stream, traits, format, time::_};
use balder::utils::colors;

enum : [c8]
| SUCCESS = "Success"
| FAILURE = "Failure"
| INFO    = "Info"
| DEBUG   = "Debug"
| WARN    = "Warn"
| ERROR   = "Error"
 -> LoggingMods;

enum
| NONE    = 0
| ERROR   = 1
| SUCCESS = 2
| WARN    = 3
| INFO    = 4
| DEBUG   = 5
| ALL     = 6
 -> LogLevel;

lazy dmut __start__ : [Instant] = copy [Instant::now ()];
lazy dmut __log_level__ : [LogLevel] = copy [LogLevel::ALL];

fn getInstant ()-> Duration {
    (Instant::now () - __start__ [0])
}

fn setLogLevel (level : LogLevel) {
    __log_level__ [0] = level;
}

fn getLogLevel ()-> LogLevel {
    __log_level__ [0]
}


/*!
 * ====================================================================================================
 * ====================================================================================================
 * =====================================          DEBUG          ======================================
 * ====================================================================================================
 * ====================================================================================================
 */

pub fn debug {T...} (params : T) atomic {
    if __log_level__ [0] >= LogLevel::DEBUG {
        cte if (T,)::arity == 1 {
            println (format ("[{0}{1}{4}] : {2}{3}{4} => ", Colors::PURPLE, LoggingMods::DEBUG, Colors::BOLD, getInstant (), Colors::RESET), params);
        } else {
            println (format ("[{0}{1}{4}] : {2}{3}{4} => ", Colors::PURPLE, LoggingMods::DEBUG, Colors::BOLD, getInstant (), Colors::RESET), expand params);
        }
    } catch { _ => {} }
}

/*!
 * ====================================================================================================
 * ====================================================================================================
 * ======================================          INFO          ======================================
 * ====================================================================================================
 * ====================================================================================================
 */

pub fn info {T...} (params : T) atomic {
    if __log_level__ [0] >= LogLevel::INFO {
        cte if (T,)::arity == 1 {
            println (format ("[{0}{1}{4}] : {2}{3}{4} => ", Colors::BLUE, LoggingMods::INFO, Colors::BOLD, getInstant (), Colors::RESET), params);
        } else {
            println (format ("[{0}{1}{4}] : {2}{3}{4} => ", Colors::BLUE, LoggingMods::INFO, Colors::BOLD, getInstant (), Colors::RESET), expand params);
        }
    } catch { _ => {} }
}

/*!
 * ====================================================================================================
 * ====================================================================================================
 * =====================================          ERROR          ======================================
 * ====================================================================================================
 * ====================================================================================================
 */

pub fn error {T...} (params : T) atomic {
    if __log_level__ [0] >= LogLevel::ERROR {
        cte if (T,)::arity == 1 {
            println (format ("[{0}{1}{4}] : {2}{3}{4} => ", Colors::RED, LoggingMods::ERROR, Colors::BOLD, getInstant (), Colors::RESET), params);
        } else {
            println (format ("[{0}{1}{0}] : {2}{3}{4} => ", Colors::RED, LoggingMods::ERROR, Colors::BOLD, getInstant (), Colors::RESET), expand params);
        }
    } catch { _ => {} }
}


/*!
 * ====================================================================================================
 * ====================================================================================================
 * ======================================          WARN          ======================================
 * ====================================================================================================
 * ====================================================================================================
 */

pub fn warn {T...} (params : T) atomic {
    if __log_level__ [0] >= LogLevel::WARN {
        cte if (T,)::arity == 1 {
            println (format ("[{0}{1}{4}] : {2}{3}{4} => ", Colors::ORANGE, LoggingMods::WARN, Colors::BOLD, getInstant (), Colors::RESET), params);
        } else {
            println (format ("[{0}{1}{4}] : {2}{3}{4} => ", Colors::ORANGE, LoggingMods::WARN, Colors::BOLD, getInstant (), Colors::RESET), expand params);
        }
    } catch { _ => {} }
}

/*!
 * ====================================================================================================
 * ====================================================================================================
 * ====================================          SUCCESS          =====================================
 * ====================================================================================================
 * ====================================================================================================
 */

pub fn success {T...} (params : T) atomic {
    if __log_level__ [0] >= LogLevel::SUCCESS {
        cte if (T,)::arity == 1 {
            println (format ("[{0}{1}{4}] : {2}{3}{4} => ", Colors::GREEN, LoggingMods::SUCCESS, Colors::BOLD, getInstant (), Colors::RESET), params);
        } else {
            println (format ("[{0}{1}{4}] : {2}{3}{4} => ", Colors::GREEN, LoggingMods::SUCCESS, Colors::BOLD, getInstant (), Colors::RESET), expand params);
        }
    } catch { _ => {} }
}
