in log;

use std::{io, conv, stream, traits, format, time::_};
use balder::utils::colors;

enum : [c8]
| SUCCESS = "Success"
| FAILURE = "Failure"
| INFO    = "Info"
| DEBUG   = "Debug"
| WARN    = "Warn"
| ERROR   = "Error"
 -> LoggingMods;

enum
| NONE    = 0
| ERROR   = 1
| SUCCESS = 2
| WARN    = 3
| INFO    = 4
| DEBUG   = 5
| ALL     = 6
 -> LogLevel;

lazy dmut __log_level__ : [LogLevel] = __version DEBUG {
    copy [LogLevel::ALL]
} else {
    copy [LogLevel::INFO]
};

lazy dmut __filter_out__ : [[c8] => ()] = copy [];


fn setLogLevel (level : LogLevel) {
    __log_level__ [0] = level;
}

fn getLogLevel ()-> LogLevel {
    __log_level__ [0]
}

/*!
 * ====================================================================================================
 * ====================================================================================================
 * ===================================          FILTERING          ====================================
 * ====================================================================================================
 * ====================================================================================================
 */

/**
 * Add a log filter to disable logs displayed by that class
 * */
pub fn addLogFilter (name : [c8]) {
    __filter_out__ [name] = ();
}

/**
 * Remove a log filter to reenable logs displayed by that class
 * */
pub fn removeLogFilter (name : [c8]) {
    __filter_out__:.remove (name);
}

/*!
 * ====================================================================================================
 * ====================================================================================================
 * =====================================          DEBUG          ======================================
 * ====================================================================================================
 * ====================================================================================================
 */

pub macro debug {
    self (head=__expr b=("," inner=__expr)*) {
        __version DEBUG {
            atomic {
                if __log_level__ [0] >= LogLevel::DEBUG {
                    if #{head} !in __filter_out__ {
                        print (format ("{: <25} | ", DateTime (Instant::now ())))?;
                        print (Colors::PURPLE, #{head}, Colors::RESET);
                        #(for i in b) {
                            print (" ", #{i::inner});
                        }
                        println ();
                    }
                }
            }
        }
    }
}

/*!
 * ====================================================================================================
 * ====================================================================================================
 * ======================================          INFO          ======================================
 * ====================================================================================================
 * ====================================================================================================
 */

pub macro info {
    self (head=__expr b=("," inner=__expr)*) {
        atomic {
            if __log_level__ [0] >= LogLevel::INFO {
                if #{head} !in __filter_out__ {
                    print (format ("{: <25} | ", DateTime (Instant::now ())))?;
                    print (Colors::BLUE, #{head}, Colors::RESET);
                    #(for i in b) {
                        print (" ", #{i::inner});
                    }
                    println ();
                }
            }
        }
    }
}

/*!
 * ====================================================================================================
 * ====================================================================================================
 * ======================================          WARN          ======================================
 * ====================================================================================================
 * ====================================================================================================
 */

pub macro warn {
    self (head=__expr b=("," inner=__expr)*) {
        atomic {
            if __log_level__ [0] >= LogLevel::WARN {
                if #{head} !in __filter_out__ {
                    print (format ("{: <25} | ", DateTime (Instant::now ())))?;
                    print (Colors::YELLOW, #{head}, Colors::RESET);
                    #(for i in b) {
                        print (" ", #{i::inner});
                    }
                    println ();
                }
            }
        }
    }
}

/*!
 * ====================================================================================================
 * ====================================================================================================
 * ====================================          SUCCESS          =====================================
 * ====================================================================================================
 * ====================================================================================================
 */

pub macro success {
    self (head=__expr b=("," inner=__expr)*) {
        atomic {
            if __log_level__ [0] >= LogLevel::SUCCESS {
                if #{head} !in __filter_out__ {
                    print (format ("{: <25} | ", DateTime (Instant::now ())))?;
                    print (Colors::GREEN, #{head}, Colors::RESET);
                    #(for i in b) {
                        print (" ", #{i::inner});
                    }
                    println ();
                }
            }
        }
    }
}

/*!
 * ====================================================================================================
 * ====================================================================================================
 * ====================================          FAILURE          =====================================
 * ====================================================================================================
 * ====================================================================================================
 */

pub macro error {
    self (head=__expr b=("," inner=__expr)*) {
        atomic {
            if __log_level__ [0] >= LogLevel::ERROR {
                if #{head} !in __filter_out__ {
                    print (format ("{: <25} | ", DateTime (Instant::now ())))?;
                    print (Colors::RED, #{head}, Colors::RESET);
                    #(for i in b) {
                        print (" ", #{i::inner});
                    }
                    println ();
                }
            }
        }
    }
}


