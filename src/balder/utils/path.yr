in path;

use std::fs::path;

lazy dmut __PROJECT_PATH__ = copy [std::env::currentDir ()];

/**
 * Change the working directory of the project
 * */
pub fn setProjectPath (p : Path) {
    __PROJECT_PATH__ [0] = p;
}

/**
 * Get the working directory of the project
 * */
pub fn getProjectPath () -> Path {
    __PROJECT_PATH__ [0]
}

pub enum
| RESSOURCES = Path ("res:/")
| SHADERS    = Path ("shaders:/")
| IMAGES     = Path ("images:/")
| MODELS     = Path ("models:/")
| SCENES     = Path ("scenes:/")
 -> CustomPathQualifiers;

/**
 * Create an absolute path from a path that uses the custom paths qualifier
 * */
pub fn projectPath (p : [c8]) -> Path {
    projectPath (Path (p))
}

/**
 * Create an absolute path from a path that uses the custom paths qualifier
 * @example:
 * ```
 * use balder::utils::path;
 *
 * let mut p = projectPath ("res:/objects.toml");
 * println (p.toStr ()); // absolute/path/to/project_dir/res/objects.toml
 * ```
 * */
pub fn projectPath (p : Path)-> Path {
    if CustomPathQualifiers::RESSOURCES.isPrefix (p) {
        return ressourcePath ().push (p.removePrefix (CustomPathQualifiers::RESSOURCES));
    }

    if CustomPathQualifiers::SHADERS.isPrefix (p) {
        return shaderPath ().push (p.removePrefix (CustomPathQualifiers::SHADERS));
    }

    if CustomPathQualifiers::IMAGES.isPrefix (p) {
        return imagePath ().push (p.removePrefix (CustomPathQualifiers::IMAGES));
    }

    if CustomPathQualifiers::MODELS.isPrefix (p) {
        return modelPath ().push (p.removePrefix (CustomPathQualifiers::MODELS));
    }

    if CustomPathQualifiers::SCENES.isPrefix (p) {
        return scenePath ().push (p.removePrefix (CustomPathQualifiers::SCENES));
    }

    p
}

/**
 * @returns: the path to the ressource of the current project
 * */
pub fn ressourcePath ()-> Path {
    __PROJECT_PATH__ [0].push ("res")
}

/**
 * @returns: the path to the shader files of the current project
 * */
pub fn shaderPath ()-> Path {
    __PROJECT_PATH__ [0].push ("res/shaders")
}

/**
 * @returns: the path to the image files of the current project
 * */
pub fn imagePath ()-> Path {
    __PROJECT_PATH__ [0].push ("res/images")
}

/**
 * @returns: the path to the model files of the current project
 * */
pub fn modelPath ()-> Path {
    __PROJECT_PATH__ [0].push ("res/models")
}

/**
 * @returns: the path to the scene files of the current project
 * */
pub fn scenePath ()-> Path {
    __PROJECT_PATH__ [0].push ("res/scenes")
}
