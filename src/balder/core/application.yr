/**
 * @authors: Emile Cadorel
 */
in application;

pub mod ::activity;
pub mod ::input;
pub mod ::window;
pub mod ::timer;
pub mod ::drawer;
pub mod ::shape;
pub mod ::bin;

mod ::pass;

use std::{config::_,
          fs::_,
          io,
          time::_,
          syntax::_,
          concurrency::signal};

use balder::core::{_, application::_};
use balder::core::driver::_;

/**
 * Main part of a Balder application
 * @example:
 * ===
 * // Create an application from toml configuration file
 * // Config path is relative to `${pwd}/res/`
 * let dmut app = copy Application (Path ("path/to/config.toml"));
 * app:.run (); // start the application with the fnault activity
 * app:.dispose (); // Application is disposable
 * ===
 * @info: application can handle only one window
 */
@final
pub class Application {

    // The window rendering the application 
    let dmut _window = copy Window ();

    // The timer to cap the activity update frequency
    let mut _timer = Timer ();

    // The timer between two onUpdate Calls
    let mut _stepTimer = Timer ();

    // The duration of a step of the application (one update of the activity)
    let mut _stepDuration = dur::millis (16u64) + dur::micros (666u64);

    // While _isRunning is true the app is running
    let mut _isRunning : bool = true;
    
    // The list of input manager for each activities
    let dmut _input : &InputManager = copy InputManager ();

    // The list of activities that controlling the application
    let dmut _activity : (&Activity)? = none;

    // The widget drawer used to generate the final 2D composition of the window
    let dmut _drawer : (&ShapeDrawer)? = none;

    // The configuration of the application
    let mut _cfg : &BalderConfig;

    prot { // Signals

        // Signal emitted each UI frame
        let dmut _uiTick = Signal!{Duration} ();
    }

    /**
     * ======================================================================================================
     * ======================================================================================================
     * =======================================   CTOR AND CONFIGURE  ========================================
     * ======================================================================================================
     * ======================================================================================================
     */
    
    prot self empty ()
        with _cfg = copy BalderConfig::default ()
    {}
    
    /**
     * Create a new application from a file configuration
     * @params:
     *    - path: the path of the configuration file
     */
    pub self {T over &Activity} (cfg : &BalderConfig)
        with _cfg = cfg
        throws BalderError
    {
        self:.configure ();
        let dmut act = copy T (alias self);
        self._activity = (alias act)?;
    }    

    /**
     * Configure the application with a given configuration
     * @params:
     *    - conf: the configuration of the window
     */
    prv fn configure (mut self)
        throws BalderError
    {
        self:.configureWindow ();
        self:.configureShapeDrawer ();
        self._stepDuration = dur::seconds (1) / cast!{u64} (self._cfg.timer.ips);
    }

    /**
     * Configure the window of the application using the configuration `conf["window"]`
     * @params:
     *    - conf: the configuration of the application
     */
    prv fn configureWindow (mut self)
        throws BalderError
    {
        self._window:.setDimension (self._cfg.window.width, self._cfg.window.height);
        self._window:.setName (self._cfg.window.name);
        self._window:.configureVulkan (self._cfg);
        self._input:.connectResize (&self._window:.onResize);
    }

    prv fn configureShapeDrawer (mut self)
        throws BalderError
    {
        let dmut draw = copy ShapeDrawer (alias self);
        draw:.configure ();
        self._drawer = (alias draw)?;
    }

    /**
     * ======================================================================================================
     * ======================================================================================================
     * ================================================   USAGE    ==========================================
     * ======================================================================================================
     * ======================================================================================================
     */
    /**
     * Start the application
     */
    pub fn run (mut self) {
        if let Ok (dmut act) = alias self._activity {
            self._window:.show ();
            self._window:.startRendering ();
            act:.onStart ();

            self._timer:.reset ();
            self._stepTimer:.reset ();
            while self._isRunning {
                let delta = self._stepTimer.timeSinceStart ();
                self._stepTimer:.reset ();

                self._uiTick.emit (delta);
                act:.onUpdate (delta);

                self._input:.pollEvents ();
                if let Ok (dmut shape) = alias self._drawer && shape.hasUpdated () {
                    self._window:.forceFrame ();
                    shape:.interactiveUpdate (set-> false);
                }

                self:.waitClock ();
            }

            self._window:.forceFrame ();
        }
    }

    /**
     * Close the application
     */
    pub fn quit (mut self) {
        self._isRunning = false;
    }
    
    /**
     * Wait until the next update of the activity should be called.
     * @info: update the clock count.
     */
    prv fn waitClock (mut self) {
        let tick = self._timer.timeSinceStart ();
        if (self._stepDuration > tick) {
            let x = Instant::now ();
            let r = self._stepDuration - tick - dur::micros (1);

            sleep (r);
            let z = (Instant::now () - x) - r;
            self._timer:.reset (z);
        } else {
            let z = tick - self._stepDuration;
            self._timer:.reset (z);
        }
    }

    /**
     * ======================================================================================================
     * ======================================================================================================
     * ================================================   GETTERS    ========================================
     * ======================================================================================================
     * ======================================================================================================
     */


    /**
     * @returns: the input manager of the current activity
     */
    pub fn getInputManager (mut self) -> dmut &InputManager {
        alias self._input
    }

    /**
     * @returns: the input manager of the current activity
     */
    pub fn getInputManager (self) -> &InputManager {
        self._input
    }

    /**
     * @returns: the drawer used to draw basic shapes on the final composition pass of the window
     * */
    pub fn getShapeDrawer (mut self)-> dmut &ShapeDrawer {
        if let Ok (dmut w) = alias self._drawer {
            return alias w;
        }

        panic;
    }

    /**
     * @returns: the drawer used to draw basic shapes on the final composition pass of the window
     * */
    pub fn getShapeDrawer (self)-> &ShapeDrawer {
        if let Ok (w) = self._drawer {
            return w;
        }

        panic;
    }

    /**
     * @returns: the window of the application
     */
    pub fn getWindow (mut self)-> dmut &Window {
        alias self._window
    }

    /**
     * @returns: the window of the application
     */
    pub fn getWindow (self)-> &Window {
        self._window
    }

    /**
     * @returns: the configuration of the application
     * */
    pub fn getConfiguration (self)-> &BalderConfig {
        self._cfg
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SIGNALS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Connect to the signal that is emitted when a new UI frame is being computed
     * @info: an UI frame is executed at a given frequency (defined by 'ips') to poll input events, and updating main activity
     * */
    pub fn connectUITick (mut self, f : dg (Duration)-> void) {
        self._uiTick:.connect (f);
    }

    /**
     * Disconnect to the signal that is emitted when a new UI frame is being computed
     * */
    pub fn disconnectUITick (mut self, f : dg (Duration)-> void) {
        self._uiTick:.disconnect (f);
    }


    /**
     * ======================================================================================================
     * ======================================================================================================
     * =============================================   DISPOSING    =========================================
     * ======================================================================================================
     * ======================================================================================================
     */
    
    impl Disposable {
        pub over dispose (mut self) {
            self._window:.killRendering ();

            if let Ok (dmut act) = alias self._activity {
                act:.dispose ();
                self._activity = none;
            }

            if let Ok (dmut d) = alias self._drawer {
                d:.dispose ();
                self._drawer = none;
            }

            self._window:.dispose ();
        }        
    }

    /**
     * Call dispose
     */
    __dtor (mut self) {
        self:.dispose ();
    }
    
}

