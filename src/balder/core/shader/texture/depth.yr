in depth;

use balder::core::{_, driver::_, memory::_};
use balder::utils::log;

use std::config::_;

use ::vulkan::core;
use ::sdl2::{image, surface, pixels};

@final
pub class IDepthTexture over Texture {

    // The format of the depth buffer
    let mut _format : VkFormat;

    // The vulkan image of the texture
    let dmut _image : (&Image2D)? = none;

    /**
     * Create a depth texture of a given dimension
     * */
    pub self (dmut device : &VulkanDevice, format : VkFormat, width : u32, height : u32, forSubpass : bool = false, numSamples : VkSampleCountFlagBits = VkSampleCountFlagBits::VK_SAMPLE_COUNT_1_BIT)
        with super (alias device, width, height)
        , _format = format

        throws BalderError
    {
        self:.configure (forSubpass, numSamples);
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          CONFIGURATION          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Configure the depth image
     * */
    fn configure (mut self, forSubpass : bool, numSamples : VkSampleCountFlagBits)
        throws BalderError
    {
        self:.createImage (forSubpass, numSamples);
        self:.createImageView ();
    }

    /**
     * Allocate the texture image memory space
     * */
    fn createImage (mut self, forSubpass : bool, numSamples : VkSampleCountFlagBits)
        throws BalderError
    {
        let usage = if forSubpass {
            VkImageUsageFlagBits::VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT | VkImageUsageFlagBits::VK_IMAGE_USAGE_SAMPLED_BIT
        } else {
            VkImageUsageFlagBits::VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT
        };

        let dmut depthImage = self._device:.getMemoryAllocator ():.allocImage2D (
            self._width, self._height,
            self._format,
            VkImageTiling::VK_IMAGE_TILING_OPTIMAL,
            usage,
            VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,
            numSamples-> numSamples);

        self._image = (alias depthImage)?;
    }

    /**
     * Create the image view to attach the texture to a rendering pass
     * */
    fn createImageView (mut self)
        throws BalderError
    {
        if let Ok (img) = self._image {
            let mut info = VkImageViewCreateInfo ();
            info.sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
            info.image = img.getVulkanImage ();
            info.viewType = VkImageViewType::VK_IMAGE_VIEW_TYPE_2D;
            info.format = img.getFormat ();

            info.subresourceRange.aspectMask = VkImageAspectFlagBits::VK_IMAGE_ASPECT_DEPTH_BIT;
            info.subresourceRange.levelCount = 1;
            info.subresourceRange.layerCount = 1;

            info.components.r = VkComponentSwizzle::VK_COMPONENT_SWIZZLE_R;
            info.components.g = VkComponentSwizzle::VK_COMPONENT_SWIZZLE_G;
            info.components.b = VkComponentSwizzle::VK_COMPONENT_SWIZZLE_B;
            info.components.a = VkComponentSwizzle::VK_COMPONENT_SWIZZLE_A;

            if vkCreateImageView (self._device.getDeviceHandle (), &info, null, &self._imageView) != VkResult::VK_SUCCESS {
                throw copy BalderError ("Failed to create image view");
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */


    impl Disposable {
        pub over dispose (mut self) {
            if self._imageView != null {
                vkDestroyImageView (self._device.getDeviceHandle (), self._imageView, null);
                self._imageView = null;
            }

            if let Ok (dmut img) = alias self._image {
                log::debug #("Texture", "Disposing texture depth");
                img:.dispose ();
                self._image = none;
            }

            self._width = 0;
            self._height = 0;
        }
    }

}
