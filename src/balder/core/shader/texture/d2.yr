in d2;

use balder::core::{_, driver::_, memory::_};
use balder::utils::log;

use std::{io, config::_};

use ::vulkan::core;
use ::sdl2::{image, surface, pixels};

extern (C) fn memcpy (src : *void, dst : *void, size : usize);

@final
pub class ITexture2D over Texture {

    // The width of the texture image
    let mut _width : u32 = 0;

    // The height of the texture image
    let mut _height : u32 = 0;

    // The vulkan image of the texture
    let dmut _image : (&Image2D)? = none;

    pub self (dmut device : &VulkanDevice, filename : [c8])
        with super (alias device)
        throws BalderError
    {
        self:.configure (filename);
    }

    /**
     * Create a texture from an SDL Texture
     * */
    pub self fromSDL (dmut device : &VulkanDevice, dmut surface : *SDL_Surface)
        with super (alias device)
        throws BalderError
    {
        self:.loadStagingBuffer (alias surface);
        self:.createImageView ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    @field
    pub fn width (self)-> u32 {
        self._width
    }

    @field
    pub fn height (self)-> u32 {
        self._height
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          CONFIGURATION          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Configure the texture from a file
     * */
    fn configure (mut self, filename : [c8])
        throws BalderError
    {
        self:.loadFile (filename);
        self:.createImageView ();
    }

    /**
     * Create the image view used to attach the texture to a descriptor set
     * */
    fn createImageView (mut self)
        throws BalderError
    {
        if let Ok (dmut img) = alias self._image {
            let mut info = VkImageViewCreateInfo ();
            info.sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
            info.image = img.getVulkanImage ();
            info.viewType = VkImageViewType::VK_IMAGE_VIEW_TYPE_2D;
            info.format = img.getFormat ();

            info.subresourceRange.aspectMask = VkImageAspectFlagBits::VK_IMAGE_ASPECT_COLOR_BIT;
            info.subresourceRange.levelCount = 1;
            info.subresourceRange.layerCount = 1;
            info.components.r = VkComponentSwizzle::VK_COMPONENT_SWIZZLE_R;
            info.components.g = VkComponentSwizzle::VK_COMPONENT_SWIZZLE_G;
            info.components.b = VkComponentSwizzle::VK_COMPONENT_SWIZZLE_B;
            info.components.a = VkComponentSwizzle::VK_COMPONENT_SWIZZLE_A;

            if vkCreateImageView (self._device.getDeviceHandle (), &info, null, &self._imageView) != VkResult::VK_SUCCESS {
                throw copy BalderError ("Failed to create image view");
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          FILE LOADING          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Load a file image from a filename
     * @params:
     *    - filename: the project path to the file to load
     * */
    fn loadFile(mut self, filename : [c8])
        throws BalderError
    {
        let path = balder::utils::path::projectPath (filename);
        let dmut surf = IMG_Load (std::conv::toStringZ (path.toStr ()));
        if surf == null {
            throw copy BalderError ("Failed to load texture image : " ~ path.toStr ());
        }

        {
            self:.loadStagingBuffer (alias surf);
        } exit {
            SDL_FreeSurface (alias surf);
        }

    } catch {
        err => {
            throw copy BalderError (std::format::format ("Malformed image configuration =>\n\t{}", err));
        }
    }

    /**
     * Allocate the texture image
     * Load the pixel datas to a staging buffer and copy it to the image of the texture
     * */
    fn loadStagingBuffer (mut self, dmut surf : *SDL_Surface)
        throws BalderError
    {
        let (dmut converted, needFree) = alias self.convertSurface (alias surf);
        {
            self._width = cast!u32 (unsafe { (*converted).w });
            self._height = cast!u32 (unsafe { (*converted).h });
            let datas = unsafe { (*converted).pixels };
            let sdlFormat = unsafe { (*(*converted).format).format };

            let (pixelSize, vulkanFormat) = match sdlFormat {
                pixels::SDL_PIXELFORMAT_RGBA32   => { (4u32, VkFormat::VK_FORMAT_R8G8B8A8_SRGB) }
                _ => {
                    throw copy BalderError (std::format::format ("Conversion of pixel format {} failed", sdlFormat));
                }
            };

            let dmut image = self._device:.getMemoryAllocator ():.allocImage2D (self._width, self._height,
                                                                                vulkanFormat,
                                                                                VkImageTiling::VK_IMAGE_TILING_LINEAR,
                                                                                cast!u32 (VkImageUsageFlagBits::VK_IMAGE_USAGE_TRANSFER_DST_BIT | VkImageUsageFlagBits::VK_IMAGE_USAGE_SAMPLED_BIT),
                                                                                cast!u32 (VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT));

            let dmut stagingBuf = self._device:.getMemoryAllocator ():.allocBuffer (
                cast!usize ((self._width * self._height) * pixelSize),
                cast!u32 (VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFER_SRC_BIT),
                cast!u32 (VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_COHERENT_BIT |
                          VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT));

            {
                let dmut mptr = stagingBuf:.map ();
                memcpy (mptr, datas, cast!usize ((self._width * self._height) * 4u32));
                stagingBuf:.unmap ();

                image:.copyFrom (alias stagingBuf, VkImageAspectFlagBits::VK_IMAGE_ASPECT_COLOR_BIT);
                self._image = (alias image)?;
            } exit {
                stagingBuf:.dispose ();
            }
        } exit {
            if needFree {
                SDL_FreeSurface (alias converted);
            }
        }
    }

    /**
     * Convert the surface to the appropriate format
     * */
    fn convertSurface (self, dmut surf : *SDL_Surface)-> dmut (*SDL_Surface, bool) {
        let sdlFormat = unsafe { (*(*surf).format).format };
        if sdlFormat == pixels::SDL_PIXELFORMAT_RGBA32 { return (alias surf, false); }

        let dmut converted = SDL_ConvertSurfaceFormat (surf, pixels::SDL_PIXELFORMAT_RGBA32, 0);
        (alias converted, true)
    }
    
    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            if self._imageView != null {
                vkDestroyImageView (self._device.getDeviceHandle (), self._imageView, null);
                self._imageView = null;
            }

            if let Ok (dmut img) = alias self._image {
                log::debug ("Disposing texture image");
                img:.dispose ();
                self._image = none;
            }

            self._width = 0;
            self._height = 0;
        }
    }

}
