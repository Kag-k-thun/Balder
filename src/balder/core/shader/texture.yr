in texture;

mod ::d2;
mod ::depth;
mod ::color;

use balder::core::{_, driver::_, memory::_};
use balder::utils::log;

use std::config::_;

use ::vulkan::core;
use ::sdl2::{image, surface, pixels};

@abstract
pub class Texture {

    let dmut _device : &VulkanDevice;

    // The image view used to bind the texture in shaders
    let dmut _imageView : VkImageView = null;

    prot self (dmut device : &VulkanDevice)
        with _device = alias device
    {}

    /**
     * @returns: the image view of the texture used to bind to descriptor sets
     * */
    pub fn getImageView (self)-> VkImageView {
        self._imageView
    }

    impl Disposable;
    __dtor (mut self) {
        self:.dispose ();
    }
}

pub def Texture2D : d2::ITexture2D;
pub def DepthTexture : depth::IDepthTexture;
pub def ColorTexture : color::IColorTexture;
