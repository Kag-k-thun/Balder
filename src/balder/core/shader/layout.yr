in layout;

use balder::core::driver::device;
use balder::core::{error, dispose, shader::_};
use balder::math::vector;

use vulkan::_;

/**
 * Ancestor of all pipeline layout classes
 */
@final
pub class PipelineLayout {

    // The pipeline layout for vulkan shader
    let dmut _layout : VkPipelineLayout = null;

    // The descriptor set layout describing the uniform values that can be bound to the shader
    let dmut _descriptorSetLayout : VkDescriptorSetLayout = null;

    // The device containing the pipeline layout
    let dmut _device : &VulkanDevice ;
    
    pub self (dmut device : &VulkanDevice, config : &ShaderConfig)
        with _device = alias device
        throws BalderError
    {
        self._descriptorSetLayout = self:.createDescriptorSetLayout (config);
        self._layout = self:.createPipelineLayout ();
    }

    /**
     * @returns: the vulkan handle of the pipeline layout
     */
    pub fn getVulkanHandle (mut self)-> dmut VkPipelineLayout {
        alias self._layout
    }

    /**
     * @returns: the descriptor set layout usable for descriptor set allocation
     */
    pub fn getDescriptorSetLayout (mut self)-> dmut VkDescriptorSetLayout {
        alias self._descriptorSetLayout
    }
    
    /**
     * @returns: the device used by the pipeline layout
     */
    pub fn getDevice (mut self)-> dmut &VulkanDevice {
        alias self._device
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          PRIVATE          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */


    /**
     * Create the descriptor set layout for the given T template struct
     * @returns: the descriptor set layout
     */
    prv fn createDescriptorSetLayout (mut self, config : &ShaderConfig)-> dmut VkDescriptorSetLayout
        throws BalderError
    {
        let dmut descs = copy [VkDescriptorSetLayoutBinding () ; config.getUniforms ().len + config.getTextures ().len];
        let mut i = 0us;
        for _, u in config.getUniforms () {
            let mut desc = VkDescriptorSetLayoutBinding ();
            desc.descriptorCount    = 1;
            desc.descriptorType     = VkDescriptorType::VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
            desc.stageFlags         = u.stage;
            desc.binding            = u.binding;
            descs [i] = desc;
            i += 1;
        }

        for _, u in config.getTextures () {
            let mut desc = VkDescriptorSetLayoutBinding ();
            desc.descriptorCount    = 1;
            desc.descriptorType     = VkDescriptorType::VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
            desc.stageFlags         = u.stage;
            desc.binding            = u.binding;
            descs [i] = desc;
            i += 1;
        }

        let mut layoutInfo = VkDescriptorSetLayoutCreateInfo ();
        layoutInfo.sType        = VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
        layoutInfo.bindingCount = cast!u32 (descs.len);
        layoutInfo.pBindings    = descs.ptr;

        let dmut descSet : VkDescriptorSetLayout = null;
        if (vkCreateDescriptorSetLayout (self._device.getDeviceHandle (), &layoutInfo, null, alias &descSet) != VkResult::VK_SUCCESS) {
            throw copy BalderError ("Failed to create descriptor set layout");
        }

        return alias descSet;
    }

    /**
     * Create the pipeline layout from self._descriptorSetLayout
     */
    prv fn createPipelineLayout (mut self)-> dmut VkPipelineLayout
        throws BalderError
    {
        let dmut layout : VkPipelineLayout = null;
        let mut pipelineLayoutInfo = VkPipelineLayoutCreateInfo ();
        pipelineLayoutInfo.sType                  = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
        pipelineLayoutInfo.setLayoutCount         = 1u32;
        pipelineLayoutInfo.pSetLayouts            = &self._descriptorSetLayout;

        if (vkCreatePipelineLayout (self._device.getDeviceHandle (), &pipelineLayoutInfo, null, alias &layout) != VkResult::VK_SUCCESS) {
            throw copy BalderError ("Failed to create pipeline layout.");
        }

        return alias layout;
    }
    
    impl Disposable {
        pub over dispose (mut self) {
            if self._descriptorSetLayout != null {
                vkDestroyDescriptorSetLayout (self._device.getDeviceHandle (), self._descriptorSetLayout, null);
                self._descriptorSetLayout = null;
            }

            if (self._layout != null) {
                vkDestroyPipelineLayout (self._device.getDeviceHandle (), self._layout, null);
                self._layout = null;
            }
        }        
    }
    
    __dtor (mut self) {
        self:.dispose ();
    }

}
