in desc_set;

use balder::core::{_, memory::_, config::_, driver::_, shader::_};
use balder::utils::log;

use ::vulkan::core;
use std::io;

/**
 * Ancestor of all descriptor sets
 */
@final
pub class DescriptorSet {

    // The allocator that allocated the descriptor set    
    let dmut _shader : &Shader;

    // The allocated descriptor sets (one by in flight frame)
    let dmut _set : [VkDescriptorSet] = [];

    // The samplers for textures
    let dmut _samplers : [[c8] => VkSampler] = copy [];

    /**
     * @params:
     *    - allocator: the allocator used to allocate the descriptor set
     *    - sets: the descriptor set (assumed to have one by frame in flight of the drawing device)
     *    - uniformSize: the size of the uniform content
     */
    pub self (dmut shader : &Shader, dmut sets : [VkDescriptorSet])
        with _shader = alias shader
        , _set = alias sets
    {}


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the shader to which the descriptor set is attached
     * */
    pub fn getShader (mut self)-> dmut &Shader {
        alias self._shader
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Bind an uniform value to a buffer
     * */
    pub fn setUniform (mut self, name : [c8], ubo : &UniformBufferObject)
        throws BalderError
    {
        let dmut device = self._shader:.getDevice ();
        let config = self._shader.getConfig ();
        if let Ok (un) = config.getUniforms ()[name] {
            for i in 0 .. device.getSwapchainNbFrames () {
                let mut bufferInfo = VkDescriptorBufferInfo ();
                bufferInfo.buffer = ubo.getBuffers ()[i].getVulkanBuffer ();
                bufferInfo.offset = 0;
                bufferInfo.range = un.size;

                let mut descWrite = VkWriteDescriptorSet ();
                descWrite.sType = VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
                descWrite.dstSet = self._set [i];
                descWrite.dstBinding = un.binding;
                descWrite.dstArrayElement = 0;
                descWrite.descriptorType = VkDescriptorType::VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
                descWrite.descriptorCount = 1;
                descWrite.pBufferInfo = &bufferInfo;

                vkUpdateDescriptorSets (device.getDeviceHandle (), 1, &descWrite, 0, null);
            }

        } else throw copy BalderError ("No uniform named  " ~ name);
    }

    /**
     * Bind a texture
     * */
    pub fn setTexture (mut self, name : [c8], texture : &Texture)
        throws BalderError
    {
        let dmut device = self._shader:.getDevice ();
        let config = self._shader.getConfig ();
        if let Ok (un) = config.getTextures ()[name] {
            let sampler = if let Ok (sampler) = self._samplers [name] { sampler }
            else throw copy BalderError ("Malformed descriptor set");

            for i in 0 .. device.getSwapchainNbFrames () {
                let mut imageInfo = VkDescriptorImageInfo ();
                if un.kind == TextureKind::ALBEDO {
                    imageInfo.imageLayout = VkImageLayout::VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
                } else if un.kind == TextureKind::DEPTH {
                    imageInfo.imageLayout = VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL;
                } else throw copy BalderError ("Unknwon texture kind : " ~ un.kind);

                imageInfo.imageView = texture.getImageView ();
                imageInfo.sampler = sampler;

                let mut descWrite = VkWriteDescriptorSet ();
                descWrite.sType = VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
                descWrite.dstSet = self._set [i];
                descWrite.dstBinding = un.binding;

                descWrite.dstArrayElement = 0;
                descWrite.descriptorType = VkDescriptorType::VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
                descWrite.descriptorCount = 1;
                descWrite.pImageInfo = &imageInfo;

                vkUpdateDescriptorSets (device.getDeviceHandle (), 1, &descWrite, 0, null);
            }

            log::debug ("Bound texture to descriptor set");
        }  else throw copy BalderError ("No texture named " ~ name);
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          CONFIGURATION          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create the samplers for the textures of the shader
     * */
    pub fn createSamplers (mut self)
        throws BalderError
    {
        let config = self._shader.getConfig ();
        if (config.getTextures ().len != 0) {
            let dmut device = self._shader:.getDevice ();
            let dmut properties = VkPhysicalDeviceProperties ();
            vkGetPhysicalDeviceProperties (device.getPhysicalDeviceHandle (), alias &properties);

            for name, info in config.getTextures () {
                let mut samplerInfo = VkSamplerCreateInfo ();
                samplerInfo.sType = VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;

                if info.kind == TextureKind::ALBEDO {
                    if info.anisotropyEnable {
                        samplerInfo.anisotropyEnable = VK_TRUE;
                    }

                    if info.unnormalizedCoordinates {
                        samplerInfo.unnormalizedCoordinates = VK_TRUE;
                    }

                    if info.compareEnable {
                        samplerInfo.compareEnable = VK_TRUE;
                    }

                    samplerInfo.maxAnisotropy = std::algorithm::comparison::min (info.maxAnisotropy, properties.limits.maxSamplerAnisotropy);
                    samplerInfo.borderColor = info.borderColor;

                    samplerInfo.compareOp = info.compareOp;
                    samplerInfo.mipmapMode = info.mipmapMode;

                    samplerInfo.magFilter = info.magFilter;
                    samplerInfo.minFilter = info.minFilter;
                    samplerInfo.addressModeU = info.addressModeU;
                    samplerInfo.addressModeV = info.addressModeV;
                    samplerInfo.addressModeW = info.addressModeW;

                }

                else if info.kind == TextureKind::DEPTH {
                    samplerInfo.magFilter = VkFilter::VK_FILTER_NEAREST;
		            samplerInfo.minFilter = VkFilter::VK_FILTER_NEAREST;
		            samplerInfo.mipmapMode = info.mipmapMode;
		            samplerInfo.addressModeU = VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE;
		            samplerInfo.addressModeV = samplerInfo.addressModeU;
		            samplerInfo.addressModeW = samplerInfo.addressModeU;
		            samplerInfo.mipLodBias = 0.0f;
		            samplerInfo.maxAnisotropy = 1.0f;
		            samplerInfo.minLod = 0.0f;
		            samplerInfo.maxLod = 1.0f;
		            samplerInfo.borderColor = VkBorderColor::VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE;
                }

                else throw copy BalderError ("Unknwon texture kind : " ~ info.kind);

                let dmut sampler : VkSampler = null;
                if (vkCreateSampler (device.getDeviceHandle (), &samplerInfo, null, &sampler) != VkResult::VK_SUCCESS) {
                    throw copy BalderError ("Failed to create texture sampler for texture " ~ name);
                }

                log::debug ("Add sampler : ", name);
                self._samplers [name] = alias sampler;
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          USAGE          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Use the descriptor set for the drawing of the next frame
     */
    pub fn select (self) {
        let device = self._shader.getDevice ();
        let pipeline = self._shader.getPipelineLayout ();
        let current = self._set [device.getCurrentFrameIndex ()];

        vkCmdBindDescriptorSets (device.getCommandBuffer (),
                                 VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_GRAPHICS,
                                 pipeline.getVulkanHandle (),
                                 0u32,
                                 1u32,
                                 &current,
                                 0u32,
                                 null);
    }

    impl Disposable {
        pub over dispose (mut self) {
            log::debug ("Destroy texture samplers");
            for _, dmut sampler in alias self._samplers {
                vkDestroySampler (self._shader:.getDevice ().getDeviceHandle (), sampler, null);
            }
            self._samplers = copy [];
        }
    }

}
