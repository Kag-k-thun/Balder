in desc_set;

use balder::core::{memory::_, driver::_, shader::_};
use balder::core::error;

use vulkan::_;
use std::io;

/**
 * Ancestor of all descriptor sets
 */
@final
pub class DescriptorSet {

    // The allocator that allocated the descriptor set    
    let dmut _shader : &Shader;

    // The allocated descriptor sets (one by in flight frame)
    let dmut _set : [VkDescriptorSet] = [];

    /**
     * @params:
     *    - allocator: the allocator used to allocate the descriptor set
     *    - sets: the descriptor set (assumed to have one by frame in flight of the drawing device)
     *    - uniformSize: the size of the uniform content
     */
    pub self (dmut shader : &Shader, dmut sets : [VkDescriptorSet])
        with _shader = alias shader
        , _set = alias sets
    {}

    /**
     * Bind an uniform value to a buffer
     * */
    pub fn setUniform (mut self, name : [c8], dmut ubo : &UniformBufferObject)
        throws BalderError
    {
        let dmut device = self._shader:.getDevice ();
        let config = self._shader.getConfig ();
        if let Ok (un) = config.getUniforms ()[name] {
            for i in 0 .. device.getSwapchainNbFrames () {
                let mut bufferInfo = VkDescriptorBufferInfo ();
                bufferInfo.buffer = ubo:.getBuffers ()[i]:.getVulkanBuffer ();
                bufferInfo.offset = 0;
                bufferInfo.range = un.size;

                let mut descWrite = VkWriteDescriptorSet ();
                descWrite.sType = VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
                descWrite.dstSet = self._set [i];
                descWrite.dstBinding = un.binding;
                descWrite.dstArrayElement = 0;
                descWrite.descriptorType = VkDescriptorType::VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
                descWrite.descriptorCount = 1;
                descWrite.pBufferInfo = &bufferInfo;

                vkUpdateDescriptorSets (device:.getDeviceHandle (), 1, &descWrite, 0, null);
            }

        } else throw copy BalderError ("No uniform named  " ~ name);
    }

    /**
     * Use the descriptor set for the drawing of the next frame
     */
    pub fn select (mut self) {
        let dmut device = self._shader:.getDevice ();
        let dmut pipeline = self._shader:.getPipelineLayout ();
        let current = self._set [device.getCurrentFrameIndex ()];

        vkCmdBindDescriptorSets (device:.getCommandBuffer (),
                                 VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_GRAPHICS,
                                 pipeline:.getVulkanHandle (),
                                 0u32,
                                 1u32,
                                 &current,
                                 0u32,
                                 null);
    }

}
