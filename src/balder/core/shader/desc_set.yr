in desc_set;

use balder::core::{_, memory::_, driver::_, shader::_};
use balder::utils::log;

use vulkan::_;
use std::io;

/**
 * Ancestor of all descriptor sets
 */
@final
pub class DescriptorSet {

    // The allocator that allocated the descriptor set    
    let dmut _shader : &Shader;

    // The allocated descriptor sets (one by in flight frame)
    let dmut _set : [VkDescriptorSet] = [];

    // The samplers for textures
    let dmut _samplers : [[c8] => VkSampler] = copy [];

    /**
     * @params:
     *    - allocator: the allocator used to allocate the descriptor set
     *    - sets: the descriptor set (assumed to have one by frame in flight of the drawing device)
     *    - uniformSize: the size of the uniform content
     */
    pub self (dmut shader : &Shader, dmut sets : [VkDescriptorSet])
        with _shader = alias shader
        , _set = alias sets
    {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Bind an uniform value to a buffer
     * */
    pub fn setUniform (mut self, name : [c8], dmut ubo : &UniformBufferObject)
        throws BalderError
    {
        let dmut device = self._shader:.getDevice ();
        let config = self._shader.getConfig ();
        if let Ok (un) = config.getUniforms ()[name] {
            for i in 0 .. device.getSwapchainNbFrames () {
                let mut bufferInfo = VkDescriptorBufferInfo ();
                bufferInfo.buffer = ubo:.getBuffers ()[i]:.getVulkanBuffer ();
                bufferInfo.offset = 0;
                bufferInfo.range = un.size;

                let mut descWrite = VkWriteDescriptorSet ();
                descWrite.sType = VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
                descWrite.dstSet = self._set [i];
                descWrite.dstBinding = un.binding;
                descWrite.dstArrayElement = 0;
                descWrite.descriptorType = VkDescriptorType::VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
                descWrite.descriptorCount = 1;
                descWrite.pBufferInfo = &bufferInfo;

                vkUpdateDescriptorSets (device:.getDeviceHandle (), 1, &descWrite, 0, null);
            }

        } else throw copy BalderError ("No uniform named  " ~ name);
    }

    /**
     * Bind a texture
     * */
    pub fn setTexture (mut self, name : [c8], dmut texture : &Texture)
        throws BalderError
    {
        let dmut device = self._shader:.getDevice ();
        let config = self._shader.getConfig ();
        if let Ok (un) = config.getTextures ()[name] {
            let sampler = if let Ok (sampler) = self._samplers [name] { sampler }
            else throw copy BalderError ("Malformed descriptor set");

            for i in 0 .. device.getSwapchainNbFrames () {
                let mut imageInfo = VkDescriptorImageInfo ();
                imageInfo.imageLayout = VkImageLayout::VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
                imageInfo.imageView = texture:.getImageView ();
                imageInfo.sampler = sampler;

                let mut descWrite = VkWriteDescriptorSet ();
                descWrite.sType = VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
                descWrite.dstSet = self._set [i];
                descWrite.dstBinding = un.binding;

                descWrite.dstArrayElement = 0;
                descWrite.descriptorType = VkDescriptorType::VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
                descWrite.descriptorCount = 1;
                descWrite.pImageInfo = &imageInfo;

                vkUpdateDescriptorSets (device:.getDeviceHandle (), 1, &descWrite, 0, null);
            }

            log::debug ("Bound texture to descriptor set");
        }  else throw copy BalderError ("No texture named " ~ name);
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          CONFIGURATION          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create the samplers for the textures of the shader
     * */
    pub fn createSamplers (mut self)
        throws BalderError
    {
        let config = self._shader.getConfig ();
        if (config.getTextures ().len != 0) {
            let dmut device = self._shader:.getDevice ();
            let dmut properties = VkPhysicalDeviceProperties ();
            vkGetPhysicalDeviceProperties (device:.getPhysicalDeviceHandle (), alias &properties);

            for name, _ in config.getTextures () {
                let mut samplerInfo = VkSamplerCreateInfo ();
                samplerInfo.sType = VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;

                samplerInfo.magFilter = VkFilter::VK_FILTER_LINEAR;
                samplerInfo.minFilter = VkFilter::VK_FILTER_LINEAR;
                samplerInfo.addressModeU = VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_REPEAT;
                samplerInfo.addressModeV = VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_REPEAT;
                samplerInfo.addressModeW = VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_REPEAT;
                samplerInfo.anisotropyEnable = VK_TRUE;
                samplerInfo.maxAnisotropy = properties.limits.maxSamplerAnisotropy;
                samplerInfo.borderColor = VkBorderColor::VK_BORDER_COLOR_INT_OPAQUE_BLACK;
                samplerInfo.unnormalizedCoordinates = VK_FALSE;
                samplerInfo.compareEnable = VK_FALSE;
                samplerInfo.compareOp = VkCompareOp::VK_COMPARE_OP_ALWAYS;
                samplerInfo.mipmapMode = VkSamplerMipmapMode::VK_SAMPLER_MIPMAP_MODE_LINEAR;

                let dmut sampler : VkSampler = null;
                if (vkCreateSampler (device:.getDeviceHandle (), &samplerInfo, null, &sampler) != VkResult::VK_SUCCESS) {
                    throw copy BalderError ("Failed to create texture sampler for texture " ~ name);
                }

                log::debug ("Add sampler : ", name);
                self._samplers [name] = alias sampler;
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          USAGE          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Use the descriptor set for the drawing of the next frame
     */
    pub fn select (mut self) {
        let dmut device = self._shader:.getDevice ();
        let dmut pipeline = self._shader:.getPipelineLayout ();
        let current = self._set [device.getCurrentFrameIndex ()];

        vkCmdBindDescriptorSets (device:.getCommandBuffer (),
                                 VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_GRAPHICS,
                                 pipeline:.getVulkanHandle (),
                                 0u32,
                                 1u32,
                                 &current,
                                 0u32,
                                 null);
    }

    impl Disposable {
        pub over dispose (mut self) {
            log::debug ("Destroy texture samplers");
            for _, dmut sampler in alias self._samplers {
                vkDestroySampler (self._shader:.getDevice ():.getDeviceHandle (), sampler, null);
            }
            self._samplers = copy [];
        }
    }

}
