in ibo;

use balder::core::{error, dispose, memory::_, driver::_};

use std::traits;
use vulkan::_;

/**
 * Ancestor of all ibos
 */
@abstract
pub class IndexBufferObject {

    // The buffer containing the index of the points
    let dmut _buf : (&Buffer)?;

    // The number of points in the mesh
    let mut _nbPoints : u32;

    /**
     * @params:
     *    - buf: the buffer containing the points
     *    - nbPoints: the number of points in the buffer
     */
    prot self (nbPoints : u32)
        with _buf = none
        , _nbPoints = nbPoints
    {}

    /**
     * Use the index buffer for the next draw
     */
    pub fn select (mut self);

    /**
     * @returns: the buffer containing the points of the ibo
     */
    pub fn getBuffer (mut self)-> dmut (&Buffer)? {
        alias self._buf
    }

    /**
     * @returns: the number of points in the ibo
     */
    pub fn getNbPoints (self)-> u32 {
        self._nbPoints
    }

    impl Disposable {
        pub over dispose (mut self) {
            if let Ok (dmut buf) = alias self._buf {
                buf:.dispose ();
                self._buf = none;
            }

            self._nbPoints = 0u32;
        }
    }

    __dtor (mut self) {
        self:.dispose ();
    }

}

/**
 * @templates:
 *    - U: an unsigned int type
 */
pub class if (is!{U}{T of u16} || is!{U}{T of u32})
    IndexBufferObject {U} over ibo::IndexBufferObject

{
    /**
     * @params:
     *    - device: the device used to allocate the buffer
     *    - datas: the datas to put in the buffer
     */
    pub self (dmut device : &VulkanDevice, datas : [U])
        with super (cast!u32 (datas.len))
        throws BalderError
    {
        let dmut ibuffer = device:.getMemoryAllocator ():.allocBuffer (
            cast!u64 (datas.len * U::size),
            cast!u32 (VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFER_DST_BIT | VkBufferUsageFlagBits::VK_BUFFER_USAGE_INDEX_BUFFER_BIT),
            cast!u32 (VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT));

        ibuffer:.update (datas);
        self._buf = (alias ibuffer)?;
    }

    /**
     * Use the index buffer for the next draw
     */
    pub over select (mut self) {
        if let Ok (dmut buf) = alias self._buf {
            cte if (is!{U}{T of u16}) {
                vkCmdBindIndexBuffer (buf:.getDevice ():.getCommandBuffer (), buf:.getVulkanBuffer (), 0u64, VkIndexType::VK_INDEX_TYPE_UINT16);
            } else {
                vkCmdBindIndexBuffer (buf:.getDevice ():.getCommandBuffer (), buf:.getVulkanBuffer (), 0u64, VkIndexType::VK_INDEX_TYPE_UINT32);
            }
        }
    }

}
