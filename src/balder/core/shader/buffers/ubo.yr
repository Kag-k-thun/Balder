in ubo;

use balder::core::{error, dispose, memory::_, driver::_};
use ::vulkan::_;
use std::{io, stream};


/**
 * Ancestor of all uniform buffers
 */
@final
pub class UniformBufferObject {

    // The buffers containing the uniform values, one per frame in flight
    let dmut _uniformBuffers : (&DynamicBuffer)? = none;

    /**
     * Create an empty ubo
     */
    pub self (dmut device : &VulkanDevice, size : usize)
        throws BalderError
    {
        let dmut buffer = device:.getMemoryAllocator ():.allocDynamicBuffer (
            size,
            cast!u32 (VkBufferUsageFlagBits::VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT),
            cast!u32 (VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT |
                      VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_COHERENT_BIT));

        self._uniformBuffers = (alias buffer)?;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub fn getBuffer (mut self)-> dmut &DynamicBuffer {
        if let Ok (dmut d) = alias self._uniformBuffers {
            return alias d;
        }

        panic;
    }

    pub fn getBuffer (self)-> &DynamicBuffer {
        if let Ok (d) = self._uniformBuffers {
            return d;
        }

        panic;
    }

    pub fn getSize (self)-> usize {
        if let Ok (d) = self._uniformBuffers {
            return d.getSize ();
        }

        panic;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          UPDATING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Update the data of the uniform buffer
     * */
    pub fn setData {U} (mut self, offset : usize, data : U, commit : bool = true) {
        // for dmut buf in alias self._uniformBuffers {
        if let Ok (dmut d) = alias self._uniformBuffers {
            d:.setData!{U} (offset, data, commit-> commit);
        }
    }

    pub fn copyData (mut self, srcOffset : usize, dstOffset : usize, size : usize, other : &ubo::UniformBufferObject, commit : bool = true) {
        if let Ok (dmut d) = alias self._uniformBuffers {
            if let Ok (o) = other._uniformBuffers {
                d:.copyData (srcOffset, dstOffset, size, o, commit-> commit);
            }
        }
    }

    pub fn forceCommit (mut self) {
        if let Ok (dmut d) = alias self._uniformBuffers {
            d:.forceCommit ();
        }
    }

    /**
     * @returns: data from the uniform buffer
     * */
    pub fn getData {U} (self, offset : usize)-> U {
        if let Ok (d) = self._uniformBuffers {
            return d.getData!{U} (offset);
        }

        panic;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            stream:.write ("UBO (");
            if let Ok (o) = self._uniformBuffers {
                stream:.write (o);
            }
            stream:.write (")");
        }
    }

    impl Disposable {
        pub over dispose (mut self) {
            //for dmut uni in alias self._uniformBuffers {
            if let Ok (dmut uni) = alias self._uniformBuffers {
                uni:.dispose ();
                self._uniformBuffers = none;
            }
        }
    }

    __dtor (mut self) {
        self:.dispose ();
    }

}
