in vbo;

use balder::core::{error, dispose, memory::_, driver::_};
use vulkan::_;

/**
 * Ancestor of all vertex buffer objects
 */
// @abstract
pub class VertexBufferObject {

    // The content of the vbo
    let dmut _buf : (&Buffer)?;

    // The number of points in the vbo
    let mut _nbPoints : u32;

    /**
     * @params:
     *    - buf: the buffer containing the content of the vbo
     *    - nbPoints: the number of points in the vbo
     */
    pub self (dmut device : &VulkanDevice, nbPoints : u32, data : [f32])
        with _buf = none
        , _nbPoints = nbPoints
        throws BalderError
    {
        let dmut vbuffer = device:.getMemoryAllocator ():.allocBuffer (
            cast!u64 (data.len * f32::size),
            cast!u32 (VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFER_DST_BIT | VkBufferUsageFlagBits::VK_BUFFER_USAGE_VERTEX_BUFFER_BIT),
            cast!u32 (VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT));

        vbuffer:.update (data);
        self._buf = (alias vbuffer)?;
    }

    pub fn select (mut self) {
        if let Ok (dmut buf) = alias self._buf {
            let buffer = buf:.getVulkanBuffer ();
            let offset = 0u64;

            vkCmdBindVertexBuffers (buf:.getDevice ():.getCommandBuffer (), 0u32, 1u32, &buffer, &offset);
        }
    }

    /**
     * @returns: the buffer containing the points of the vbo
     */
    pub fn getBuffer (mut self)-> dmut (&Buffer)? {
        alias self._buf
    }

    /**
     * @returns: the number of points in the vbo
     */
    pub fn getNbPoints (self)-> u32 {
        self._nbPoints
    }

    impl Disposable {
        pub over dispose (mut self) {
            if let Ok (dmut buf) = alias self._buf {
                buf:.dispose ();
                self._buf = none;
            }

            self._nbPoints = 0u32;
        }
    }

    __dtor (mut self) {
        self:.dispose ();
    }

}


// /**
//  * @templates:
//  *    - T: the struct defining the content of each point
//  */
// @final
// pub class VertexBufferObject {record T} over vbo::VertexBufferObject {

//     /**
//      * @params:
//      *    - device: the device used to allocate the buffer
//      *    - datas: the datas to put in the buffer
//      */
//     pub self (dmut device : &VulkanDevice, datas : [T])
//         with super (cast!u32 (datas.len))

// }
