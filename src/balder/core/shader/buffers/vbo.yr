in vbo;

use balder::core::{error, dispose, memory::_, driver::_};
use vulkan::_;

/**
 * Ancestor of all vertex buffer objects
 */
// @abstract
pub class VertexBufferObject {

    // The content of the vbo
    let dmut _buf : (&Buffer)?;

    // The number of points in the vbo
    let mut _nbPoints : u32;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          CTOR/DTOR          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self ()
        with _buf = none
        , _nbPoints = 0
    {}

    /**
     * @params:
     *    - buf: the buffer containing the content of the vbo
     *    - nbPoints: the number of points in the vbo
     */
    pub self (dmut device : &VulkanDevice, nbPoints : u32, data : [f32])
        with _buf = none
        , _nbPoints = nbPoints
        throws BalderError
    {
        self:.update (alias device, nbPoints, data);
    }

    __dtor (mut self) {
        self:.dispose ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          CONFIGURE          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Update the points containined within the vertex buffer
     * */
    pub fn update (mut self, dmut device : &VulkanDevice, nbPoints : u32, data : [f32])
        throws BalderError
    {
        let dmut vbuffer = device:.getMemoryAllocator ():.allocBuffer (
            data.len * f32::size,
            cast!u32 (VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFER_DST_BIT | VkBufferUsageFlagBits::VK_BUFFER_USAGE_VERTEX_BUFFER_BIT),
            cast!u32 (VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT));

        vbuffer:.update (data);
        self._buf = (alias vbuffer)?;
        self._nbPoints = nbPoints;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          USAGE          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub fn select (self) {
        if let Ok (buf) = self._buf {
            let buffer = buf.getVulkanBuffer ();
            let offset = 0u64;

            vkCmdBindVertexBuffers (buf.getDevice ().getCommandBuffer (), 0u32, 1u32, &buffer, &offset);
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the buffer containing the points of the vbo
     */
    pub fn getBuffer (mut self)-> dmut (&Buffer)? {
        alias self._buf
    }

    /**
     * @returns: the number of points in the vbo
     */
    pub fn getNbPoints (self)-> u32 {
        self._nbPoints
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          DTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            if let Ok (dmut buf) = alias self._buf {
                buf:.dispose ();
                self._buf = none;
            }

            self._nbPoints = 0u32;
        }
    }

}
