in signal;

use std::concurrency::mail;

/*!
 * ====================================================================================================
 * ====================================================================================================
 * =====================================          SLOTS          ======================================
 * ====================================================================================================
 * ====================================================================================================
 */

@abstract
class ISlot {
    pub self () {}
    pub fn emit (self)-> void;
}

@final
pub class Slot {T of ()} over ISlot {
    let _slot : dg ()-> void;

    pub self (slot : dg ()-> void)
        with _slot = slot
    {}

    pub over emit (self)-> void {
        self._slot ();
    }
}

@final
pub class Slot {T...} over ISlot {
    let _slot : dg (T)-> void;
    let _data : T;

    pub self (data : T, slot : dg (T)-> void)
        with _slot = slot
        , _data = data
    {}

    pub over emit (self)-> void {
        cte if ((T,)::arity == 1) { self._slot (self._data); }
        else {
            self._slot (expand self._data);
        }
    }
}

/**
 * Mailbox used to receive signal and emit them in the proper thread
 * */
@{final}
pub class SlotEmitter {
    let dmut _box = copy MailBox!{&ISlot} ();
    pub self () {}

    pub fn insert (mut self, sl : &ISlot) {
        self._box:.send (sl);
    }

    /**
     * Emit all received messages
     * */
    pub fn emit (mut self) {
        while let Ok (s) = self._box:.receive () {
            s.emit ();
        }
    }

    /**
     * Clear all received message without emitting them
     * */
    pub fn clear (mut self) {
        self._box:.clear ();
    }
}

/*!
 * ====================================================================================================
 * ====================================================================================================
 * ====================================          SIGNALS          =====================================
 * ====================================================================================================
 * ====================================================================================================
 */


@abstract
pub class Signal {
    pub self () {}

    pub fn clear (mut self)-> void;

    @field
    pub fn len (self)-> usize;
}

@{final}
pub class Signal {T of ()} over Signal {

    // List of connected function pointers
    let dmut _foos : [(dg ()-> void) => &SlotEmitter] = copy [];

    /**
     * Create an empty signal connected to nothing
     * */
    pub self () {}

    /**
     * Connect a function to the signal
     * @params:
     *    - f: the function to connect
     * @info: does not reconnect the function if already found
     * @complexity: O (1)
     */
    pub fn connect (mut self, dmut slot : &SlotEmitter, f : dg ()-> void) {
        self._foos [f] = alias slot;
    }

    /**
     * Disconnect a function from the signal
     * @params:
     *    - f: the function to disconnect
     * @info: does nothing if the function was not connected
     * @complexity: O (1)
     * * */
    pub fn disconnect (mut self, f : dg ()-> void) {
        self._foos:.remove (f);
    }

    /**
     * Emit the signal (calling all the connected functions).
     * @info: run the functions in the current threads with no guarantee on calling order.
     * @params:
     *    - values: the list of parameters to pass to the connected functions.
     * */
    pub fn emit (mut self) {
        for f, dmut b in alias self._foos {
            b:.insert (copy Slot!{()} (f));
        }
    }

    /**
     * Clear all connected slots
     * */
    pub over clear (mut self) {
        self._foos = copy [];
    }

    /**
     * @returns: the number of functions connected to the signal
     * */
    @field
    pub over len (self)-> usize {
        self._foos.len
    }

}

@{final}
pub class Signal {T...} over Signal {

    // List of connected function pointers
    let dmut _foos : [(dg (T)-> void) => &SlotEmitter] = copy [];

    /**
     * Create an empty signal connected to nothing
     * */
    pub self () {}

    /**
     * Connect a function to the signal
     * @params:
     *    - f: the function to connect
     * @info: does not reconnect the function if already found
     * @complexity: O (1)
     */
    pub fn connect (mut self, dmut box : &SlotEmitter, f : dg (T)-> void) {
        self._foos [f] = alias box;
    }

    /**
     * Disconnect a function from the signal
     * @params:
     *    - f: the function to disconnect
     * @info: does nothing if the function was not connected
     * @complexity: O (1)
     * * */
    pub fn disconnect (mut self, f : dg (T)-> void) {
        self._foos:.remove (f);
    }


    /**
     * Emit the signal (calling all the connected functions).
     * @info: run the functions in the current threads with no guarantee on calling order.
     * @params:
     *    - values: the list of parameters to pass to the connected functions.
     * */
    pub fn emit (mut self, values : T) {
        for f, dmut b in alias self._foos {
            cte if ((T,)::arity == 1) {
                b:.insert (copy Slot!{T} (values, f));
            } else {
                b:.insert (copy Slot!{T} (expand values, f));
            }
        }
    }

    /**
     * Clear all connected slots
     * */
    pub over clear (mut self) {
        self._foos = copy [];
    }

    /**
     * @returns: the number of functions connected to the signal
     * */
    @field
    pub over len (self)-> usize {
        self._foos.len
    }

}
