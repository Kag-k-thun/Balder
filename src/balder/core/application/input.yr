/**
 * Input management (keyboard, mouse, etc) for Balder app.
 * @authors: Emile Cadorel
 */
in input;

use ::sdl2::_;

use std::{io, conv, time::_};

mod ::mouse;
mod ::keyboard;
mod ::window;

pub def KeyInfo : keyboard::KeyInfo;
pub def KeyEvent : keyboard::KeyEvent;

pub def MouseInfo : mouse::MouseInfo;
pub def MouseEvent : mouse::MouseEvent;

pub def WindowInputSignals : window::WindowInputSignals;

/**
 * Input manager class manages all the input that happens on a specific window.
 */
@final
pub class InputManager {

    // Buffer to poll multiple events in one go
    let dmut _eventBuffer = copy [SDL_Event () ; 10];

    // The list of signals associated to a given window
    let dmut _windowSignals : [u32 => &WindowInputSignals] = copy [];

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          CTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an empty input manager
     */
    pub self () {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          POLLING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Run the poll event function 
     * This function emits the signal
     * @info: all signals are emitted in the same thread as the call of pollEvents
     */
    pub fn pollEvents (mut self) {
        SDL_PumpEvents ();

        loop {
            let nbRead = SDL_PeepEvents (alias self._eventBuffer.ptr,
                                         cast!i32 (self._eventBuffer.len),
                                         SDL_eventaction::SDL_GETEVENT,
                                         0, u32::max);

            for i in 0 .. nbRead {
                let e = self._eventBuffer [i];
                if let Ok (dmut s) = alias self._windowSignals [e.window.windowID] {
                    if s.isFreezed () {
                        match e.type {
                            SDL_EventType::SDL_KEYDOWN         => s:.emitFreeze ();
                            SDL_EventType::SDL_MOUSEBUTTONDOWN => s:.emitFreeze ();
                            SDL_EventType::SDL_TEXTINPUT       => s:.emitFreeze ();
                            SDL_EventType::SDL_TEXTEDITING     => s:.emitFreeze ();
                            SDL_EventType::SDL_WINDOWEVENT     => s:.manageWindowEvent (e);
                        }
                    } else {
                        match e.type {
                            SDL_EventType::SDL_KEYDOWN         => s:.manageKeyDown (e);
                            SDL_EventType::SDL_KEYUP           => s:.manageKeyUp (e);
                            SDL_EventType::SDL_MOUSEBUTTONDOWN => s:.manageMouseButtonDown (e);
                            SDL_EventType::SDL_WINDOWEVENT     => s:.manageWindowEvent (e);
                            SDL_EventType::SDL_MOUSEBUTTONUP   => s:.manageMouseButtonUp (e);
                            SDL_EventType::SDL_MOUSEMOTION     => s:.manageMouseMotion (e);
                            SDL_EventType::SDL_MOUSEWHEEL      => s:.manageMouseWheel (e);
                            SDL_EventType::SDL_TEXTINPUT       => s:.manageTextInput (e);
                            SDL_EventType::SDL_TEXTEDITING     => s:.manageTextEdit (e);
                        }
                    }
                }
            }

            if (nbRead < cast!i32 (self._eventBuffer.len)) break;
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          WINDOW EVENTS          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the signal emitted when events occurs on a given window
     * @params:
     *    - winId: the window id on which event may occur
     * */
    pub fn getWindowSignals (mut self, winId : u32)-> dmut &WindowInputSignals {
        if let Ok (dmut s) = alias self._windowSignals [winId] {
            return alias s;
        }

        let dmut result = copy WindowInputSignals (winId);
        self._windowSignals [winId] = alias result;

        alias result
    }

}
