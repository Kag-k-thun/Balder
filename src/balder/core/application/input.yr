/**
 * Input management (keyboard, mouse, etc) for Balder app.
 * @authors: Emile Cadorel
 */
in input;
use sdl2::_;
use std::{io, conv, concurrency::signal, time::_};


/**
 * Keyboard event type
 */
pub enum
| NONE = 0u8
| DOWN = 1u8
| RELEASE = 2u8
| REPEAT = 3u8
| ALL = 4u8
 -> KeyEvent;

/**
 * Keyboard key info (specific key from the keyboard)
 */
pub record KeyInfo {
    pub let code : SDL_Keycode;
    pub let type : KeyEvent;
    pub self (code : SDL_Keycode, type : KeyEvent)
        with code = code
        , type = type
    {}

    pub fn opEquals (self, o : KeyInfo)-> bool {
        self.code == o.code && self.type == o.type
    }

    impl Hashable;
}

/**
 * Mouse button info (left click, right click, etc.)
 */
pub record MouseInfo {
    pub let button : u8;
    pub let type : KeyEvent;
    pub self (button : u8, type : KeyEvent)
        with button = button
        , type = type
    {}

    pub fn opEquals (self, o : MouseInfo)-> bool {
        self.button == o.button && self.type == o.type
    }

    impl Hashable;
}

/**
 * Mouse event (position and mouse info)
 */
pub record MouseEvent {
    pub let x : i32;
    pub let y : i32;
    pub let info : MouseInfo;
    pub self (x : i32, y : i32, info : MouseInfo)
        with x = x
        , y = y
        , info = info
    {}
}

/**
 * Input manager class manages all the input that happens on a specific window.
 */
@final
pub class InputManager {

    let dmut _eventBuffer = copy [SDL_Event () ; 10];

    // The list of key event that trigger signals
    let dmut _keys : [KeyInfo => Signal!{KeyInfo}] = copy [];

    // The list of key combinations that trigger signals
    let dmut _combinations : [[SDL_Keycode] => Signal!{()}] = copy [];

    // The list of mouse events that trigger signals
    let dmut _mouse : [MouseInfo => Signal!{i32, i32, MouseInfo}] = copy [];

    // The signal connected to a mouse motion
    let mut _motion = Signal!{i32, i32} ();

    // THe signal connected to the wheel motion (scrolling)
    let mut _wheel = Signal!{i32, i32, i32, i32} ();

    // The signal connected to the quit event of the window
    let mut _quit = Signal!{()} ();

    // Signal emitted when the input manager in text input mode and text is edited
    let mut _textEdit = Signal!{[c8], u32, u32} ();

    // Signal emitted when the input manager in text input mode and text is written
    let mut _textInput = Signal!{[c8]} ();

    // Signal emitted when the window is resized
    let mut _resize = Signal!{u32, u32} ();

    // List of keys currently down on the keyboard
    let dmut _isDown : [SDL_Keycode => bool] = copy [];
    
    /**
     * Create an empty input manager
     */
    pub self () {}

    /**
     * Run the poll event function 
     * This function emits the signal
     * @info: all signals are emitted in the same thread as the call of pollEvents
     */
    pub fn pollEvents (mut self) {
        SDL_PumpEvents ();
        loop {
            let nbRead = SDL_PeepEvents (alias self._eventBuffer.ptr, cast!i32 (self._eventBuffer.len), SDL_eventaction::SDL_GETEVENT, 0, u32::max);
            for i in 0 .. nbRead {
                let e = self._eventBuffer [i];
                match e.type {
                    SDL_EventType::SDL_QUIT            => self._quit.emit ();
                    SDL_EventType::SDL_KEYDOWN         => self:.manageKeyDown (e);
                    SDL_EventType::SDL_KEYUP           => self:.manageKeyUp (e);
                    SDL_EventType::SDL_MOUSEBUTTONDOWN => self.manageMouseButtonDown (e);
                    SDL_EventType::SDL_MOUSEBUTTONUP   => self.manageMouseButtonUp (e);
                    SDL_EventType::SDL_MOUSEMOTION     => self.manageMouseMotion (e);
                    SDL_EventType::SDL_MOUSEWHEEL      => self.manageMouseWheel (e);
                    SDL_EventType::SDL_WINDOWEVENT     => self.manageWindowEvent (e);
                    SDL_EventType::SDL_TEXTINPUT       => self.manageTextInput (e);
                    SDL_EventType::SDL_TEXTEDITING     => self.manageTextEdit (e);
                }
            }

            if (nbRead < cast!i32 (self._eventBuffer.len)) break;
        }
    }

    /**
     * Connect a key event to a slot.
     * @params: 
     *    - key: the keyinfo that triggers the signal
     *    - f: the closure called when the keyinfo `key` happens
     */
    pub fn connect (mut self, key : KeyInfo, f : dg (KeyInfo)-> void) {
        if let Ok (ref dmut lst) = ref self._keys [key] {
            lst:.connect (f);
        } else {
            let mut sig = Signal!{KeyInfo} ();
            sig:.connect (f);
            self._keys [key] = alias sig;
        }
    }

    /**
     * Disconnect a slot from key event.
     * @params: 
     *    - key: the keyinfo to disconnect
     *    - f: the function that will no longer be called when `key` happens
     */
    pub fn disconnect (mut self, key : KeyInfo, f : dg (KeyInfo)-> void) {
        if let Ok (ref dmut lst) = ref self._keys [key] {
            lst:.disconnect (f);
            if lst.len == 0 {
                self._keys:.remove (key);
            }
        }
    }

    /**
     * Connect a mouse event to a slot.
     * @params: 
     *    - mouse: the mouse event to connect to a slot
     *    - f: the function called when the event `mouse` happens, dg (x, y, mouse state)
     */
    pub fn connect (mut self, mouse : MouseInfo, f : dg (i32, i32, MouseInfo)-> void) {
        if let Ok (ref dmut lst) = ref self._mouse [mouse] {
            lst:.connect (f)
        } else {
            let mut sig = Signal!{i32, i32, MouseInfo} ();
            sig:.connect (f);
            self._mouse [mouse] = alias sig;
        }
    }

    /**
     * Disconnect a slot from a mouse event.
     * @params:
     *    - mouse: the mouse event to disconnect 
     *    - f: the slot that will no longer be called
     */
    pub fn disconnect (mut self, mouse : MouseInfo, f : dg (i32, i32, MouseInfo)-> void) {
        if let Ok (dmut ref lst) = ref self._mouse [mouse] {
            lst:.disconnect (f);
            if lst.len == 0 {
                self._mouse:.remove (mouse);
            }
        }
    }

    /**
     * Connect a combination event.
     * @params:
     *    - keys: the list of keys that have to be pressed down at the same time to trigger the slot event
     *    - f: the slot to call when all the keys of the combination are pressed down
     */
    pub fn connect (mut self, keys : [SDL_Keycode], f : dg ()-> void) {
        if let Ok (ref dmut lst) = ref self._combinations [keys] {
            lst:.connect (f);
        } else {
            let mut sig = Signal!{()} ();
            sig:.connect (f);
            self._combinations [keys] = alias sig;
        }        
    }

    /**
     * Disconnect a slot from a combination event.
     * @params:
     *    - keys: a combination of keys that when all pressed down trigger a signal
     *    - f: the slot that will no longer be called when the combination happens
     */
    pub fn disconnect (mut self, keys : [SDL_Keycode], f : dg ()-> void) {
        if let Ok (ref dmut lst) = ref self._combinations [keys] {
            lst:.disconnect (f);
            if lst.len == 0 {
                self._combinations:.remove (keys);
            }
        }        
    }
    
    /**
     * Connect the mouse motion event to a slot.
     * @params: 
     *  - f : a function that takes the x and y coordinates of the mouse, and that will be called each time the mouse if moved
     */
    pub fn connectMotion (mut self, f : dg (i32, i32)-> void) {
        self._motion:.connect (f);
    }

    /**
     * Disconnect a slot from the mouse motion event.
     */
    pub fn disconnectMotion (mut self, f : dg (i32, i32)-> void) {
        self._motion:.disconnect (f);
    }

    /**
     * Connect the mouse wheel event to a slot (scrolling event).
     * @params: 
     *  - f : a function that takes the x and y coordinates of the mouse, and the amount scrolled along x and y axises
     */
    pub fn connectWheel (mut self, f : dg (i32, i32, i32, i32)-> void) {
        self._wheel:.connect (f);
    }

    /**
     * Disconnect a slot from the mouse wheel event.
     */
    pub fn disconnectWheel (mut self, f : dg (i32, i32, i32, i32)-> void) {
        self._wheel:.disconnect (f);
    }

    /**
     * Connect the signal emitted when the closing event of the application is triggered (red button of the window for example). 
     */
    pub fn connectQuit (mut self, f : dg ()-> void) {
        self._quit:.connect (f);
    }

    /**
     * Disconnect the signal emitted when the application is exited
     */
    pub fn disconnectQuit (mut self, f : dg ()-> void) {
        self._quit:.disconnect (f);
    }

    /**
     * Connect the signal emitted when the application is exited
     */
    pub fn connectResize (mut self, f : dg (u32, u32)-> void) {
        self._resize:.connect (f);
    }

    /**
     * Disconnect the signal emitted when the application is exited
     */
    pub fn disconnectResize (mut self, f : dg (u32, u32)-> void) {
        self._resize:.disconnect (f);
    }
    
    /**
     * Enter input text mode
     */
    pub fn startInputText (mut self) {
        SDL_StartTextInput ();
    }

    /**
     * Exit input text mode
     */
    pub fn stopInputText (mut self) {
        SDL_StopTextInput ();
    }

    /**
     * Connect the text input signal 
     */
    pub fn connectTextInput (mut self, d : dg ([c8])-> void) {
        self._textInput:.connect (d);
    }

    /**
     * Disonnect the text input signal 
     */
    pub fn disconnectTextInput (mut self, d : dg ([c8])-> void) {
        self._textInput:.disconnect (d);
    }

    /**
     * Connect the text edit signal 
     */
    pub fn connectTextEdit (mut self, d : dg ([c8], u32, u32)-> void) {
        self._textEdit:.connect (d);
    }

    /**
     * Disconnect the text edit signal 
     */
    pub fn disconnectTextEdit (mut self, d : dg ([c8], u32, u32)-> void) {
        self._textEdit:.disconnect (d);
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ================================          MANAGING EVENTS          =================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Manage an event of type SDL_KEYDOWN
     */
    fn manageKeyDown (mut self, e : SDL_Event) {
        let key = e.key.keysym.sym;
        if !self.isDown (key) {
            self._isDown [key] = true;
            let emitted = self:.manageCombination ();            
            if !emitted {
                if let Ok (x) = self._keys [KeyInfo (key, KeyEvent::DOWN)] {
                    x.emit (KeyInfo (key, KeyEvent::DOWN));
                } else if let Ok (x) = self._keys [KeyInfo (key, KeyEvent::ALL)] {
                    x.emit (KeyInfo (key, KeyEvent::DOWN));
                }
            }
        } else {
            let emitted = self:.manageCombination ();
            if (!emitted) {
                if let Ok (x) = self._keys [KeyInfo (key, KeyEvent::REPEAT)] {
                    x.emit (KeyInfo (key, KeyEvent::REPEAT));
                } else if let Ok (x) = self._keys [KeyInfo (key, KeyEvent::ALL)] {
                    x.emit (KeyInfo (key, KeyEvent::REPEAT));
                }
            }
        }
    }
       
    /**
     * Manage a SDL_KEYDOWN event that might be involved in a combination
     */
    fn manageCombination (mut self) -> bool {
        let mut emitted = false;
        for ks, x in self._combinations {
            let mut todo = true;
            for k in ks if !self.isDown (k) {
                todo = false;
                break;
            }
            if todo { x.emit (); emitted = true; }
        }
        
        emitted
    }

    /**
     * Manage an event of type SDL_KEYUP
     */
    fn manageKeyUp (mut self, e : SDL_Event) {
        let key = e.key.keysym.sym;
        self._isDown:.remove (key);
        if let Ok (x) = self._keys [KeyInfo (key, KeyEvent::RELEASE)] {
            x.emit (KeyInfo (key, KeyEvent::RELEASE));
        } else if let Ok (x) = self._keys [KeyInfo (key, KeyEvent::ALL)] {
            x.emit (KeyInfo (key, KeyEvent::RELEASE));
        }
    }

    /**
     * Manage an event of type SDL_MOUSEBUTTONDOWN
     */
    fn manageMouseButtonDown (self, e : SDL_Event) {
        let button = e.button.button;
        if let Ok (x) = self._mouse [MouseInfo (button, KeyEvent::DOWN)] {
            x.emit (e.button.x, e.button.y, MouseInfo(button, KeyEvent::DOWN));
        } else if let Ok (x) = self._mouse [MouseInfo (button, KeyEvent::ALL)] {
            x.emit (e.button.x, e.button.y, MouseInfo (button, KeyEvent::DOWN));
        }
    }

    /**
     * Manage an event of type SDL_MOUSEBUTTONUP
     */
    fn manageMouseButtonUp (self, e : SDL_Event) {
        let button = e.button.button;
        if let Ok (x) = self._mouse [MouseInfo (button, KeyEvent::RELEASE)] {
            x.emit (e.button.x, e.button.y, MouseInfo(button, KeyEvent::RELEASE));
        } else if let Ok (x) = self._mouse [MouseInfo (button, KeyEvent::ALL)] {
            x.emit (e.button.x, e.button.y, MouseInfo (button, KeyEvent::RELEASE));
        }
    }

    /**
     * Emit the signal for a SDL_MOUSEMOTION event
     */
    fn manageMouseMotion (self, e : SDL_Event) {
        self._motion.emit (e.button.x, e.button.y);
    }

    /**
     * Emit the signal for a SDL_MOUSEWHEEL event
     */
    fn manageMouseWheel (self, e : SDL_Event) {
        let mut x = 0, mut y = 0;
        SDL_GetMouseState (alias &x, alias &y);

        self._wheel.emit (x, y, e.wheel.x, e.wheel.y);
    }   

    /**
     * Manage the event of type SDL_WINDOWEVENT
     */
    fn manageWindowEvent (self, e : SDL_Event) {
        if (e.window.event == SDL_WindowEventID::SDL_WINDOWEVENT_RESIZED || e.window.event == SDL_WindowEventID::SDL_WINDOWEVENT_SIZE_CHANGED) {
            self._resize.emit (cast!u32 (e.window.data1), cast!u32 (e.window.data2));
        }
    }

    /**
     * Manage event of type SDL_TEXTINPUT
     */
    fn manageTextEdit (self, e : SDL_Event) {
        unsafe {
            self._textEdit.emit (std::conv::fromStringZ (e.edit.text.ptr), cast!u32 (e.edit.start), cast!u32 (e.edit.length));
        }
    }

    /**
     * Manage event of type SDL_TEXTEDIT
     */
    fn manageTextInput (self, e : SDL_Event) {
        unsafe {
            self._textInput.emit (std::conv::fromStringZ (e.text.text.ptr));
        }
    }

    /**
     * @returns: true iif the key is down
     * */
    fn isDown (self, key : SDL_Keycode) -> bool {
        if let Ok (true) = self._isDown [key] {
            true
        } else {
            false
        }
    }    
}


