in pass;

use balder::core::{_, driver::_, application::_};
use balder::utils::log;

/**
 * Empty indirect command buffer loading
 */
pub fn emptyLoad (dmut _ : &IndirectCommandAllocator) {}

/**
 * Empty indirect command buffer drawing
     */
pub fn emptyDraw (dmut _ : &IndirectCommandAllocator) {}


pub class DrawPass {

    // The command allocator used by the pass
    pub let dmut cmdAlloc : (&IndirectCommandAllocator)? = none;

    // The delegate used to upload the buffers
    pub let mut loadPhase : dg (dmut &IndirectCommandAllocator)-> void = &emptyLoad;

    // The delegate used to list the draw command to store
    pub let mut drawPhase : dg (dmut &IndirectCommandAllocator)-> void = &emptyDraw;

    // The subpass renderer (not applicable for composition pass)
    pub let dmut pass : (&VulkanSubpass)? = none;

    // The list of subpass dependencies (to perform before executing this pass)
    pub let dmut dependencies : [[c8] => ()] = copy [];

    pub self () {}

    impl Disposable {
        pub over dispose (mut self) {
            log::info ("Disposing subpass command allocator");

            if let Ok (dmut cmd) = alias self.cmdAlloc {
                cmd:.dispose ();
                self.cmdAlloc = none;
            }

            self.loadPhase = &emptyLoad;
            self.drawPhase = &emptyDraw;
        }
    }

}
