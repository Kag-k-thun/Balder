in drawer;

use balder::core::_;
use balder::core::{_,
                   shader::_,
                   application::_,
                   driver::_,
                   config::_};

use balder::{utils::_, math::_};

pub mod ::color;
pub mod ::texture;

use balder::core::application::drawer::_;

@final
pub class WidgetDrawer {

    pub let dmut _app : &Application;

    let dmut _colorShader : (&Shader)? = none;
    let dmut _textureShader : (&Shader)? = none;

    let dmut _quadColorVBO = copy VertexBufferObject ();
    let dmut _quadTextureVBO = copy VertexBufferObject ();
    let dmut _quadIBO = copy IndexBufferObject!{u16} ();

    let dmut _colorWidgets : [usize => &ColorShape] = copy [];
    let dmut _textureWidgets : [usize => &TextureShape] = copy [];

    let dmut _uid = 1us;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          CTOR/DTOR          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (dmut app : &Application)
        with _app = alias app
    {}

    __dtor (mut self) {
        self:.dispose ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          CONFIGURATION          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Configure the widget drawer on the given window
     * */
    pub fn configure (mut self)
        throws BalderError
    {
        let dmut c = copy RasterShader (alias self._app:.getWindow ():.getVulkanDevice (), config::shader::BASE_SHADER_COLOR_2D);
        self._colorShader = (alias c)?;

        // let dmut t = copy RasterShader (alias self._app:.getWindow ():.getVulkanDevice (), config::shader::BASE_SHADER_COLOR_2D);
        // self._textureShader = (alias t)?;

        self._quadIBO:.update (alias self._app:.getWindow ():.getVulkanDevice (), copy [1u32, 0u32, 2u32,
                                                                             2u32, 0u32, 3u32]);

        self._quadColorVBO:.update (alias self._app:.getWindow ():.getVulkanDevice (),
                               4us,
                               copy [0.f, 0.f,
                                     0.f, 1.f,
                                     1.f, 1.f,
                                     1.f, 0.f]);

        self._quadTextureVBO:.update (alias self._app:.getWindow ():.getVulkanDevice (),
                               4us,
                               copy [0.f, 0.f, 0.0f, 0.0f,
                                     0.f, 1.f, 0.0f, 1.0f,
                                     1.f, 1.f, 1.0f, 1.0f,
                                     1.f, 0.f, 1.0f, 0.0f]);

        self._app:.getWindow ():.setComposePass (&self.loadPhase, &self:.drawPhase);
        self._app:.getInputManager ():.connectResize (&self:.onWindowResize);
    } catch {
        err => {
            log::error ("Failed to create widget drawer", err);
            throw err;
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          ADDING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Register a quad in the window to draw
     * */
    pub fn registerQuad (mut self, position : vec2, color : vec4, size : vec2, rotation : f32 = 0.f, radius : f32 = 1.f)-> dmut &ColorShape
        throws BalderError
    {
        atomic self {
            if let Ok (dmut sh) = alias self._colorShader {
                let dmut result = copy ColorShape (self._uid, alias sh, alias self._quadColorVBO, alias self._quadIBO);
                self._uid += 1;

                let dim = self._app:.getWindow ().getDimension ();
                result:.setUniformValues (ColorUniform (dimension-> makeVec2 (cast!f32 (dim._0), cast!f32 (dim._1)),
                                                        position-> position,
                                                        color-> color,
                                                        size-> size,
                                                        radius-> radius,
                                                        rotation-> rotation));

                self._colorWidgets [result.uid] = alias result;
                self._app:.getWindow ():.redraw ();
                return alias result;
            }
        }
        throw copy BalderError ("Invalid widget drawer");
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          DRAWING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Load phase of the widget drawing
     * */
    fn loadPhase (self, dmut cmd : &IndirectCommandAllocator) {
        atomic self {
            for _, c in self._colorWidgets {
                c.register (alias cmd);
            }

            for _, c in self._textureWidgets {
                c.register (alias cmd);
            }
        }
    }

    /**
     * Draw phase of the widget drawing
     * */
    fn drawPhase (mut self, dmut cmd : &IndirectCommandAllocator) {
        atomic self {
            if let Ok (dmut sh) = alias self._colorShader {
                sh.select ();
                for _, c in self._colorWidgets {
                    c.draw (alias sh, alias cmd);
                }
            }

            if let Ok (dmut sh) = alias self._textureShader {
                sh.select ();
                for _, c in self._textureWidgets {
                    c.draw (alias sh, alias cmd);
                }
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          TRIGGERS          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Triggered when the window change size
     * */
    fn onWindowResize (mut self, x : u32, y : u32) {
        for _, dmut c in alias self._colorWidgets {
            c:.setWindowDimension (makeVec2 (cast!f32 (x), cast!f32 (y)));
        }

        for _, dmut c in alias self._textureWidgets {
            c:.setWindowDimension (makeVec2 (cast!f32 (x), cast!f32 (y)));
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLEARING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Clear all loaded widgets
     * */
    pub fn clear (mut self) {
        atomic self {
            for _, dmut c in alias self._colorWidgets {
                c:.dispose ();
            }

            for _, dmut c in alias self._textureWidgets {
                c:.dispose ();
            }

            self._colorWidgets = copy [];
            self._textureWidgets = copy [];
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            self:.clear ();
            atomic self {
                if let Ok (dmut c) = alias self._colorShader {
                    c:.dispose ();
                }

                if let Ok (dmut c) = alias self._textureShader {
                    c:.dispose ();
                }

                self._quadColorVBO:.dispose ();
                self._quadTextureVBO:.dispose ();
                self._quadIBO:.dispose ();
            }
        }
    }

}
