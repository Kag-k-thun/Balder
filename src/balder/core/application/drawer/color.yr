in color;

use balder::math::_;
use balder::core::{_, driver::_, shader::_, config::_};

pub record ColorUniform {
    pub let dmut values : [f32 ; 16] = [0.f ; 16];

    pub self (dimension : vec2 = makeVec2 (1024.f, 768.f),
              position : vec2 = makeVec2 (0.f, 0.f),
              size : vec2 = makeVec2 (1.f, 1.f),
              rotation : f32 = 0.f,
              radius : f32 = 1.f,
              color : vec4 = makeVec4 (1.f, 1.f, 1.f, 1.f))
    {
        self:.setDimension (dimension);
        self:.setTranslation (position);
        self:.setScale (size);
        self:.setRadius (radius);
        self:.setRotation (rotation);
        self:.setColor (color);
    }

    pub fn setDimension (mut self, v : vec2) {
        self.values [0] = v.x;
        self.values [1] = v.y;
    }

    pub fn setTranslation (mut self, v : vec2) {
        self.values [2] = v.x;
        self.values [3] = v.y;
    }

    pub fn setScale (mut self, v : vec2) {
        self.values [4] = v.x;
        self.values [5] = v.y;
    }

    pub fn setRadius (mut self, v : f32) {
        self.values [6] = v;
    }

    pub fn setColor (mut self, v : vec4) {
        self.values [8] = v.x;
        self.values [9] = v.y;
        self.values [10] = v.z;
        self.values [11] = v.w;
    }

    pub fn setRotation (mut self, v : f32) {
        let m = math::utils::rotationZ2 (radian (v));
        self.values [12] = m.a1;
        self.values [13] = m.b1;
        self.values [14] = m.a2;
        self.values [15] = m.b2;
    }

}

pub class ColorShape {

    pub let uid : usize;

    // The position of the shape
    let dmut _uniform : ColorUniform = ColorUniform ();

    let dmut _colorUBO : &UniformBufferObject!{ColorUniform};
    let dmut _descSet : &DescriptorSet;
    let dmut _vbo : &VertexBufferObject;
    let dmut _ibo : &IndexBufferObject;

    pub self (uid : usize, dmut shader : &Shader, dmut vbo : &VertexBufferObject, dmut ibo : &IndexBufferObject)
        with uid = uid
        , _vbo = alias vbo
        , _ibo = alias ibo
        , _colorUBO = copy UniformBufferObject!{ColorUniform} (alias shader:.getDevice ())
        , _descSet = shader:.allocateDescriptorSet ()
        throws BalderError
    {
        self._descSet:.setUniform (UniformNames::WORLD, self._colorUBO);
    }

    __dtor (mut self) {
        self:.dispose ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          USAGE          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub fn register (self, dmut cmd : &IndirectCommandAllocator) {
        cmd:.registerIndexedObject (self._ibo.getNbPoints ());
    }

    pub fn draw (self, dmut _ : &Shader, dmut cmd : &IndirectCommandAllocator) {
        self._descSet.select ();
        self._vbo.select ();
        self._ibo.select ();

        cmd:.drawNextIndexed ();
    }

    /**
     * Update the values in the uniform buffer object of the shape
     * */
    fn updateUBO (mut self) {
        self._colorUBO:.update (self._uniform);
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GET/SET          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Set the rotation of the shape
     * */
    pub fn setRotation (mut self, rot : f32) {
        self._uniform:.setRotation (rot);
        self:.updateUBO ();
    }

    /**
     * Set the radius of the rounding borders of the shape
     * */
    pub fn setRadius (mut self, radius : f32) {
        self._uniform:.setRadius (radius);
        self:.updateUBO ();
    }

    /**
     * Set the color of the shape
     * */
    pub fn setWindowDimension (mut self, dim : vec2) {
        self._uniform:.setDimension (dim);
        self:.updateUBO ();
    }

    /**
     * Set all uniform values at once
     * */
    pub fn setUniformValues (mut self, values : ColorUniform) {
        self._uniform = values;
        self:.updateUBO ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            self._colorUBO:.dispose ();
            self._descSet:.dispose ();
        }
    }

}
