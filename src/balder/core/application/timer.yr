in timer;

use ::sdl2::timer;
use std::time::_;

/**
 * Time class that measure time between the start and current instant
 * @example: 
 * ===
 * let dmut timer = Timer::new (), dmut timer2 = Timer::new ();
 * for i in 0 .. 10 {
 *     timer:.reset ();
 *     heavy_computation ();
 *     println ("Iter : ", i, " took : ", timer.timeSinceStart ());
 * }
 * 
 * println ("All time : ", timer2.timeSinceStart ());
 * ===
 */
pub record Timer {

    let mut _start_time = Instant::now ();

    /**
     * Create a timer that measure time from now instant
     */
    pub self () {}

    /**
     * Reset the timer 
     */
    pub fn reset (mut self) {
        self._start_time = Instant::now ();
    }

    /**
     * Reset the timer in some duration in the past
     * @params: 
     *    - extra: the duration to remove to the Instant::now ()
     */
    pub fn reset (mut self, extra : Duration) {
        self._start_time = Instant::now () - extra;
    }

    /**
     * The duration since the last reset of the timer
     */
    pub fn timeSinceStart (self) -> Duration {
        Instant::now () - self._start_time
    }        
    
}
