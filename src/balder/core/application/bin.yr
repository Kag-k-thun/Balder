in bin;

use balder::core::shader::_;
use balder::core::driver::_;

/**
 * A garbage bin responsible for the deletion of unecessary elements Elements
 * should not be disposed individually as their deletion must be in sync with
 * window rendering thread, and make sure they are not in use in the pervious
 * indirect command buffers presented on the screen
 * */
pub class GarbageBin {

    let dmut _subPass : [&VulkanSubpass] = [];
    let dmut _descSets : [&DescriptorSet] = [];
    let dmut _textures : [&Texture] = [];
    let dmut _ubos : [&UniformBufferObject] = [];
    let dmut _vbos : [&VertexBufferObject] = [];
    let dmut _ibos : [&IndexBufferObject] = [];
    let dmut _shaders : [&Shader] = [];
    let mut _empty = true;

    pub self () {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          INSERTION          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub fn insert (mut self, dmut vk : &VulkanSubpass) {
        atomic self {
            self._subPass ~= [alias vk];
            self._empty = false;
        }
    }

    pub fn insert (mut self, dmut desc : &DescriptorSet) {
        atomic self {
            self._descSets ~= [alias desc];
            self._empty = false;
        }
    }

    pub fn insert (mut self, dmut tex : &Texture) {
        atomic self {
            self._textures ~= [alias tex];
            self._empty = false;
        }
    }

    pub fn insert (mut self, dmut u : &UniformBufferObject) {
        atomic self {
            self._ubos ~= [alias u];
            self._empty = false;
        }
    }

    pub fn insert (mut self, dmut v : &VertexBufferObject) {
        atomic self {
            self._vbos ~= [alias v];
            self._empty = false;
        }
    }

    pub fn insert (mut self, dmut i : &IndexBufferObject) {
        atomic self {
            self._ibos ~= [alias i];
            self._empty = false;
        }
    }

    pub fn insert (mut self, dmut s : &Shader) {
        atomic self {
            self._shaders ~= [alias s];
            self._empty = false;
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLEANING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Dispose all the elements put in the bin
     * */
    pub fn emptyTrash (mut self) {
        atomic self {
            if self._empty { return; }

            for dmut dc in alias self._descSets {
                dc:.dispose ();
            }

            for dmut s in alias self._subPass {
                s:.dispose ();
            }

            for dmut tex in alias self._textures {
                tex:.dispose ();
            }

            for dmut u in alias self._ubos {
                u:.dispose ();
            }

            for dmut v in alias self._vbos {
                v:.dispose ();
            }

            for dmut i in alias self._ibos {
                i:.dispose ();
            }

            for dmut s in alias self._shaders {
                s:.dispose ();
            }

            self._descSets = [];
            self._textures = [];
            self._ubos = [];
            self._vbos = [];
            self._ibos = [];
            self._shaders = [];
            self._subPass = [];
            self._empty = true;
        }
    }


}
