in texture;

use balder::math::_;
use balder::core::{_,
                   shader::_,
                   application::_,
                   driver::_,
                   config::_};

use balder::utils::_;

/**
 * A 2D textured shape
 * */
@final
pub class TextureShape over Shape {

    let dmut _ubo : &UniformBufferObject;
    let dmut _nextUbo : &UniformBufferObject;

    let dmut _descSet : &DescriptorSet;
    let mut _texture : (&Texture)? = none;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          CTOR/DTOR          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (uid : usize,
              dmut drawer : &ShapeDrawer,
              dmut shader : &Shader,
              vbo : &VertexBufferObject,
              ibo : &IndexBufferObject)

        with super (uid, alias drawer, vbo, ibo)
        , _descSet = shader:.allocateDescriptorSet ()
        , _ubo = copy UniformBufferObject (alias shader:.getDevice (), 80)
        , _nextUbo = copy UniformBufferObject (alias shader:.getDevice (), 80)

        throws BalderError
    {
        self._descSet:.setUniform (UniformNames::WORLD, self._nextUbo);
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Change the dimension of the window in which the shape is drawn
     * */
    pub over setWindowDimension (mut self, dim : vec2) {
        atomic self {
            self._ubo:.setData (0, dim, commit-> false);
            self._ubo:.setData (64, makeVec4 (0.f, 0.f, dim.x, dim.y));

            let pos = self._ubo.getData!{vec2} (8);
            let size = self._ubo.getData!{vec2} (16);

            let outOfBound = (pos.x + size.x < -(dim.x / 2.f) || pos.x > dim.x * 1.5f  || pos.y + size.y < -(dim.y / 2.f) || pos.y > dim.y * 1.5f);
            self._outOfBound = outOfBound;
        }
    }

    /**
     * Change the position of the shape in the window (in pixels, (0,0) being top left corner)
     * */
    pub over setPosition (mut self, pos : vec2) {
        atomic self {
            self._ubo:.setData (8, pos, commit-> false);

            let dim = self._ubo.getData!{vec2} (0);
            let size = self._ubo.getData!{vec2} (16);

            let outOfBound = (pos.x + size.x < -(dim.x / 2.f) || pos.x > dim.x * 1.5f  || pos.y + size.y < -(dim.y / 2.f) || pos.y > dim.y * 1.5f);

            self._outOfBound = outOfBound;
        }
    }

    /**
     * Change the size of the shape in the window (in pixels)
     */
    pub over setSize (mut self, size : vec2) {
        atomic self {
            self._ubo:.setData (16, size, commit-> false);

            let dim = self._ubo.getData!{vec2} (0);
            let pos = self._ubo.getData!{vec2} (8);

            let outOfBound = (pos.x + size.x < -(dim.x / 2.f) || pos.x > dim.x * 1.5f  || pos.y + size.y < -(dim.y / 2.f) || pos.y > dim.y * 1.5f);
            self._outOfBound = outOfBound;
        }
    }

    /**
     * Change the roundeness of the corner of the shape
     */
    pub over setRadius (mut self, v : f32) {
        atomic self {
            self._ubo:.setData (24, v, commit-> false);
        }
    }

    /**
     * Change the roundeness of the corner of the shape
     */
    pub over setLevel (mut self, v : u32) {
        atomic self {
            self._ubo:.setData (28, v, commit-> false);
        }
    }

    /**
     * Change the color of the shape
     */
    pub over setColor (mut self, v : vec4) {
        atomic self {
            self._ubo:.setData (32, v, commit-> false);
        }
    }

    /**
     * Change the rotation of the shape
     */
    pub over setRotation (mut self, v : f32) {
        atomic self {
            let m = math::utils::rotationZ2 (radian (v % 360.f));
            self._ubo:.setData (48, makeVec4 (m.a1, m.b1, m.a2, m.b2), commit-> false);
        }
    }

    /**
     * Change the scissors of the shape
     */
    pub over setScissors (mut self, v : vec4) {
        atomic self {
            self._ubo:.setData (64, v, commit-> false);
        }
    }

    /**
     * Change the texture of the shape
     * */
    pub fn setTexture (mut self, tex : (&Texture)?) {
        self._texture = tex;
        if let Err () = tex {
            self._outOfBound = true;
        }

        self._context:.redraw ();
    }

    pub fn commit (mut self, redraw : bool) {
        if redraw {
            self._context:.redraw ();
        } else {
            self._ubo:.forceCommit ();

            // Synchro to avoid modifying the ubo while the window is redrawing
            atomic self._context:.getWindow () {
                let dmut save = alias self._ubo;
                self._ubo = alias self._nextUbo;
                self._nextUbo = alias save;

                self._ubo:.copyData (0, 0, 80, self._nextUbo, commit-> true);
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          USAGE          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over register (mut self, dmut cmd : &IndirectCommandAllocator) {
        cmd:.registerIndexedObject (self._ibo.getNbPoints ());
        if let Ok (tex) = self._texture {
            self._descSet:.setTexture (TextureKind::ALBEDO, tex)?;
            self._descSet:.setUniform (UniformNames::WORLD, self._ubo)?;

            self._ubo:.forceCommit ();

            atomic self {
                let dmut save = alias self._ubo;
                self._ubo = alias self._nextUbo;
                self._nextUbo = alias save;

                self._ubo:.copyData (0, 0, 80, self._nextUbo, commit-> false);
            }
        }
    }

    pub over draw (self, dmut _ : &Shader, dmut cmd : &IndirectCommandAllocator) {
        self._descSet.select ();
        self._vbo.select ();
        self._ibo.select ();

        cmd:.drawNextIndexed ();
    }

    pub over clean (mut self) {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            let dmut bin = self._context:.getWindow ():.getGarbageBin ();
            bin:.insert (alias self._descSet);
            bin:.insert (alias self._ubo);
            bin:.insert (alias self._nextUbo);
        }
    }


}
