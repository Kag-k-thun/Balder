in shape;

use balder::math::_;
use balder::core::{_,
                   shader::_,
                   application::_,
                   driver::_,
                   config::_};


@final
pub class Shape {

    pub let uid : usize;

    let mut _currentRotation : f32 = 0.f;

    let dmut _ubo : &UniformBufferObject;
    let dmut _descSet : &DescriptorSet;

    let _vbo : &VertexBufferObject;
    let _ibo : &IndexBufferObject;

    let _texture : (&Texture)? = none;

    pub self (uid : usize, dmut shader : &Shader, vbo : &VertexBufferObject,  ibo : &IndexBufferObject, texture : (&Texture)?)
        with uid = uid
        , _descSet = shader:.allocateDescriptorSet ()
        , _ubo = copy UniformBufferObject (alias shader:.getDevice (), 64)
        , _texture = texture
        , _vbo = vbo
        , _ibo = ibo
        throws BalderError
    {
        self._descSet:.setUniform (UniformNames::WORLD, self._ubo);
        if let Ok (tex) = texture {
            self._descSet:.setTexture (TextureKind::ALBEDO, tex);
        }
    }

    __dtor (mut self) {
        self:.dispose ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Change the dimension of the window in which the shape is drawn
     * */
    pub fn setWindowDimension (mut self, v : vec2) {
        self._ubo:.setData (0, v);
    }

    /**
     * Change the position of the shape in the window (in pixels, (0,0) being top left corner)
     * */
    pub fn setPosition (mut self, v : vec2) {
        self._ubo:.setData (8, v);
    }

    /**
     * Change the size of the shape in the window (in pixels)
     */
    pub fn setSize (mut self, v : vec2) {
        self._ubo:.setData (16, v);
    }

    /**
     * Change the roundeness of the corner of the shape
     */
    pub fn setRadius (mut self, v : f32) {
        self._ubo:.setData (24, v);
    }

    /**
     * Change the color of the shape
     */
    pub fn setColor (mut self, v : vec4) {
        v;
        self._ubo:.setData (32, makeVec4 (1, 1, 1, 1));
    }

    /**
     * Change the rotation of the shape
     */
    pub fn setRotation (mut self, v : f32) {
        self._currentRotation = v % 360.f;
        let m = math::utils::rotationZ2 (radian (v % 360.f));

        self._ubo:.setData (48, makeVec4 (m.a1, m.b1, m.a2, m.b2));
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the current rotation state of the shape
     * */
    @field
    pub fn rotation (self)-> f32 {
        // degree (std::math::acos (self._uniform.values [12]))
        self._currentRotation
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          USAGE          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Register the drawing in the current draw iteration
     * */
    pub fn register (self, dmut cmd : &IndirectCommandAllocator) {
        cmd:.registerIndexedObject (self._ibo.getNbPoints ());
    }

    /**
     * Draw the shape
     * @assume: already registered and at correct index
     * */
    pub fn draw (self, dmut _ : &Shader, dmut cmd : &IndirectCommandAllocator) {
        self._descSet.select ();
        self._vbo.select ();
        self._ibo.select ();

        cmd:.drawNextIndexed ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            self._descSet:.dispose ();
            self._ubo:.dispose ();
        }
    }


}
