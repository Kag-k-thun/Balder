in window;

use ::sdl2::_;

use balder::core::application::input::_;
use balder::core::application::signal;

use std::{io, conv};
use std::{time::_};

/**
 * All events associated to a given window
 * */
pub class WindowInputSignals {

    pub let uid = 0u32;

    // The list of key event that trigger signals
    let dmut _keys : [KeyInfo => &Signal!{KeyInfo}] = copy [];

    // The list of key combinations that trigger signals
    let dmut _combinations : [[SDL_Keycode] => &Signal!{()}] = copy [];

    // The list of mouse events that trigger signals
    let dmut _mouse : [MouseInfo => &Signal!{i32, i32, MouseInfo}] = copy [];

    // The signal emitted when a double click is sent
    let dmut _doubleClick : (&Signal!{i32, i32})? = none;

    // The signal connected to a mouse motion
    let dmut _motion : (&Signal!{i32, i32})? = none;

    // THe signal connected to the wheel motion (scrolling)
    let dmut _wheel : (&Signal!{i32, i32, i32, i32})? = none;

    // The signal connected to the quit event of the window
    let dmut _quit : (&Signal!{()})? = none;

    // The signal emitted when input manager is freezed but a key was pressed
    let dmut _freezeSig : (&Signal!{()})? = none;

    // Signal emitted when the input manager in text input mode and text is edited
    let dmut _textEdit : (&Signal!{[c8], u32, u32})? = none;

    // Signal emitted when the input manager in text input mode and text is written
    let dmut _textInput : (&Signal!{[c8]})? = none;

    prot { // window events

        // Signal emitted when the window is resized
        let dmut _resize : (&Signal!{u32, u32})? = none;

        // Signal emitted when the position of the window is updated
        let dmut _moved : (&Signal!{u32, u32})? = none;

        // Signal emitted when the window is exposed
        let dmut _exposed : (&Signal!{()})? = none;

        // Signal emitted when the window is hidden
        let dmut _hidden : (&Signal!{()})? = none;

        // Signal emitted when the window is hidden
        let dmut _shown : (&Signal!{()})? = none;

        // Signal emitted when the window is maximized
        let dmut _maximized : (&Signal!{()})? = none;

        // Signal emitted when the window is minimized
        let dmut _minimized : (&Signal!{()})? = none;

        // Signal emitted when the window is restored
        let dmut _restored : (&Signal!{()})? = none;

        // Signal emitted when the mouse is entering or leaving the window
        let dmut _mouseFocus : (&Signal!{bool})? = none;

        // Signal emitted when the window gain or lose keyboard focus
        let dmut _keyboardFocus : (&Signal!{bool})? = none;

    }

    // List of keys currently down on the keyboard
    let dmut _isDown : [SDL_Keycode => ()] = copy [];

    // True iif the window has the keyboard focus
    let mut _hasKeyboardFocus : bool = false;

    // True if the window has the keyboard focus and is currently in text edit mode
    let mut _isTextInput = false;

    // The timestamp of the last left click
    let mut _lastClick = 0u32;

    // The amount of time between two clicks to be considered a double click in milliseconds
    let mut _doubleClickSensivity = 300u32;

    // Set to true when input event no longer emit signals
    let mut _freeze : bool = false;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          CTORS          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (uid : u32)
        with uid = uid
    {}


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          FREEZING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Freeze the input system and connect the freeze signal
     * */
    pub fn freeze (mut self, dmut box : &SlotEmitter, capture : dg ()-> void) {
        self._freeze = true;

        let dmut sig = copy Signal!{()} ();
        sig:.connect (alias box, capture);
        self._freezeSig = (alias sig)?;
    }

    /**
     * Resume the input system (e.g. dialog window was closed)
     * */
    pub fn resume (mut self) {
        self._freezeSig = none;
        self._freeze = false;
    }

    /**
     * @returns: true if signal are freezed
     * */
    pub fn isFreezed (self)-> bool {
        self._freeze
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =============================          KEYBOARD/MOUSE SIGNALS          =============================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the signal emitted when the keyboard key is in state 'key'
     */
    pub fn keyboard (mut self, key : KeyInfo)-> dmut &Signal!{KeyInfo} {
        if let Ok (dmut lst) = alias self._keys [key] {
            alias lst
        } else {
            let dmut sig = copy Signal!{KeyInfo} ();
            self._keys [key] = alias sig;

            alias sig
        }
    }

    /**
     * @returns: the signal emitted when the mouse button is in state 'mouse'
     */
    pub fn mouse (mut self, mouse : MouseInfo)-> dmut &Signal!{i32, i32, MouseInfo} {
        if let Ok (dmut lst) = alias self._mouse [mouse] {
            alias lst
        } else {
            let dmut sig = copy Signal!{i32, i32, MouseInfo} ();
            self._mouse [mouse] = alias sig;

            alias sig
        }
    }

    /**
     * @returns: the signal emitted when double click on left mouse button
     * */
    pub fn doubleClick (mut self)-> dmut &Signal!{i32, i32} {
        if let Ok (dmut t) = alias self._doubleClick {
            return alias t;
        }

        let dmut ret = copy Signal!{i32, i32} ();
        self._doubleClick = (alias ret)?;

        alias ret
    }

    /**
     * @returns: the signal emitted when the combination of keys is pressed
     */
    pub fn combination (mut self, keys : [SDL_Keycode])-> dmut &Signal!{()} {
        if let Ok (dmut lst) = alias self._combinations [keys] {
            alias lst
        } else {
            let dmut sig = copy Signal!{()} ();
            self._combinations [keys] = alias sig;

            alias sig
        }
    }

    /**
     * @returns: the signal emitted when the mouse is moved on the window
     */
    pub fn mouseMotion (mut self)-> dmut &Signal!{i32, i32} {
        if let Ok (dmut t) = alias self._motion {
            return alias t;
        }

        let dmut ret = copy Signal!{i32, i32} ();
        self._motion = (alias ret)?;

        alias ret
    }

    /**
     * @returns: the signal emitted when mouse wheel is moved
     */
    pub fn mouseWheel (mut self)-> dmut &Signal!{i32, i32, i32, i32} {
        if let Ok (dmut t) = alias self._wheel {
            return alias t;
        }

        let dmut ret = copy Signal!{i32, i32, i32, i32} ();
        self._wheel = (alias ret)?;

        alias ret
    }

    /**
     * @returns: the signal emitted when input manager is in text input mode, and text is inputed
     */
    pub fn textInput (mut self)-> dmut &Signal!{[c8]} {
        if let Ok (dmut t) = alias self._textInput {
            return alias t;
        }

        let dmut ret = copy Signal!{[c8]} ();
        self._textInput = (alias ret)?;

        alias ret
    }

    /**
     * @returns: the signal emitted when input manager is in text input mode, and text is editted
     */
    pub fn textEdit (mut self)-> dmut &Signal!{[c8], u32, u32} {
        if let Ok (dmut t) = alias self._textEdit {
            return alias t;
        }

        let dmut ret = copy Signal!{[c8], u32, u32} ();
        self._textEdit = (alias ret)?;

        alias ret
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          WINDOW SIGNALS          =================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the signal emitted when the window is closed
     */
    pub fn quit (mut self)-> dmut &Signal!{()} {
        if let Ok (dmut t) = alias self._quit {
            return alias t;
        }

        let dmut ret = copy Signal!{()} ();
        self._quit = (alias ret)?;

        alias ret
    }

    /**
     * @returns: the signal emitted when the window is resized
     */
    pub fn windowResized (mut self)-> dmut &Signal!{u32, u32} {
        if let Ok (dmut t) = alias self._resize {
            return alias t;
        }

        let dmut ret = copy Signal!{u32, u32} ();
        self._resize = (alias ret)?;

        alias ret
    }

    /**
     * @returns: the signal emitted when the window is moved on screen
     */
    pub fn windowMoved (mut self)-> dmut &Signal!{u32, u32} {
        if let Ok (dmut t) = alias self._moved {
            return alias t;
        }

        let dmut ret = copy Signal!{u32, u32} ();
        self._moved = (alias ret)?;

        alias ret
    }

    /**
     * @returns: the signal emitted when the window is exposed (and must be redrawn)
     */
    pub fn windowExposed (mut self)-> dmut &Signal!{()} {
        if let Ok (dmut t) = alias self._exposed {
            return alias t;
        }

        let dmut ret = copy Signal!{()} ();
        self._exposed = (alias ret)?;

        alias ret
    }

    /**
     * @returns: the signal emitted when the window is hidden
     */
    pub fn windowHidden (mut self)-> dmut &Signal!{()} {
        if let Ok (dmut t) = alias self._hidden {
            return alias t;
        }

        let dmut ret = copy Signal!{()} ();
        self._hidden = (alias ret)?;

        alias ret
    }

    /**
     * @returns: the signal emitted when the window is shown
     */
    pub fn windowShown (mut self)-> dmut &Signal!{()} {
        if let Ok (dmut t) = alias self._shown {
            return alias t;
        }

        let dmut ret = copy Signal!{()} ();
        self._shown = (alias ret)?;

        alias ret
    }

    /**
     * @returns: the signal emitted when the window is minimized
     */
    pub fn windowMinimized (mut self)-> dmut &Signal!{()} {
        if let Ok (dmut t) = alias self._minimized {
            return alias t;
        }

        let dmut ret = copy Signal!{()} ();
        self._minimized = (alias ret)?;

        alias ret
    }

    /**
     * @returns: the signal emitted when the window is maximized
     */
    pub fn windowMaximized (mut self)-> dmut &Signal!{()} {
        if let Ok (dmut t) = alias self._maximized {
            return alias t;
        }

        let dmut ret = copy Signal!{()} ();
        self._maximized = (alias ret)?;

        alias ret
    }

    /**
     * @returns: the signal emitted when the window is restored
     */
    pub fn windowRestored (mut self)-> dmut &Signal!{()} {
        if let Ok (dmut t) = alias self._restored {
            return alias t;
        }

        let dmut ret = copy Signal!{()} ();
        self._restored = (alias ret)?;

        alias ret
    }

    /**
     * @returns: the signal emitted when the window is gaining or losing mouse focus
     * */
    pub fn mouseFocus (mut self)-> dmut &Signal!{bool} {
        if let Ok (dmut t) = alias self._mouseFocus {
            return alias t;
        }

        let dmut ret = copy Signal!{bool} ();
        self._mouseFocus = (alias ret)?;

        alias ret
    }

    /**
     * @reutrns: the signal emitted when the window is gaining or losing keyboard focus
     * */
    pub fn keyboardFocus (mut self)-> dmut &Signal!{bool} {
        if let Ok (dmut t) = alias self._keyboardFocus {
            return alias t;
        }

        let dmut ret = copy Signal!{bool} ();
        self._keyboardFocus = (alias ret)?;

        alias ret
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===============================          INPUT TEXT TOGGLE          ================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Enter input text mode
     */
    pub fn startInputText (mut self) {
        if self._hasKeyboardFocus {
            SDL_StartTextInput ();
            self._isTextInput = true;
        }
    }

    /**
     * Exit input text mode
     */
    pub fn stopInputText (mut self) {
        if self._hasKeyboardFocus {
            SDL_StopTextInput ();
            self._isTextInput = false;
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          EMIT          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */


    /**
     * Manage an event of type SDL_KEYDOWN
     */
    pub fn manageKeyDown (mut self, e : SDL_Event) {
        let key = e.key.keysym.sym;
        let kind = if key !in self._isDown {
            self._isDown [key] = ();
            KeyEvent::DOWN
        } else {
            KeyEvent::REPEAT
        };

        let emitted = self:.emitCombinations ();
        if !emitted {
            if let Ok (dmut x) = alias self._keys [KeyInfo (key, kind)] {
                x:.emit (KeyInfo (key, kind));
            } else if let Ok (dmut x) = alias self._keys [KeyInfo (key, KeyEvent::ALL)] {
                x:.emit (KeyInfo (key, kind));
            }
        }
    }

    /**
     * Manage an event of type SDL_KEYUP
     */
    pub fn manageKeyUp (mut self, e : SDL_Event) {
        let key = e.key.keysym.sym;
        self._isDown:.remove (key);

        if let Ok (dmut x) = alias self._keys [KeyInfo (key, KeyEvent::RELEASE)] {
            x:.emit (KeyInfo (key, KeyEvent::RELEASE));
        } else if let Ok (dmut x) = alias self._keys [KeyInfo (key, KeyEvent::ALL)] {
            x:.emit (KeyInfo (key, KeyEvent::RELEASE));
        }
    }

    /**
     * Manage an event of type SDL_MOUSEBUTTONDOWN
     */
    pub fn manageMouseButtonDown (mut self, e : SDL_Event) {
        let button = e.button.button;

        if button == SDL_BUTTON_LEFT {
            let diff = e.common.timestamp - self._lastClick;
            self._lastClick = e.common.timestamp;

            if e.button.clicks != 1 && diff <= self._doubleClickSensivity {
                if let Ok (dmut m) = alias self._doubleClick {
                    m:.emit (e.button.x, e.button.y);
                }

                return;
            }
        }

        if let Ok (dmut x) = alias self._mouse [MouseInfo (button, KeyEvent::DOWN)] {
            x:.emit (e.button.x, e.button.y, MouseInfo(button, KeyEvent::DOWN));
        } else if let Ok (dmut x) = alias self._mouse [MouseInfo (button, KeyEvent::ALL)] {
            x:.emit (e.button.x, e.button.y, MouseInfo (button, KeyEvent::DOWN));
        }
    }

    /**
     * Manage an event of type SDL_MOUSEBUTTONUP
     */
    pub fn manageMouseButtonUp (mut self, e : SDL_Event) {
        let button = e.button.button;
        if let Ok (dmut x) = alias self._mouse [MouseInfo (button, KeyEvent::RELEASE)] {
            x:.emit (e.button.x, e.button.y, MouseInfo(button, KeyEvent::RELEASE));
        } else if let Ok (dmut x) = alias self._mouse [MouseInfo (button, KeyEvent::ALL)] {
            x:.emit (e.button.x, e.button.y, MouseInfo (button, KeyEvent::RELEASE));
        }
    }

    /**
     * Emit the signal for a SDL_MOUSEMOTION event
     */
    pub fn manageMouseMotion (mut self, e : SDL_Event) {
        if let Ok (dmut m) = alias self._motion {
            m:.emit (e.button.x, e.button.y);
        }
    }

    /**
     * Emit the signal for a SDL_MOUSEWHEEL event
     */
    pub fn manageMouseWheel (mut self, e : SDL_Event) {
        if let Ok (dmut m) = alias self._wheel {
            let mut x = 0, mut y = 0;
            SDL_GetMouseState (alias &x, alias &y);
            m:.emit (x, y, e.wheel.x, e.wheel.y);
        }
    }

    /**
     * Manage the event of type SDL_WINDOWEVENT
     */
    pub fn manageWindowEvent (mut self, e : SDL_Event) {
        match e.window.event {
            SDL_WindowEventID::SDL_WINDOWEVENT_RESIZED => {
                if let Ok (dmut m) = alias self._resize {
                    m:.emit (cast!u32 (e.window.data1), cast!u32 (e.window.data2));
                }
            }
            SDL_WindowEventID::SDL_WINDOWEVENT_SIZE_CHANGED => {
                if let Ok (dmut m) = alias self._resize {
                    m:.emit (cast!u32 (e.window.data1), cast!u32 (e.window.data2));
                }
            }
            SDL_WindowEventID::SDL_WINDOWEVENT_MOVED => {
                if let Ok (dmut m) = alias self._moved {
                    m:.emit (cast!u32 (e.window.data1), cast!u32 (e.window.data2));
                }
            }
            SDL_WindowEventID::SDL_WINDOWEVENT_EXPOSED => {
                if let Ok (dmut m) = alias self._exposed {
                    m:.emit ();
                }
            }
            SDL_WindowEventID::SDL_WINDOWEVENT_HIDDEN => {
                if let Ok (dmut m) = alias self._hidden {
                    m:.emit ();
                }
            }
            SDL_WindowEventID::SDL_WINDOWEVENT_SHOWN => {
                if let Ok (dmut m) = alias self._shown {
                    m:.emit ();
                }
            }
            SDL_WindowEventID::SDL_WINDOWEVENT_MINIMIZED => {
                if let Ok (dmut m) = alias self._minimized {
                    m:.emit ();
                }
            }
            SDL_WindowEventID::SDL_WINDOWEVENT_MAXIMIZED => {
                if let Ok (dmut m) = alias self._maximized {
                    m:.emit ();
                }
            }
            SDL_WindowEventID::SDL_WINDOWEVENT_RESTORED => {
                if let Ok (dmut m) = alias self._restored {
                    m:.emit ();
                }
            }
            SDL_WindowEventID::SDL_WINDOWEVENT_FOCUS_GAINED => {
                self._hasKeyboardFocus = true;
                if let Ok (dmut m) = alias self._keyboardFocus {
                    m:.emit (true);
                }
            }
            SDL_WindowEventID::SDL_WINDOWEVENT_FOCUS_LOST => {
                self._hasKeyboardFocus = false;
                if let Ok (dmut m) = alias self._keyboardFocus {
                    m:.emit (false);
                }
            }
            SDL_WindowEventID::SDL_WINDOWEVENT_ENTER => {
                if let Ok (dmut m) = alias self._mouseFocus {
                    m:.emit (true);
                }
            }
            SDL_WindowEventID::SDL_WINDOWEVENT_LEAVE => {
                if let Ok (dmut m) = alias self._mouseFocus {
                    m:.emit (false);
                }
            }
            SDL_WindowEventID::SDL_WINDOWEVENT_CLOSE => {
                if let Ok (dmut m) = alias self._quit && !self._freeze {
                    m:.emit ();
                }
            }
        }
    }

    /**
     * Manage event of type SDL_TEXTINPUT
     */
    pub fn manageTextEdit (mut self, e : SDL_Event) {
        if let Ok (dmut m) = alias self._textEdit {
            unsafe {
                m:.emit (std::conv::fromStringZ (e.edit.text.ptr), cast!u32 (e.edit.start), cast!u32 (e.edit.length));
            }
        }
    }

    /**
     * Manage event of type SDL_TEXTEDIT
     */
    pub fn manageTextInput (mut self, e : SDL_Event) {
        if let Ok (dmut m) = alias self._textInput {
            unsafe {
                m:.emit (std::conv::fromStringZ (e.text.text.ptr));
            }
        }
    }

    /**
     * Emit the quit signal
     * */
    pub fn emitQuit (mut self) {
        if let Ok (dmut m) = alias self._quit {
            m:.emit ();
        }
    }

    /**
     * Emit the freeze signal
     * */
    pub fn emitFreeze (mut self) {
        if let Ok (dmut m) = alias self._freezeSig {
            m:.emit ();
        }
    }

    /**
     * Check wether all keys of a combination are pressed
     * @returns: true if at least one signal has been emitted
     * */
    fn emitCombinations (mut self)-> bool {
        let mut emitted = false;

        for ks, dmut x in alias self._combinations {
            let mut todo = true;
            for k in ks if (k !in self._isDown) {
                todo = false;
                break;
            }

            if todo { x:.emit (); emitted = true; }
        }

        emitted
    }

}
