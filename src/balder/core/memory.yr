in memory;

pub mod ::free_list;
pub mod ::segment;
pub mod ::image2D;
pub mod ::buffer;
pub mod ::dyn_buffer;
pub mod ::interval;

use balder::core::{_, driver::_, memory::_};
use balder::utils::log;

use std::algorithm::comparison;
use std::{io, unit};

use ::vulkan::core;
use ::etc::c::memory;

/**
 * Memory allocator used to manage the memory of a vulkan device
 */
@final
pub class MemoryAllocator {

    // The device used by the allocator
    let dmut _device : &VulkanDevice;

    // The last uniq id given to a buffer (dynamic or static)
    let mut _lastBufferId : usize = 0us;

    // The last uniq id given to a free list
    let mut _lastId : usize = 0us;

    // The allocated memory segments for static buffers
    let dmut _staticAllocations : [usize => &FreeList] = copy [];

    // The allocated memory segments for dynamic buffers
    let dmut _dynamicAllocations : [usize => &FreeList] = copy [];

    // Local association of dynamic buffers
    let dmut _dynamicLocalBuffers : [usize => [u8]] = copy [];

    // The list of dynamic buffer to update
    let dmut _dynamicBufferToUpdate : [usize => &IntervalList] = copy [];

    // The list of commited dynamic buffers
    let dmut _commitedDynamicBuffers : [usize => &DynamicBuffer] = copy [];

    // The list of mapped allocations
    let dmut _mapped : [usize => *void] = copy [];

    // The size of a memory segment
    let mut _memorySegmentSize : usize = 0;

    // The size of a memory segment used in to allocated dynamic buffers (generally < self._memorySegmentSize)
    let mut _dynamicMemorySegmentSize : usize = 0;

    // The amount of allocated memory space
    let mut _usedMemorySpace : usize = 0;

    let mut _availableSpace : usize = 0;

    /**
     * @params:
     *   - device: the device used to allocate memory
     */
    pub self (dmut device : &VulkanDevice)
        with _device = alias device
    {
        let dmut properties = VkPhysicalDeviceProperties ();
        let mut memProperties = VkPhysicalDeviceMemoryProperties ();
        vkGetPhysicalDeviceProperties (self._device.getPhysicalDeviceHandle (), alias &properties);
        vkGetPhysicalDeviceMemoryProperties (self._device.getPhysicalDeviceHandle (), alias &memProperties);

        self._dynamicMemorySegmentSize = self._device.getConfiguration ().vulkan.uboSize;
        let remainSize = cast!usize (memProperties.memoryHeaps [0us].size) - (self._dynamicMemorySegmentSize * self._device.getConfiguration ().vulkan.uboCount);

        let nbAllocations = min (4096us, cast!usize (properties.limits.maxMemoryAllocationCount)) - self._device.getConfiguration ().vulkan.uboCount;
        self._memorySegmentSize = cast!usize (remainSize / nbAllocations);
        self._availableSpace = cast!usize (memProperties.memoryHeaps [0us].size);
    }

    /**
     * ======================================================================================================
     * ======================================================================================================
     * =============================================   GETTERS   ============================================
     * ======================================================================================================
     * ======================================================================================================
     */

    /**
     * @returns: the device used by the allocator
     */
    pub fn getDevice (mut self)-> dmut &VulkanDevice {
        alias self._device
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          MAPPING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Map the address of a memory segment and return its address
     * */
    pub fn getMapAddress (mut self, memAlloc : MemoryAllocation)-> dmut *void {
        atomic self {
            if let Ok (dmut ptr) = alias self._mapped [memAlloc.index] {
                return alias (ptr + cast!usize (memAlloc.offset));
            }

            let dmut ptr : *void = null;
            if (vkMapMemory (self._device.getDeviceHandle (), memAlloc.mem, 0, cast!u64 (memAlloc.fullSize), 0, &ptr) == VkResult::VK_SUCCESS) {
                self._mapped [memAlloc.index] = alias ptr;
                return alias (ptr + cast!usize (memAlloc.offset));
            } else {
                self._mapped:.remove (memAlloc.index);
                return null;
            }
        }
    }

    /**
     * Unmap a memory address
     * */
    pub fn unmap (mut self, memAlloc : MemoryAllocation) {
        atomic self {
            if memAlloc.index in self._mapped {
                vkUnmapMemory (self._device.getDeviceHandle (), memAlloc.mem);
                self._mapped:.remove (memAlloc.index);
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ================================          DYNAMIC UPDATES          =================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Set a dynamic buffer for an update
     * */
    pub fn setDynamicForUpdate (mut self, dmut buffer : &DynamicBuffer) {
        atomic self {
            let alloc = buffer.getMemoryAllocation ();
            if let Ok (dmut lst) = alias self._dynamicBufferToUpdate [alloc.index] {
                lst:.update (alloc.offset, alloc.size);
            } else {
                let dmut lst = copy IntervalList (alloc.fullSize);
                lst:.update (alloc.offset, alloc.size);
                self._dynamicBufferToUpdate [alloc.index] = alias lst;
            }

            self._commitedDynamicBuffers [buffer.uid] = alias buffer;
        }
    }

    /**
     * Commit the update of the dynamic buffers, and free the update list
     * */
    pub fn commitDynamicBuffers (mut self) {
        atomic self {
            for uid, interval in self._dynamicBufferToUpdate {
                if let Ok (dmut list) = alias self._dynamicAllocations [uid] {
                    if uid in self._mapped {
                        vkUnmapMemory (self._device.getDeviceHandle (), list:.getMemory ());
                        self._mapped:.remove (uid);
                    }

                    if let Ok (dmut local) = alias self._dynamicLocalBuffers [uid] {
                        // log::debug #("Memory", "Mapping : ", interval[]);
                        for range in interval[] {
                            let dmut ptr : *void = null;
                            if (vkMapMemory (self._device.getDeviceHandle (), list:.getMemory (), cast!u64 (range.start), cast!u64 (range.end - range.start), 0, alias &ptr) == VkResult::VK_SUCCESS) {
                                memcpy (ptr, cast!{*void} (local.ptr + range.start), range.end - range.start);
                                vkUnmapMemory (self._device.getDeviceHandle (), list:.getMemory ());
                            } else {
                                log::error#("Memory", "failed to map data in dynamic buffer update");
                            }
                        }
                    }
                }
            }

            for _, dmut buf in alias self._commitedDynamicBuffers {
                buf:.wasCommit (false);
            }

            self._dynamicBufferToUpdate = copy [];
            self._commitedDynamicBuffers = copy [];
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===============================          BUFFER ALLOCATION          ================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Allocate a buffer
     * @params:
     *    - size: the size of the buffer to allocate
     *    - bufferUsage: the type of buffer to allocate
     */
    pub fn allocBuffer (mut self, size : usize, bufferUsage : VkBufferUsageFlags, memoryFlags : VkMemoryPropertyFlags)-> dmut &Buffer
        throws BalderError
    {
        atomic self {
            let mut isLocal = (memoryFlags & cast!u32 (VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_COHERENT_BIT) != 0u32);
            isLocal = isLocal || (memoryFlags & cast!u32 (VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT) != 0u32);

            let mut bufferInfo = VkBufferCreateInfo ();
            bufferInfo.sType = VkStructureType::VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
            bufferInfo.size = cast!u64 (size);
            bufferInfo.usage = bufferUsage;
            bufferInfo.sharingMode = VkSharingMode::VK_SHARING_MODE_EXCLUSIVE;

            let dmut buf : VkBuffer = null;
            if (vkCreateBuffer (self._device.getDeviceHandle (), &bufferInfo, null, alias &buf) != VkResult::VK_SUCCESS) {
                throw copy BalderError ("Failed to create buffer.");
            }

            let memAlloc = self:.findSuitableStaticMemoryBuffer (buf, memoryFlags);
            let uid = self._lastBufferId + 1;
            self._lastBufferId += 1;

            return copy Buffer (uid, alias self, memAlloc, alias buf, isLocal-> isLocal);
        }
    }

    /**
     * Allocate a dynamic buffer (meant to be frequently updated, e.g. for uniform buffer objects)
     * @params:
     *    - size: the size of the buffer to allocate
     *    - bufferUsage: the type of buffer to allocate
     * @returns: a dynamic buffer
     * */
    pub fn allocDynamicBuffer (mut self, size : usize, bufferUsage : VkBufferUsageFlags, memoryFlags : VkMemoryPropertyFlags)-> dmut &DynamicBuffer
        throws BalderError
    {
        atomic self {
            let mut isLocal = (memoryFlags & cast!u32 (VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_COHERENT_BIT) != 0u32);
            isLocal = isLocal || (memoryFlags & cast!u32 (VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT) != 0u32);

            if !(isLocal) {
                throw copy BalderError ("Dynamic buffer must be local");
            }

            let mut bufferInfo = VkBufferCreateInfo ();
            bufferInfo.sType = VkStructureType::VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
            bufferInfo.size = cast!u64 (size);
            bufferInfo.usage = bufferUsage;
            bufferInfo.sharingMode = VkSharingMode::VK_SHARING_MODE_EXCLUSIVE;

            let dmut buf : VkBuffer = null;
            if (vkCreateBuffer (self._device.getDeviceHandle (), &bufferInfo, null, alias &buf) != VkResult::VK_SUCCESS) {
                throw copy BalderError ("Failed to create buffer.");
            }

            let (dmut localData, memAlloc) = alias self:.findSuitableDynamicMemoryBuffer (buf, memoryFlags);
            let uid = self._lastBufferId + 1;
            self._lastBufferId += 1;

            return copy DynamicBuffer (uid, alias self, memAlloc, alias buf, alias localData);
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ================================          FREELIST SEARCH          =================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Find a suitable free memory segment to bind to the static buffer
     * @params:
     *    - buf: the buffer to bind
     */
    fn findSuitableStaticMemoryBuffer (mut self, buf : VkBuffer, memoryFlags : VkMemoryPropertyFlags)-> MemoryAllocation
        throws BalderError
    {
        let dmut memReq = VkMemoryRequirements ();
        vkGetBufferMemoryRequirements (self._device.getDeviceHandle (), buf, alias &memReq);

        let type = self:.findMemoryType (memReq.memoryTypeBits, memoryFlags);
        for _, dmut list in alias self._staticAllocations {
            if let Ok (res) = self:.allocateBufferInList (alias list, type, buf, memReq) {
                return res;
            }
        }

        let allocSize = max (self._memorySegmentSize, cast!usize (memReq.size));
        let dmut mem = self:.allocateNewStaticMemorySegment (type, allocSize);
        if let Ok (res) = self:.allocateBufferInList (alias mem, type, buf, memReq) {
            return res;
        }

        throw copy BalderError ("Failed to allocate memory");
    }

    /**
     * Find a suitable free memory segment to bind to the dynamic buffer
     * @params:
     *    - buf: the buffer to bind
     */
    fn findSuitableDynamicMemoryBuffer (mut self, buf : VkBuffer, memoryFlags : VkMemoryPropertyFlags)-> dmut ([u8], MemoryAllocation)
        throws BalderError
    {
        let dmut memReq = VkMemoryRequirements ();
        vkGetBufferMemoryRequirements (self._device.getDeviceHandle (), buf, alias &memReq);

        let type = self:.findMemoryType (memReq.memoryTypeBits, memoryFlags);
        for _, dmut list in alias self._dynamicAllocations {
            if let Ok (res) = self:.allocateBufferInList (alias list, type, buf, memReq) {
                if let Ok (dmut localBuffer) = alias self._dynamicLocalBuffers [list.getUniqId ()] {
                    memset (cast!{*void} (localBuffer.ptr + res.offset), 0, res.size);
                    return (alias localBuffer [res.offset .. res.offset + res.size], res);
                }

                throw copy BalderError ("No local buffer associated to allocation??");
            }
        }

        let allocSize = max (self._dynamicMemorySegmentSize, cast!usize (memReq.size));
        let dmut mem = self:.allocateNewDynamicMemorySegment (type, allocSize);
        if let Ok (res) = self:.allocateBufferInList (alias mem, type, buf, memReq) {
            if let Ok (dmut localBuffer) = alias self._dynamicLocalBuffers [mem.getUniqId ()] {
                memset (cast!{*void} (localBuffer.ptr + res.offset), 0, res.size);
                return (alias localBuffer [res.offset .. res.offset + res.size], res);
            }

            throw copy BalderError ("No local buffer associated to allocation??");
        }

        throw copy BalderError ("Failed to allocate memory");
    }

    /**
     * Tries to allocate a segment in the list
     * @params:
     *    - index: the index of the free list in the list of available segments
     *    - list: the list used to try the allocation
     *    - buf: the buffer to bind
     *    - bufferInfo: the buffer creation information
     *    - memReq: the memory requirements of the allocation
     * @returns: the allocated memory segment (or none if failed)
     * */
    fn allocateBufferInList (mut self, dmut list : &FreeList, type : u32,  buf : VkBuffer, memReq : VkMemoryRequirements)-> (MemoryAllocation)?
         throws BalderError
    {
        // Cannot allocate in mismatching allocation type
        if (list.getType () != type) return none;

        let (succ, off, segIndex) = list:.findFreeSegment (cast!usize (memReq.size), cast!usize (memReq.alignment));
        if (succ) {
            list:.reserve (segIndex, off, cast!usize (memReq.size));
            let res = MemoryAllocation (
                type-> type,
                index-> list.getUniqId (),
                offset-> off,
                size-> cast!usize (memReq.size),
                fullSize-> list.getSize (),
                mem-> list:.getMemory ());

            if (vkBindBufferMemory (self._device.getDeviceHandle (), buf, list:.getMemory (), cast!u64 (off)) != VkResult::VK_SUCCESS) {
                throw copy BalderError ("Failed to bind buffer memory");
            }

            return res?;
        }

        none
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ================================          IMAGE ALLOCATION          ================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Allocate a 2D image in memory
     * @params:
     *    - width: the width of the image
     *    - height: the height of the image
     *    - imageUsage: the usage of the mmeo
     * */
    pub fn allocImage2D (mut self, width : u32, height : u32, format : VkFormat, tiling : VkImageTiling, usage : VkImageUsageFlags, memoryFlags : VkMemoryPropertyFlags, numSamples : VkSampleCountFlagBits = VkSampleCountFlagBits::VK_SAMPLE_COUNT_1_BIT)-> dmut &Image2D
        throws BalderError
    {
        atomic self {
            let mut imageInfo = VkImageCreateInfo ();
            imageInfo.sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
            imageInfo.imageType = VkImageType::VK_IMAGE_TYPE_2D;
            imageInfo.extent.width = width;
            imageInfo.extent.height = height;
            imageInfo.extent.depth = 1;
            imageInfo.mipLevels = 1;
            imageInfo.arrayLayers = 1;
            imageInfo.format = format;
            imageInfo.tiling = tiling;
            imageInfo.initialLayout = VkImageLayout::VK_IMAGE_LAYOUT_UNDEFINED;
            imageInfo.usage = usage;
            imageInfo.samples = numSamples;
            imageInfo.sharingMode = VkSharingMode::VK_SHARING_MODE_EXCLUSIVE;

            let dmut image : VkImage = null;
            if vkCreateImage (self._device.getDeviceHandle (), &imageInfo, null, alias &image) != VkResult::VK_SUCCESS {
                throw copy BalderError ("Failed to create image");
            }

            let memAlloc = self:.findSuitableMemoryImage (image, memoryFlags);
            copy Image2D (width, height, format, alias self, memAlloc, alias image)
        }
    }

    /**
     * Find a suitable free memory segment to bind to the image
     * @params:
     *    - image: the buffer to bind
     *    -
     */
    fn findSuitableMemoryImage (mut self, image : VkImage, memoryFlags : VkMemoryPropertyFlags)-> MemoryAllocation
        throws BalderError
    {
        let dmut memReq = VkMemoryRequirements ();
        vkGetImageMemoryRequirements (self._device.getDeviceHandle (), image, alias &memReq);

        let type = self:.findMemoryType (memReq.memoryTypeBits, memoryFlags);
        for _, dmut list in alias self._staticAllocations {
            if let Ok (res) = self:.allocateImageInList (alias list, type, image, memReq) {
                return res;
            }
        }

        let allocSize = max (self._memorySegmentSize, cast!usize (memReq.size));
        let dmut mem = self:.allocateNewStaticMemorySegment (type, allocSize);
        if let Ok (res) = self:.allocateImageInList (alias mem, type, image, memReq) {
            return res;
        }

        throw copy BalderError ("Failed to allocate memory");
    }

    /**
     * Tries to allocate a segment in the list
     * @params:
     *    - index: the index of the free list in the list of available segments
     *    - list: the list used to try the allocation
     *    - buf: the buffer to bind
     *    - bufferInfo: the buffer creation information
     *    - memReq: the memory requirements of the allocation
     * @returns: the allocated memory segment (or none if failed)
     * */
    fn allocateImageInList (mut self, dmut list : &FreeList, type : u32,  image : VkImage, memReq : VkMemoryRequirements)-> (MemoryAllocation)?
        throws BalderError
    {
        // Cannot allocate in mismatching allocation type
        if (list.getType () != type) return none;

        let (succ, off, segIndex) = list:.findFreeSegment (cast!usize (memReq.size), cast!usize (memReq.alignment));
        if (succ) {
            list:.reserve (segIndex, off, cast!usize (memReq.size));
            let res = MemoryAllocation (
                type-> type,
                index-> list.getUniqId (),
                offset-> off,
                size-> cast!usize (memReq.size),
                fullSize-> list.getSize (),
                mem-> list:.getMemory ());

            if (vkBindImageMemory (self._device.getDeviceHandle (), image, list:.getMemory (), cast!u64 (off)) != VkResult::VK_SUCCESS) {
                throw copy BalderError ("Failed to bind buffer memory");
            }

            return res?;
        }

        none
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =============================          NEW MEMORY ALLOCATION          ==============================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Allocate a new memory segment for static buffers
     * @params:
     *    - type: the type of memory to allocate
     *    - size: the size of the memory to allocate
     * @returns: the allocated memory segment
     */
    fn allocateNewStaticMemorySegment (mut self, type : u32, size : usize)-> dmut &FreeList
        throws BalderError
    {

        let mut memInfo = VkMemoryAllocateInfo ();
        memInfo.sType           = VkStructureType::VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
        memInfo.allocationSize  = cast!u64 (size);
        memInfo.memoryTypeIndex = type;

        let dmut mem : VkDeviceMemory = null;
        if (vkAllocateMemory (self._device.getDeviceHandle (), &memInfo, null, alias &mem) != VkResult::VK_SUCCESS) {
            throw copy BalderError ("Failed to allocate buffer memory."s8);
        }

        let uid = self._lastId;
        self._lastId += 1;

        let dmut memDesc = copy FreeList (uid, type, alias mem, size);
        self._staticAllocations [uid] = alias memDesc;

        self._usedMemorySpace += size;
        log::debug#("Memory", "Allocate new static memory space - ", MemorySize::B (size), " - used - ", MemorySize::B (self._usedMemorySpace));

        return alias memDesc;
    }


    /**
     * Allocate a new memory segment for dynamic buffers
     * @params:
     *    - type: the type of memory to allocate
     *    - size: the size of the memory to allocate
     * @returns: the allocated memory segment
     */
    fn allocateNewDynamicMemorySegment (mut self, type : u32, size : usize)-> dmut &FreeList
        throws BalderError
    {
        let mut memInfo = VkMemoryAllocateInfo ();
        memInfo.sType           = VkStructureType::VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
        memInfo.allocationSize  = cast!u64 (size);
        memInfo.memoryTypeIndex = type;

        let dmut mem : VkDeviceMemory = null;
        if (vkAllocateMemory (self._device.getDeviceHandle (), &memInfo, null, alias &mem) != VkResult::VK_SUCCESS) {
            throw copy BalderError ("Failed to allocate buffer memory."s8);
        }

        let uid = self._lastId;
        self._lastId += 1;

        let dmut memDesc = copy FreeList (uid, type, alias mem, size);
        self._dynamicAllocations [uid] = alias memDesc;
        self._dynamicLocalBuffers [uid] = copy [0u8 ; size];

        self._usedMemorySpace += size;
        log::debug #("Memory", "Allocate new dynamic memory space - ", MemorySize::B (size), " - used - ", MemorySize::B (self._usedMemorySpace));

        return alias memDesc;
    }

    /**
     * Find a memory type that can be bound to the buffer
     */
    fn findMemoryType (mut self, typeFilter : u32, properties : VkMemoryPropertyFlags)-> u32
        throws BalderError
    {
        let dmut memProperties = VkPhysicalDeviceMemoryProperties ();
        vkGetPhysicalDeviceMemoryProperties (self._device.getPhysicalDeviceHandle (), alias &memProperties);

        for i in 0u32 .. memProperties.memoryTypeCount {
            if ((typeFilter & (1u32 << i)) != 0u32 && ((memProperties.memoryTypes [i].propertyFlags & properties) != 0u32)) {
                return i;
            }
        }

        throw copy BalderError ("Failed to find suitable memory type."s8);
    }

    /**
     * ======================================================================================================
     * ======================================================================================================
     * =============================================   CLEANING   ===========================================
     * ======================================================================================================
     * ======================================================================================================
     */

    /**
     * Remove a buffer allocation
     */
    pub fn freeBuffer (mut self, dmut buf : VkBuffer, memAlloc : MemoryAllocation) {
        atomic self {
            vkDestroyBuffer (self._device.getDeviceHandle (), buf, null);

            if let Ok (dmut list) = alias self._staticAllocations [memAlloc.index] {
                list:.free (memAlloc.offset, memAlloc.size);
                if list.isEmpty () {
                    if memAlloc.index in self._mapped {
                        vkUnmapMemory (self._device.getDeviceHandle (), memAlloc.mem);
                        self._mapped:.remove (memAlloc.index);
                    }

                    vkFreeMemory (self._device.getDeviceHandle (), list:.getMemory (), null);
                    self._usedMemorySpace -= memAlloc.fullSize;
                    log::debug #("Memory", "Free static memory space - ", MemorySize::B (memAlloc.fullSize), " - used - ", MemorySize::B (self._usedMemorySpace));

                    self._staticAllocations:.remove (list.getUniqId ());
                    log::debug #("Memory", "Disposing allocation : ", list.getUniqId ());
                }
            }
        }
    }

    /**
     * Remove a dynamic buffer allocation
     */
    pub fn freeDynamicBuffer (mut self, dmut buf : VkBuffer, memAlloc : MemoryAllocation) {
        atomic self {
            vkDestroyBuffer (self._device.getDeviceHandle (), buf, null);

            if let Ok (dmut list) = alias self._dynamicAllocations [memAlloc.index] {
                list:.free (memAlloc.offset, memAlloc.size);

                if list.isEmpty () {
                    if memAlloc.index in self._mapped {
                        vkUnmapMemory (self._device.getDeviceHandle (), memAlloc.mem);
                        self._mapped:.remove (memAlloc.index);
                    }

                    vkFreeMemory (self._device.getDeviceHandle (), list:.getMemory (), null);
                    self._usedMemorySpace -= memAlloc.fullSize;
                    log::debug #("Memory", "Free dynamic memory space - ", MemorySize::B (memAlloc.fullSize), " - used - ", MemorySize::B (self._usedMemorySpace));

                    self._dynamicAllocations:.remove (list.getUniqId ());
                    self._dynamicLocalBuffers:.remove (list.getUniqId ());

                    log::debug #("Memory", "Disposing dynamic allocation : ", list.getUniqId ());
                }
            }
        }
    }

    /**
     * Remove an image allocation
     * */
    pub fn freeImage (mut self, dmut buf : VkImage, memAlloc : MemoryAllocation) {
        atomic self {
            vkDestroyImage (self._device.getDeviceHandle (), buf, null);

            if let Ok (dmut list) = alias self._staticAllocations [memAlloc.index] {
                list:.free (memAlloc.offset, memAlloc.size);
                if list.isEmpty () {
                    if memAlloc.index in self._mapped {
                        vkUnmapMemory (self._device.getDeviceHandle (), memAlloc.mem);
                        self._mapped:.remove (memAlloc.index);
                    }

                    vkFreeMemory (self._device.getDeviceHandle (), list:.getMemory (), null);
                    self._usedMemorySpace -= memAlloc.fullSize;
                    log::debug #("Memory", "Free image memory space - ", MemorySize::B (memAlloc.fullSize), " - used - ", MemorySize::B (self._usedMemorySpace));

                    self._staticAllocations:.remove (list.getUniqId ());
                    log::debug #("Memory", "Disposing allocation : ", list.getUniqId ());
                }
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            if self._staticAllocations.len != 0 || self._dynamicAllocations.len != 0us {
                log::debug #("Memory", "Disposing pending allocators");
            }

            for index, dmut list in alias self._staticAllocations {
                if index in self._mapped {
                    vkUnmapMemory (self._device.getDeviceHandle (), list:.getMemory ());
                    self._mapped:.remove (index);
                }

                vkFreeMemory (self._device.getDeviceHandle (), list:.getMemory (), null);
            }

            for index, dmut list in alias self._dynamicAllocations {
                if index in self._mapped {
                    vkUnmapMemory (self._device.getDeviceHandle (), list:.getMemory ());
                    self._mapped:.remove (index);
                }

                vkFreeMemory (self._device.getDeviceHandle (), list:.getMemory (), null);
            }

            self._dynamicAllocations = copy [];
            self._staticAllocations = copy [];
            self._dynamicLocalBuffers = copy [];
        }
    }

    __dtor (mut self) {
        self:.dispose ();
    }

}
