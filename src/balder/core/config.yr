in config;

use std::{stream, fs::_};
use std::{syntax::_, config::_};

pub mod ::shader;
pub mod ::window;
pub mod ::vulkan;
pub mod ::timer;

use balder::core::config::_;
use balder::core::error;

pub class BalderConfig {

    // The configuration of the window
    pub let dmut _window : (WindowConfig)? = none;

    // The configuration of the vulkan driver
    pub let dmut _vulkan : (VulkanConfig)? = none;

    // The configuration of the application timer
    pub let dmut _timer : (TimerConfig)? = none;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          CTORS          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Default configuration
     * */
    pub self default () {
        self._window = (WindowConfig (copy Dict ()))?;
        self._vulkan = (VulkanConfig (copy Dict ()))?;
        self._timer = (TimerConfig (copy Dict ()))?;
    }

    /**
     * Read a balder configuration from a file
     * @path:
     *    - path: the path of the configuration file
     * */
    pub self (path : [c8])
        throws BalderError
    {
        let completePath = balder::utils::path::projectPath (path);
        {
            let dmut file = File::open (completePath);
            let cfg = std::config::toml::parse (file:.readAll ());

            if let Ok (win) = cfg ["window"]? {
                let w = WindowConfig (win);
                self._window = (w)?;
            } else self._window = (WindowConfig (copy Dict ()))?;

            if let Ok (vu) = cfg ["vulkan"]? {
                let v = VulkanConfig (vu);
                self._vulkan = (v)?;
            } else self._vulkan = (VulkanConfig (copy Dict ()))?;

            if let Ok (ti) = cfg ["timer"]? {
                let t = TimerConfig (ti);
                self._timer = (t)?;
            } else self._timer = (TimerConfig (copy Dict ()))?;

            if let Ok (filter) = cfg ["log-filter"]? {
                self.configureLogFilter (filter);
            }
        } catch {
            _ : &FsError => {
                throw copy BalderError ("File not found : " ~ completePath.toStr ());
            }
            s : &SyntaxError => {
                throw copy BalderError ("Configuration format : " ~ s.msg ~ ":(" ~ std::conv::to!{[c8]} (s.line) ~ "," ~ std::conv::to!{[c8]} (s.col) ~ ")");
            }
            b : &BalderError => {
                throw b;
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          CONFIGURE          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Configure the log filters
     * */
    fn configureLogFilter (self, cfg : &Config)
        throws BalderError
    {
        if let arr : &Array = cfg {
            for f in arr[] {
                balder::utils::log::addLogFilter (f.to!{[c8]} ());
            } catch {
                _ => throw copy BalderError ("Log filter must be an array of strings");
            }
        } else {
            throw copy BalderError ("Log filter must be an array of strings");
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    @field
    pub fn window (self)-> WindowConfig {
        if let Ok (w) = self._window {
            return w;
        }

        panic;
    }

    @field
    pub fn vulkan (self)-> VulkanConfig {
        if let Ok (v) = self._vulkan {
            return v;
        }

        panic;
    }

    @field
    pub fn timer (self)-> TimerConfig {
        if let Ok (t) = self._timer {
            return t;
        }

        panic;
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          MISC          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
         stream:.writeln ("BalderConfig (");
            stream:.entabing ();
            if let Ok (w) = self._window {
                stream:.writeln ("Window : ", w);
            }

            if let Ok (v) = self._vulkan {
                stream:.writeln ("Vulkan : ", v);
            }

            if let Ok (t) = self._timer {
                stream:.writeln ("Timer : ", t);
            }

            stream:.detabing ();
            stream:.write (")");
        }
    }

}
