in vulkan;

use std::{stream, fs::_, unit};
use std::config::{_, conv::_};

use ::vulkan::core;
use balder::core::error;

pub record VulkanConfig {

    let mut _version : i32 = VK_API_VERSION_1_0;
    let mut _device : [c8] = "";
    let mut _anisotropy : bool = true;
    let mut _depth : bool = true;
    let mut _uboBufferSize : usize = MemorySize::MB (1).bytes;
    let mut _uboBufferCount : usize = 10;

    pub self (cfg : &Config)
        throws BalderError
    {
        if let Ok (f) = cfg ["version"]? {
            self._version = match f.to!{u32} () {
                10 => { VK_API_VERSION_1_0 }
                11 => { VK_API_VERSION_1_1 }
                12 => { VK_API_VERSION_1_2 }
                13 => { VK_API_VERSION_1_3 }
                _ => { throw copy BalderError ("No vulkan version : " ~ std::conv::to!{[c8]} (f)); }
            };
        }

        if let Ok (d) = cfg ["device"]? {
            self._device = d.to!{[c8]} ();
        }

        if let Ok (b) = cfg ["anisotropy"]? {
            self._anisotropy = b.to!{bool} ();
        }

        if let Ok (b) = cfg ["depth"]? {
            self._depth = b.to!{bool} ();
        }

        if let Ok (b) = cfg ["ubo-size"]? {
            self._uboBufferSize = cast!usize (b.to!{u64} ());
        }

        if let Ok (b) = cfg ["ubo-count"]? {
            self._uboBufferCount = cast!usize (b.to!{u64} ());
        }

    } catch {
        err => {
            throw copy BalderError ("Failed to read vulkan configuration : " ~ std::conv::to!{[c8]} (err));
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */


    @field
    pub fn version (self)-> i32 {
        self._version
    }

    @field
    pub fn device (self)-> [c8] {
        self._device
    }

    @field
    pub fn anisotropy (self)-> bool {
        self._anisotropy
    }

    @field
    pub fn depth (self)-> bool {
        self._depth
    }

    @field
    pub fn uboSize (self)-> usize {
        self._uboBufferSize
    }

    @field
    pub fn uboCount (self)-> usize {
        self._uboBufferCount
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          MISC          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Streamable;
}
