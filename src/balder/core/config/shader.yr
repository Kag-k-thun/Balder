in shader;

use std::{config::_, fs::_, stream};

use balder::math::_;
use balder::core::error;
use balder::utils::_;

use ::vulkan::core;

/*!
 * ====================================================================================================
 * ====================================================================================================
 * ==============================          CONFIG ENUMERATIONS          ===============================
 * ====================================================================================================
 * ====================================================================================================
 */

pub enum
| ALBEDO = "albedo"
| DEPTH  = "depth"
| NORMAL = "normal"
 -> TextureKind;

pub enum
| POSITIONS = "positions"
| NORMALS   = "normals"
| TANGENTS  = "tangents"
| COLORS    = "colors"
| TEX_UV    = "tex_uv"
| TEX_UV2   = "tex_uv2"
| BONES     = "bones"
| WEIGHTS   = "weights"
 -> VertexEntry;

pub enum
| COLOR  = "color"
| WORLD  = "world"
| CAMERA = "camera"
 -> UniformNames;

pub enum : ([c8], VkFormat, u32)
| NONE  = ("",      VkFormat::VK_FORMAT_UNDEFINED, 0)
| FLOAT = ("float", VkFormat::VK_FORMAT_R32_SFLOAT, 4)
| INT   = ("int",   VkFormat::VK_FORMAT_R32_SINT, 4)
| UINT  = ("uint",  VkFormat::VK_FORMAT_R32_UINT, 4)
| VEC2  = ("vec2",  VkFormat::VK_FORMAT_R32G32_SFLOAT, 8)
| IVEC2 = ("ivec2", VkFormat::VK_FORMAT_R32G32_SINT, 8)
| UVEC2 = ("uvec2", VkFormat::VK_FORMAT_R32G32_UINT, 8)
| VEC3  = ("vec3",  VkFormat::VK_FORMAT_R32G32B32_SFLOAT, 12)
| IVEC3 = ("ivec3", VkFormat::VK_FORMAT_R32G32B32_SINT, 12)
| UVEC3 = ("uvec3", VkFormat::VK_FORMAT_R32G32B32_UINT, 12)
| VEC4  = ("vec4",  VkFormat::VK_FORMAT_R32G32B32A32_SFLOAT, 16)
| IVEC4 = ("ivec4", VkFormat::VK_FORMAT_R32G32B32A32_SINT, 16)
| UVEC4 = ("uvec4", VkFormat::VK_FORMAT_R32G32B32A32_UINT, 16)
 -> EntryTypes;

/*!
 * ====================================================================================================
 * ====================================================================================================
 * ==============================          BASIC SHADER CONFIGS          ==============================
 * ====================================================================================================
 * ====================================================================================================
 */

pub lazy BASE_SHADER_COLOR_3D = loadBasicShaderConfig ("shaders:/base/3D/color.toml");
pub lazy BASE_SHADER_SHADOW_3D = loadBasicShaderConfig ("shaders:/base/3D/shadow.toml");

pub lazy BASE_SHADER_COLOR_2D = loadBasicShaderConfig ("shaders:/base/2D/color.toml");
pub lazy BASE_SHADER_TEXTURE_2D = loadBasicShaderConfig ("shaders:/base/2D/texture.toml");

/*!
 * ====================================================================================================
 * ====================================================================================================
 * =================================          CONFIG INNERS          ==================================
 * ====================================================================================================
 * ====================================================================================================
 */

pub record UniformInfo {
    pub let mut binding : u32 = 0;
    pub let mut size : u64 = 0;
    pub let mut stage : VkShaderStageFlags = VkShaderStageFlagBits::VK_SHADER_STAGE_ALL_GRAPHICS;
    pub self () {}
}

pub record TextureInfo {
    pub let mut binding : u32 = 0;
    pub let mut stage : VkShaderStageFlags = VkShaderStageFlagBits::VK_SHADER_STAGE_ALL_GRAPHICS;
    pub let mut magFilter : VkFilter = VkFilter::VK_FILTER_LINEAR;
    pub let mut minFilter : VkFilter = VkFilter::VK_FILTER_LINEAR;
    pub let mut addressModeU : VkSamplerAddressMode = VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_REPEAT;
    pub let mut addressModeV : VkSamplerAddressMode = VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_REPEAT;
    pub let mut addressModeW : VkSamplerAddressMode = VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_REPEAT;
    pub let mut anisotropyEnable : bool = true;
    pub let mut maxAnisotropy : f32 = 1000.f;
    pub let mut unnormalizedCoordinates : bool = false;
    pub let mut compareEnable : bool = false;
    pub let mut compareOp : VkCompareOp = VkCompareOp::VK_COMPARE_OP_ALWAYS;
    pub let mut mipmapMode : VkSamplerMipmapMode = VkSamplerMipmapMode::VK_SAMPLER_MIPMAP_MODE_LINEAR;
    pub let mut borderColor : VkBorderColor = VkBorderColor::VK_BORDER_COLOR_INT_OPAQUE_BLACK;
    pub let mut kind : [c8] = "albedo";

    pub self () {}
}

pub record ShaderPass {
    pub let mut stage : VkShaderStageFlagBits = VkShaderStageFlagBits::VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM;
    pub let mut mainFunc : [c8] = "main";
    pub let mut shaderFile : [c8] = "";

    pub self () {}
}

pub record BlendInfo {
    pub let mut enabled : bool = true;
    pub let mut srcColorBlendFactor : VkBlendFactor = VkBlendFactor::VK_BLEND_FACTOR_SRC_ALPHA;
    pub let mut dstColorBlendFactor : VkBlendFactor = VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
    pub let mut srcAlphaBlendFactor : VkBlendFactor = VkBlendFactor::VK_BLEND_FACTOR_ONE;
    pub let mut dstAlphaBlendFactor : VkBlendFactor = VkBlendFactor::VK_BLEND_FACTOR_ZERO;
    pub let mut colorBlendOp : VkBlendOp = VkBlendOp::VK_BLEND_OP_ADD;
    pub let mut alphaBlendOp : VkBlendOp = VkBlendOp::VK_BLEND_OP_ADD;

    pub self () {}
}

/*!
 * ====================================================================================================
 * ====================================================================================================
 * ==================================          CONFIG CLASS          ==================================
 * ====================================================================================================
 * ====================================================================================================
 */

@final
pub class ShaderConfig {

    let _name : [c8];

    let dmut _depth : bool = true;
    let dmut _blend = BlendInfo ();

    let dmut _vertexEntries : [VertexEntry => (VkFormat, u32)] = copy [VertexEntry::POSITIONS => (VkFormat::VK_FORMAT_R32G32B32_SFLOAT, 12u32)];

    let dmut _passes : [ShaderPass] = [];
    let dmut _uniforms : [[c8] => UniformInfo] = copy [];
    let dmut _textures : [[c8] => TextureInfo] = copy [];

    pub self empty ()
        with _name = ""
    {}

    pub self (config : [c8])
        with _name = config
        throws BalderError
    {
        let dmut file = File::open (balder::utils::path::projectPath (config));
        let cfg = std::config::toml::parse (file:.readAll ());

        self:.selectDepth (cfg);
        self:.selectBlendConfig (cfg);
        self:.selectVertexEntries (cfg);
        self:.selectPasses (cfg);

        if let Ok (d : &Dict) = cfg ["uniform"]? {
            for p, c in d[] {
                let mut un = UniformInfo ();
                un.binding = c ["binding"].to!{u32} ();
                un.size = c ["size"].to!{u64} ();
                un.stage = self.selectUniformStage (if let Ok (v) = c ["stage"].to![c8] ()? { v } else { "A" });

                self._uniforms [p] = un;
            }
        }

        if let Ok (d : &Dict) = cfg ["texture"]? {
            for p, c in d[] {
                let mut un = TextureInfo ();
                un.binding = c ["binding"].to!{u32} ();
                un.stage = self.selectUniformStage (if let Ok (Str (value-> v)) = c ["stage"]? { v } else { "A" });

                un.magFilter = self.selectFilter (if let Ok (Str (value-> v)) = c ["mag-filter"]? { v } else { "linear" });
                un.minFilter = self.selectFilter (if let Ok (Str (value-> v)) = c ["min-filter"]? { v } else { "linear" });
                un.addressModeU = self.selectAddressMode (if let Ok (v) = c ["addressModeU"].to![c8] ()? { v } else if let Ok (v) = c ["addressMode"].to![c8] ()? { v } else { "repeat" });
                un.addressModeV = self.selectAddressMode (if let Ok (v) = c ["addressModeV"].to![c8] ()? { v } else if let Ok (v) = c ["addressMode"].to![c8] ()? { v } else { "repeat" });
                un.addressModeW = self.selectAddressMode (if let Ok (v) = c ["addressModeW"].to![c8] ()? { v } else if let Ok (v) = c ["addressMode"].to![c8] ()? { v } else { "repeat" });

                un.anisotropyEnable = if let Ok (b) = c ["anisotropy"].to!{bool} ()? { b } else { true };
                un.maxAnisotropy = if let Ok (f) = c ["max-anisotropy"].to!{f32} ()? { f } else { 16.f };
                un.unnormalizedCoordinates = if let Ok (b) = c ["unnormalizedCoordinates"].to!{bool} ()? { b } else { false };
                un.compareEnable = if let Ok (b) = c ["compare"].to!{bool} ()? { b } else { false };
                un.compareOp = self.selectCompareOp (if let Ok (b) = c ["compare-op"].to!{[c8]} ()? { b } else { "always" });
                un.mipmapMode = self.selectMipMapMode (if let Ok (b) = c ["mipmap"].to!{[c8]} ()? { b } else { "near" });
                un.borderColor = self.selectBorderColor (if let Ok (b) = c ["border-color"].to!{[c8]} ()? { b } else { "f-opaque-black" });
                un.kind = if let Ok (Str (value-> v)) = c ["kind"]? { v } else { TextureKind::ALBEDO };

                self._textures [p] = un;
            }
        }
    } catch {
        err => {
            throw copy BalderError (std::format::format ("Failed to read shader configuration file => \n\t{}", err));
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub fn getUniforms (self)-> [[c8] => UniformInfo] {
        self._uniforms
    }

    pub fn getTextures (self)-> [[c8] => TextureInfo] {
        self._textures
    }

    pub fn getPasses (self)-> [ShaderPass] {
        self._passes
    }

    /**
     * @returns: the type of the vertex entry
     * */
    pub fn vertexEntry (self, name : VertexEntry)-> (VkFormat, u32) {
        if let Ok (v) = self._vertexEntries [name] {
            v
        } else {
            (VkFormat::VK_FORMAT_UNDEFINED, 0u32)
        }
    }

    /**
     * @returns: true iif the shader has the corresponding vertex entry
     * */
    pub fn hasEntry (self, name : VertexEntry)-> bool {
        name in self._vertexEntries
    }

    /**
     * @returns: the name of the loaded shader (path to toml configuration file)
     * */
    @field
    pub fn name (self)-> [c8] {
        self._name
    }

    /**
     * @returns: true if depth test is enabled
     * */
    @field
    pub fn depth (self)-> bool {
        self._depth
    }

    /**
     * @returns: true iif the color blending is enabled
     * */
    pub fn hasBlend (self)-> bool {
        self._blend.enabled
    }

    @field
    pub fn blend (self)-> BlendInfo {
        self._blend
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          PRIVATE          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    fn selectStage (self, stage : [c8])-> VkShaderStageFlagBits
        throws BalderError
    {
        match stage {
            "vertex" => { VkShaderStageFlagBits::VK_SHADER_STAGE_VERTEX_BIT }
            "fragment" => { VkShaderStageFlagBits::VK_SHADER_STAGE_FRAGMENT_BIT }
            "geometry" => { VkShaderStageFlagBits::VK_SHADER_STAGE_GEOMETRY_BIT }
            "compute" => { VkShaderStageFlagBits::VK_SHADER_STAGE_COMPUTE_BIT }
            "tessel_ctrl" => { VkShaderStageFlagBits::VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT }
            "tessel_eval" => { VkShaderStageFlagBits::VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT }
            _ => {
                throw copy BalderError ("Unknwon shader stage " ~ stage);
            }
        }
    }

    fn selectUniformStage (self, name : [c8])-> VkShaderStageFlags
        throws BalderError
    {
        let mut stage : u32 = 0u32;
        for i in 0 .. name.len {
            match name [i] {
                'f' => { stage = stage | cast!u32 (VkShaderStageFlagBits::VK_SHADER_STAGE_FRAGMENT_BIT); }
                'v' => { stage = stage | cast!u32 (VkShaderStageFlagBits::VK_SHADER_STAGE_VERTEX_BIT); }
                'g' => { stage = stage | cast!u32 (VkShaderStageFlagBits::VK_SHADER_STAGE_GEOMETRY_BIT); }
                'c' => { stage = stage | cast!u32 (VkShaderStageFlagBits::VK_SHADER_STAGE_COMPUTE_BIT); }
                'a' => { stage = stage | cast!u32 (VkShaderStageFlagBits::VK_SHADER_STAGE_ALL_GRAPHICS); }
                'A' => { stage = stage | cast!u32 (VkShaderStageFlagBits::VK_SHADER_STAGE_ALL); }
                _ => { throw copy BalderError ("Unknwon uniform shader stage " ~ name [i .. i + 1]); }
            }
        }

        stage
    }

    fn selectFilter (self, name : [c8])-> VkFilter {
        match name {
            "nearest" => { VkFilter::VK_FILTER_NEAREST }
            "linear" => { VkFilter::VK_FILTER_LINEAR }
            "cubic" => { VkFilter::VK_FILTER_CUBIC_IMG }
            "cubic-ext" => { VkFilter::VK_FILTER_CUBIC_EXT }
            _ => { VkFilter::VK_FILTER_NEAREST }
        }
    }

    fn selectAddressMode (self, name : [c8])-> VkSamplerAddressMode {
        match name {
            "repeat"            => { VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_REPEAT }
            "mirrored"          => { VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT }
            "clamp-edge"        => { VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE }
            "clamp-border"      => { VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER }
            "mirror-clamp-edge" => { VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE }
            _                   => { VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_REPEAT }
        }
    }

    fn selectCompareOp (self, name : [c8])-> VkCompareOp {
        match name {
            "never"    => { VkCompareOp::VK_COMPARE_OP_NEVER }
            "less"     => { VkCompareOp::VK_COMPARE_OP_LESS }
            "equal"    => { VkCompareOp::VK_COMPARE_OP_EQUAL }
            "less-eq"  => { VkCompareOp::VK_COMPARE_OP_LESS_OR_EQUAL }
            "great"    => { VkCompareOp::VK_COMPARE_OP_GREATER }
            "great-eq" => { VkCompareOp::VK_COMPARE_OP_GREATER_OR_EQUAL }
            "always"   => { VkCompareOp::VK_COMPARE_OP_ALWAYS }
            _ => { VkCompareOp::VK_COMPARE_OP_ALWAYS }
        }
    }

    fn selectMipMapMode (self, name : [c8])-> VkSamplerMipmapMode {
        match name {
            "near"   => { VkSamplerMipmapMode::VK_SAMPLER_MIPMAP_MODE_NEAREST }
            "linear" => { VkSamplerMipmapMode::VK_SAMPLER_MIPMAP_MODE_LINEAR }
            _        => { VkSamplerMipmapMode::VK_SAMPLER_MIPMAP_MODE_NEAREST }
        }
    }

    fn selectBorderColor (self, name : [c8])-> VkBorderColor {
        match name {
            "f-transparent-black" => { VkBorderColor::VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK }
            "i-transparent-black" => { VkBorderColor::VK_BORDER_COLOR_INT_TRANSPARENT_BLACK }
            "f-opaque-black"      => { VkBorderColor::VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK }
            "i-opaque-black"      => { VkBorderColor::VK_BORDER_COLOR_INT_OPAQUE_BLACK }
            "f-opaque-white"      => { VkBorderColor::VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE }
            "i-opaque-white"      => { VkBorderColor::VK_BORDER_COLOR_INT_OPAQUE_WHITE }
            "f-custom"            => { VkBorderColor::VK_BORDER_COLOR_FLOAT_CUSTOM_EXT }
            "i-custom"            => { VkBorderColor::VK_BORDER_COLOR_INT_CUSTOM_EXT }
            _                     => { VkBorderColor::VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          VERTEX ENTRIES          =================================
     * ====================================================================================================
     * ====================================================================================================
     */

    fn selectVertexEntries (mut self, cfg : &Config)
        throws BalderError
    {
        if let Ok (vertices) = cfg ["vertex"]? match vertices {
            d : &Dict => {
                for a, k in d[] {
                    if let Str (value-> e) = k {
                        let entry = self.selectVertexEntry (a);
                        let type = self.selectEntry (e);

                        self._vertexEntries [entry] = type;
                    } else {
                        throw copy BalderError ("Entry type must be a string " ~ to!{[c8]} (k));
                    }
                }
            }
            _ => {
                throw copy BalderError ("Vertex description must be a dictionnary");
            }
        }
    }

    fn selectVertexEntry (self, entry : [c8])-> VertexEntry
        throws BalderError
    {
        for _, name in VertexEntry::__members__ {
            if name == entry { return name; }
        }

        throw copy BalderError ("Unexpected vertex entry " ~ entry);
    }

    fn selectEntry (self, entry : [c8])-> (VkFormat, u32)
        throws BalderError
    {
        for name in EntryTypes::__members__ {
            if name._0 == entry {
                return (name._1, name._2);
            }
        }

        throw copy BalderError ("Unexpected entry type " ~ entry);
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===============================          DEPTH AND BLENDING          ===============================
     * ====================================================================================================
     * ====================================================================================================
     */

    fn selectDepth (mut self, cfg : &Config)
        throws BalderError
    {
        if let Ok (b) = cfg ["depth"]? {
            self._depth = b.to!{bool} ();
        }
    }  catch {
        _ => {
            throw copy BalderError ("Depth must be a boolean");
        }
    }

    fn selectBlendConfig (mut self, cfg : &Config)
        throws BalderError
    {
        if let Ok (d : &Dict) = cfg ["blend"]? {
            for p, c in d[] match p {
                "enabled" => { self._blend.enabled = c.to!{bool} (); }
                "src-color-factor" => { self._blend.srcColorBlendFactor = self.selectBlendFactor (c.to![c8] ()); }
                "dst-color-factor" => { self._blend.dstColorBlendFactor = self.selectBlendFactor (c.to![c8] ()); }
                "src-alpha-factor" => { self._blend.srcAlphaBlendFactor = self.selectBlendFactor (c.to![c8] ()); }
                "dst-alpha-factor" => { self._blend.dstAlphaBlendFactor = self.selectBlendFactor (c.to![c8] ()); }
                "color-op" => { self._blend.colorBlendOp = self.selectBlendOp (c.to![c8] ()); }
                "alpha-op" => { self._blend.alphaBlendOp = self.selectBlendOp (c.to![c8] ()); }
                _ => {
                    throw copy BalderError ("Unexpected blend configuration " ~ p);
                }
            }
        }
    } catch {
        b : &BalderError => throw b;
        _ => {
            throw copy BalderError ("Malformed blend configuration");
        }
    }

    fn selectBlendOp (self, name : [c8])-> VkBlendOp {
        match name {
            "add" => { VkBlendOp::VK_BLEND_OP_ADD }
            "sub" => { VkBlendOp::VK_BLEND_OP_SUBTRACT }
            "reverse-sub" => { VkBlendOp::VK_BLEND_OP_REVERSE_SUBTRACT }
            "min" => { VkBlendOp::VK_BLEND_OP_MIN }
            "max" => { VkBlendOp::VK_BLEND_OP_MAX }
            _ => { VkBlendOp::VK_BLEND_OP_ADD }
        }
    }

    fn selectBlendFactor (self, name : [c8])-> VkBlendFactor {
        match name {
            "zero" => { VkBlendFactor::VK_BLEND_FACTOR_ZERO }
            "one" => { VkBlendFactor::VK_BLEND_FACTOR_ONE }
            "src-color" => { VkBlendFactor::VK_BLEND_FACTOR_SRC_COLOR }
            "one-minus-src-color" => { VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR }
            "dst-color" => { VkBlendFactor::VK_BLEND_FACTOR_DST_COLOR }
            "one-minus-dst-color" => { VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR }
            "src-alpha" => { VkBlendFactor::VK_BLEND_FACTOR_SRC_ALPHA }
            "one-minus-src-alpha" => { VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA }
            "dst-alpha" => { VkBlendFactor::VK_BLEND_FACTOR_DST_ALPHA }
            "one-minus-dst-alpha" => { VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA }
            _ => { VkBlendFactor::VK_BLEND_FACTOR_ZERO }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          PASSES          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    fn selectPasses (mut self, cfg : &Config)
        throws BalderError
    {
        if let Ok (d : &Dict) = cfg ["pass"]? {
            self._passes = copy [ShaderPass () ; d[].len];
            for p, c in d[] {
                let mut sh = ShaderPass ();
                sh.stage = self.selectStage (p);
                sh.mainFunc = if let Ok (v) = c ["function"].to![c8] ()? { v } else { "main" };
                sh.shaderFile = c ["shader"].to![c8] ();
                let index = c ["index"].to!{u32} ();

                self._passes [index] = sh;
            }
        }
    } catch {
        err => {
            throw copy BalderError (std::format::format ("Failed to read shader configuration file => \n\t{}", err));
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          MISC          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Streamable;
}


/*!
 * ====================================================================================================
 * ====================================================================================================
 * =================================          PRIVATE UTILS          ==================================
 * ====================================================================================================
 * ====================================================================================================
 */

fn loadBasicShaderConfig (name : [c8])-> &ShaderConfig {
    copy ShaderConfig (name)
} catch {
    err => {
        log::error ("Failed to load shader configuration ", name);
        std::io::eprintln (err);
        copy ShaderConfig::empty ()
    }
}
