in window;

use std::{stream, fs::_};
use std::config::{_, conv::_};

use balder::core::error;

pub record WindowConfig {

    let mut _name : [c8] = "Balder";
    let mut _width : u32 = 1024;
    let mut _height : u32 = 768;
    let mut _resizable : bool = false;
    let mut _vsync : bool = true;

    pub self (cfg : &Config)
        throws BalderError
    {
        if let Ok (n) = cfg ["name"]? {
            self._name = n.to![c8] ();
        }

        if let Ok (w) = cfg ["width"]? {
            self._width = cast!{u32} (w.to!{i64} ());
        }

        if let Ok (h) = cfg ["height"]? {
            self._height = cast!{u32} (h.to!{i64} ());
        }

        if let Ok (b) = cfg ["resizable"]? {
            self._resizable = b.to!{bool} ();
        }

        if let Ok (b) = cfg ["vsync"]? {
            self._vsync = b.to!{bool} ();
        }
    } catch {
        err => {
            throw copy BalderError ("Failed to read window configuration : " ~ std::conv::to!{[c8]} (err));
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    @field
    pub fn name (self)-> [c8] {
        self._name
    }

    @field
    pub fn width (self)-> u32 {
        self._width
    }

    @field
    pub fn height (self)-> u32 {
        self._height
    }

    @field
    pub fn resizable (self)-> bool {
        self._resizable
    }

    @field
    pub fn vsync (self)-> bool {
        self._vsync
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          MISC          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Streamable;
}
