in shader;


pub mod ::buffers;
pub mod ::layout;
pub mod ::desc_set;

pub mod ::texture;

mod ::implem;

use balder::core::{_, config::_, shader::_, driver::_};
use balder::math::vector;

use ::vulkan::core;
use std::{conv, fs::_};

/**
 * Ancestor of all kind of shaders
 */
@abstract
pub class Shader {

    // The vulkan device holding the shader
    let dmut _device : &VulkanDevice;

    // The layout of the shader
    let dmut _pipelineLayout : &PipelineLayout;

    // The configuration of the shader
    let _config : &ShaderConfig;

    // The vulkan handle
    let mut _program : VkPipeline = null;

    pub self (dmut device : &VulkanDevice, config : &ShaderConfig)
        with _device = alias device
        , _config = config
        , _pipelineLayout = copy PipelineLayout (alias device, config)
        throws BalderError
    {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the device used by the shader
     */
    pub fn getDevice (mut self)-> dmut &VulkanDevice {
        alias self._device
    }

    /**
     * @returns: the pipeline layout of the shader
     */
    pub fn getPipelineLayout (mut self)-> dmut &PipelineLayout {
        alias self._pipelineLayout
    }

    /**
     * @returns: the device used by the shader
     */
    pub fn getDevice (self)-> &VulkanDevice {
        self._device
    }

    /**
     * @returns: the pipeline layout of the shader
     */
    pub fn getPipelineLayout (self)-> &PipelineLayout {
        self._pipelineLayout
    }


    /**
     * @returns: the information about the configuration of the shader
     * */
    pub fn getConfig (self)-> &ShaderConfig {
        self._config
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          UNIFORM          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Allocate a descriptor set to bind uniform values to the shader
     * */
    pub fn allocateDescriptorSet (mut self)-> dmut &DescriptorSet
        throws BalderError
    {
        let dmut sets = self._device:.getDescriptorAllocator ():.allocate (self._pipelineLayout.getDescriptorSetLayout (),
                                                                           self.getDescriptorPoolSize ());

        let dmut s = copy DescriptorSet (alias self, alias sets);
        s:.createSamplers ();

        alias s
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          SELECTION          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Use the shader for the next drawings
     */
    pub fn select (self) {
        vkCmdBindPipeline (self._device.getCommandBuffer (), VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_GRAPHICS, self._program);
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          CONFIGURATION          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    fn getDescriptorPoolSize (self)-> [VkDescriptorType] {
        let dmut res : [VkDescriptorType] = [];
        res ~= copy [VkDescriptorType::VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER ; self._config.getUniforms ().len];
        res ~= copy [VkDescriptorType::VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER ; self._config.getTextures ().len];

        res
    }

    fn generateFieldInfos (self)-> ([(u32, VkFormat)], u32) {
        let dmut result = copy [(0u32, VkFormat::VK_FORMAT_R32G32B32_SFLOAT)];
        let mut currOffset = 3u32 * f32::size;

        if self._config.normals {
            result ~= [(currOffset, VkFormat::VK_FORMAT_R32G32B32_SFLOAT)];
            currOffset += 3u32 * f32::size;
        }

        if self._config.colors {
            result ~= [(currOffset, VkFormat::VK_FORMAT_R32G32B32_SFLOAT)];
            currOffset += 3u32 * f32::size;
        }

        if self._config.textureUVs {
            result ~= [(currOffset, VkFormat::VK_FORMAT_R32G32_SFLOAT)];
            currOffset += 2u32 * f32::size;
        }

        if self._config.textureUVs2 {
            result ~= [(currOffset, VkFormat::VK_FORMAT_R32G32_SFLOAT)];
            currOffset += 2u32 * f32::size;
        }

        if self._config.bones {
            result ~= [(currOffset, VkFormat::VK_FORMAT_R32G32B32A32_SFLOAT)];
            currOffset += 4u32 * f32::size;
        }

        if self._config.weights {
            result ~= [(currOffset, VkFormat::VK_FORMAT_R32G32B32A32_SFLOAT)];
            currOffset += 4u32 * f32::size;
        }

        (result, currOffset)
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {}
    }
    
}
   

pub def ComposeShader : implem::compose::ComposeShader;
pub def SubpassShader : implem::subpass::SubpassShader;
