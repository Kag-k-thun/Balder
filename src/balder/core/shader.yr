in shader;


pub mod ::vbo;
pub mod ::ubo;
pub mod ::ibo;

pub mod ::layout;
pub mod ::desc_set;
pub mod ::config;

pub mod ::texture;

mod ::compose;
mod ::subpass;

use balder::core::{_, shader::_, driver::_};
use balder::math::vector;

use vulkan::_;
use std::{conv, fs::_};

/**
 * Ancestor of all kind of shaders
 */
@abstract
pub class Shader {

    // The vulkan device holding the shader
    let dmut _device : &VulkanDevice;

    // The layout of the shader
    let dmut _pipelineLayout : &PipelineLayout;

    // The uniform binding descriptor set
    let dmut _descSet : (&DescriptorSet)? = none;

    // The configuration of the shader
    let _config : &ShaderConfig;

    // The vulkan handle
    let mut _program : VkPipeline = null;

    pub self (dmut device : &VulkanDevice, config : &ShaderConfig)
        with _device = alias device
        , _config = config
        , _pipelineLayout = copy PipelineLayout (alias device, config)
        throws BalderError
    {
        let sizes = self.getDescriptorPoolSize (config);
        let dmut sets = device:.getDescriptorAllocator ():.allocate (self._pipelineLayout:.getDescriptorSetLayout (), sizes);
        self._descSet = (copy DescriptorSet (alias self, alias sets))?;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the device used by the shader
     */
    pub fn getDevice (mut self)-> dmut &VulkanDevice {
        alias self._device
    }

    /**
     * @returns: the pipeline layout of the shader
     */
    pub fn getPipelineLayout (mut self)-> dmut &PipelineLayout {
        alias self._pipelineLayout
    }

    /**
     * @returns: the information about the configuration of the shader
     * */
    pub fn getConfig (self)-> &ShaderConfig {
        self._config
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          UNIFORM          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub fn setUniform (mut self, name : [c8], dmut ubo : &UniformBufferObject)
        throws BalderError
    {
        if let Ok (dmut d) = alias self._descSet {
            d:.setUniform (name, alias ubo);
        }
    }

    pub fn setTexture (mut self, name : [c8], dmut texture : &Texture)
        throws BalderError
    {
        if let Ok (dmut d) = alias self._descSet {
            d:.setTexture (name, alias texture);
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          SELECTION          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Use the shader for the next drawings
     */
    pub fn select (mut self) {
        vkCmdBindPipeline (self._device:.getCommandBuffer (), VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_GRAPHICS, self._program);

        let extent = self._device.getSwapchainExtent ();
        let mut viewport = VkViewport ();

        viewport.width = cast!f32 (extent.width);
        viewport.height = cast!f32 (extent.height);
        viewport.maxDepth = 1.0f;

        vkCmdSetViewport (self._device:.getCommandBuffer (), 0u32, 1u32, &viewport);

        let mut scissor = VkRect2D ();
        scissor.extent = extent;

        vkCmdSetScissor (self._device:.getCommandBuffer (), 0u32, 1u32, &scissor);

        if let Ok (dmut d) = alias self._descSet {
            d:.select ();
        }
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          CONFIGURATION          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    fn getDescriptorPoolSize (self, config : &ShaderConfig)-> [VkDescriptorType] {
        let dmut res : [VkDescriptorType] = [];
        res ~= copy [VkDescriptorType::VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER ; config.getUniforms ().len];
        res ~= copy [VkDescriptorType::VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER ; config.getTextures ().len];

        res
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {}
    }
    
}
   

pub def ComposeShader {T} : compose::ComposeShader!{T};
pub def SubpassShader {T} : subpass::SubpassShader!{T};
