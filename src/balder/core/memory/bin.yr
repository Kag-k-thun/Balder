in bin;

use balder::utils::_;
use balder::core::dispose;


@abstract
pub class IResourceBin {
    pub self () {}
    pub fn emptyTrash (mut self)-> bool;
}

@{final}
pub class ResourceBin {T impl Disposable} over IResourceBin {

    let dmut _bin : [T] = [];

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          CTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self () {}

    pub fn insert (mut self, dmut object : T) {
        atomic self {
            self._bin ~= [alias object];
        }
    }

    /**
     * Clean the bin
     * @returns: true iif something was disposed
     * */
    pub over emptyTrash (mut self)-> bool {
        atomic self {
            if self._bin.len == 0 { return false; }

            for dmut obj in alias self._bin {
                obj:.dispose ();
            }

            __version DEBUG {
                let name = T::__typeinfo__.name;
                log::debug #("GarbageBin", "Disposing", self._bin.len, name);
            }

            self._bin = [];
        }

        true
    }
}

/**
 * A garbage bin responsible for the deletion of unecessary elements Elements
 * should not be disposed individually as their deletion must be in sync with
 * window rendering thread, and make sure they are not in use in the pervious
 * indirect command buffers presented on the screen
 * */
pub class GarbageBin {

    let dmut _bins : [[c8] => &IResourceBin] = copy [];

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          CTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self () {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          REGISTRATION          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub fn get {T over &IResourceBin} (mut self)-> dmut T {
        if let Ok (dmut x : T) = self._bins [T::__typeinfo__.name] {
            return alias x;
        }

        let dmut result = copy T ();
        self._bins [T::__typeinfo__.name] = alias result;

        alias result
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLEANING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub fn emptyTrash (mut self) {
        let mut delete = true;

        while delete {
            delete = false;
            for _, dmut b in alias self._bins {
                if b:.emptyTrash () {
                    delete = true;
                }
            }
        }
    }
}
