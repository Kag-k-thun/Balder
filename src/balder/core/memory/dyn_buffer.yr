in dyn_buffer;

use balder::core::{memory, memory::_, driver::device};
use balder::core::{error, dispose};
use balder::utils::log;

use ::vulkan::core;
use ::etc::c::memory;


/**
 * A dynamic buffer is a buffer that is meant to be updated frequently.
 * Unlike normal Buffer, this class upload data (if updated) at a given
 * frequency to the vulkan device, instead of immediately, allowing for upload
 * grouping directly managed by the memory allocator
 * */
@final
pub class DynamicBuffer {

    pub let uid : usize;

    let dmut _device  : &VulkanDevice;

    let dmut _allocator : &MemoryAllocator;

    let dmut _localData : [u8];

    let dmut _buffer : VkBuffer = null;

    let mut _memAlloc : MemoryAllocation;

    let mut _descriptor : VkDescriptorBufferInfo = VkDescriptorBufferInfo ();

    // True iif the buffer is commited for upload in the allocator
    let mut _wasCommit : bool = false;

    /**
     * ======================================================================================================
     * ======================================================================================================
     * =======================================   CTOR AND CONFIGURE  ========================================
     * ======================================================================================================
     * ======================================================================================================
     */

    pub self (uid : usize, dmut alloc : &MemoryAllocator, memAlloc : MemoryAllocation, dmut buffer : VkBuffer, dmut localData : [u8])
        with uid = uid
        , _allocator = alias alloc
        , _device = alias alloc:.getDevice ()
        , _memAlloc = memAlloc
        , _buffer = alias buffer
        , _localData = alias localData
    {
        self._descriptor.buffer = buffer;
        self._descriptor.offset = 0u64;
        self._descriptor.range = cast!u64 (memAlloc.size);
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the handle on the vulkan buffer
     */
    pub fn getVulkanBuffer (self)-> VkBuffer {
        self._buffer
    }

    /**
     * @returns: the device responsible of the allocation of the buffer
     */
    pub fn getDevice (mut self)-> dmut &VulkanDevice {
        alias self._device
    }

    /**
     * @returns: the device responsible of the allocation of the buffer
     */
    pub fn getDevice (self)-> &VulkanDevice {
        self._device
    }

    /**
     * @returns: the size of the buffer in memory
     */
    pub fn getSize (self)-> usize {
        self._memAlloc.size
    }

    /**
     * @returns: the address of the descriptor buffer info
     */
    pub fn getDescriptorInfo (mut self)-> dmut *VkDescriptorBufferInfo {
        alias &self._descriptor
    }

    /**
     * @returns: the memory description of the buffer
     * */
    pub fn getMemoryAllocation (self)-> MemoryAllocation {
        self._memAlloc
    }

    /**
     * @returns: true if already commited in the current interface frame
     * */
    pub fn wasCommit (self)-> bool {
        self._wasCommit
    }

    /**
     * Set wasCommit in the current frame
     * */
    pub fn wasCommit (mut self, b : bool) {
        self._wasCommit = b;
    }

    /**
     * @returns: data from the local buffer
     * @params:
     *    - offset: the offset in bytes where the read is done
     * */
    pub fn getData {U} (self, offset : usize)-> U {
        let val : [u8 ; U::size] = [0 ; U::size];
        memcpy (cast!{*void} (val.ptr), cast!{*void} (self._localData.ptr + offset), U::size);

        unsafe { *(cast!{*U} (val.ptr)) }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          UPDATING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Update the data of the dynamic buffer and put the buffer for upload in the associated allocator
     * */
    pub fn setData {U} (mut self, offset : usize, value : U) {
        memcpy (cast!{*void} (self._localData.ptr + offset), cast!{*void} (&value), U::size);
        if !self._wasCommit {
            self._allocator:.setDynamicForUpdate (alias self);
            self._wasCommit = true;
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            if self._buffer != null {
                self._allocator:.freeDynamicBuffer (alias self._buffer, self._memAlloc);
                self._buffer = null;
                self._localData = [];
                self._memAlloc = MemoryAllocation ();
            }
        }
    }

    __dtor (mut self) {
        self:.dispose ();
    }

}
