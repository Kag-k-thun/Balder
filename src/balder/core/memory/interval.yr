in interval;

use free_list;

pub class IntervalList {

    // The size of the memory segment
    let _size : usize;

    // The memory segments
    pub let dmut _segments : [FreeSegment] = [];

    pub self (size : usize)
        with _size = size
    {}

    pub fn opIndex (self)-> [FreeSegment] {
        self._segments
    }

    /**
     * Free a segment
     * @params:
     *    - offset: the start of the segment
     *    - size: the size of the segment to reserve
     * @assume the segment was reserved
     */
    pub fn update (mut self, offset : usize, size : usize) {
        if self._segments.len == 0 {
            self._segments = copy [FreeSegment (offset, offset + size)];
            return;
        }

        let mut index = 0us;
        // searching where to insert the free segment
        for seg in self._segments {
            // Collision of segments
            if seg.start <= offset && seg.end >= offset + size { return; }

            if offset + size <= seg.start { break; }
            index += 1;
        }

        // Free at the beginning
        if index == 0 {
            if self._segments [0].start == offset + size { // collide first free
                self._segments [0].start = offset;
            } else {
                self._segments = [FreeSegment (offset, offset + size)] ~ self._segments;
            }

            return;
        }

        // Free at the end
        if index == self._segments.len {
            if self._segments [$ - 1].end == offset { // collide last free
                self._segments [$ - 1].end += size;
            } else {
                self._segments ~= [FreeSegment (offset, offset + size)];
            }

            return;
        }


        // Middle insertion
        // 1. collide with left and right
        if self._segments [index - 1].end == offset && self._segments [index].start == offset + size {
            self._segments [index - 1].end = self._segments [index].end;
            self._segments = self._segments [0 .. index] ~ self._segments [index + 1 .. $];

            return;
        }

        // 2. Collide with left
        if self._segments [index - 1].end == offset {
            self._segments [index - 1].end += size;
            return;
        }

        // 3. Collide with right
        if self._segments [index].start == offset + size {
            self._segments [index].start = offset;
            return;
        }

        // 4. new fragment
        self._segments = self._segments [0 .. index] ~ [FreeSegment (offset, offset + size)] ~ self._segments [index .. $];
    }

}
