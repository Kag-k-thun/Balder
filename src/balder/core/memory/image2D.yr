in image2D;

use balder::core::{memory, memory::_, driver::device};
use balder::core::{error, dispose};
use balder::utils::log;

use ::vulkan::core;

extern (C) fn memcpy (src : *void, dst : *void, size : usize);

__version DEBUG {
    lazy dmut __UID__ = copy [0us];
}

@final
pub class Image2D {

    // The device on which the buffer is allocated
    let dmut _device : &VulkanDevice;

    // The allocator used to allocate the buffer memory
    let dmut _allocator : &MemoryAllocator;

    // The buffer handle
    let dmut _image : VkImage = null;

    // The memory allocation of the buffer (description used by MemoryAllocator)
    let dmut _memAlloc : MemoryAllocation;

    // The width of the allocated buffer
    let mut _width : u32;

    // The height of the allocated buffer
    let mut _height : u32;

    // The format of the image
    let _format : VkFormat;


    /**
     * ======================================================================================================
     * ======================================================================================================
     * =======================================   CTOR AND CONFIGURE  ========================================
     * ======================================================================================================
     * ======================================================================================================
     */

    /**
     * Create a buffer using a device
     * @params:
     *    - device: the device used for the allocation
     *    - size: the size of the allocation
     *    - usage: the usage of the memory that will be allocated
     */
    pub self (width : u32, height : u32, format : VkFormat, dmut alloc : &MemoryAllocator, memAlloc : MemoryAllocation, dmut image : VkImage)
        with  _allocator = alias alloc
        , _width = width
        , _height = height
        , _format = format
        , _device = alloc:.getDevice ()
        , _image = alias image
        , _memAlloc = memAlloc
    {}

    /**
     * ======================================================================================================
     * ======================================================================================================
     * ================================================   GETTERS  ==========================================
     * ======================================================================================================
     * ======================================================================================================
     */

    /**
     * @returns: the handle on the vulkan buffer
     */
    pub fn getVulkanImage (self)-> VkImage {
        self._image
    }

    /**
     * @returns: the device responsible of the allocation of the buffer
     */
    pub fn getDevice (mut self)-> dmut &VulkanDevice {
        alias self._device
    }

    /**
     * @returns: the size of the buffer in memory
     */
    pub fn getSize (self)-> usize {
        self._memAlloc.size
    }

    /**
     * @returns: the format of the image
     * */
    pub fn getFormat (self)-> VkFormat {
        self._format
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ================================          SET FROM BUFFER          =================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Copy the buffer 'src' into the self buffer
     * @params:
     *    - src: the buffer to copy from
     */
    pub fn copyFrom (mut self, dmut src : &Buffer, aspect : VkImageAspectFlags) {
        self:.transitionLayout (VkImageLayout::VK_IMAGE_LAYOUT_UNDEFINED, VkImageLayout::VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, aspect);
        let dmut cmd = self._device:.beginSingleTimeCommand ();
        let mut copyRegion = VkBufferImageCopy ();

        copyRegion.imageSubresource.aspectMask = aspect;
        copyRegion.imageSubresource.mipLevel = 0u64;
        copyRegion.imageSubresource.layerCount = 1;
        copyRegion.imageExtent.width = self._width;
        copyRegion.imageExtent.height = self._height;
        copyRegion.imageExtent.depth = 1;

        vkCmdCopyBufferToImage (cmd, src.getVulkanBuffer (), self._image, VkImageLayout::VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1u32, &copyRegion);
        self._device:.endSingleTimeCommand (alias cmd);
        self:.transitionLayout (VkImageLayout::VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, VkImageLayout::VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, aspect);
    }

    /**
     * Make the image transition stage to be copiable
     * */
    prv fn transitionLayout (mut self, oldLayout : VkImageLayout, newLayout : VkImageLayout, aspect : VkImageAspectFlags) {
        let dmut cmd = self._device:.beginSingleTimeCommand ();
        let mut barrier = VkImageMemoryBarrier ();
        barrier.sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;
        barrier.oldLayout = oldLayout;
        barrier.newLayout = newLayout;
        barrier.srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;
        barrier.dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;
        barrier.image = alias self._image;
        barrier.subresourceRange.aspectMask = aspect;
        barrier.subresourceRange.baseMipLevel = 0;
        barrier.subresourceRange.levelCount = 1;
        barrier.subresourceRange.baseArrayLayer = 0;
        barrier.subresourceRange.layerCount = 1;

        let mut srcStage : VkPipelineStageFlags = 0;
        let mut dstStage : VkPipelineStageFlags = 0;

        if oldLayout == VkImageLayout::VK_IMAGE_LAYOUT_UNDEFINED && newLayout == VkImageLayout::VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL {
            barrier.srcAccessMask = 0;
            barrier.dstAccessMask = VkAccessFlagBits::VK_ACCESS_TRANSFER_WRITE_BIT;
            srcStage = VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;
            dstStage = VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TRANSFER_BIT;
        }

        else if oldLayout == VkImageLayout::VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL && newLayout == VkImageLayout::VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL {
            barrier.srcAccessMask = VkAccessFlagBits::VK_ACCESS_TRANSFER_WRITE_BIT;
            barrier.dstAccessMask = VkAccessFlagBits::VK_ACCESS_SHADER_READ_BIT;

            srcStage = VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TRANSFER_BIT;
            dstStage = VkPipelineStageFlagBits::VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT;
        }

        vkCmdPipelineBarrier (cmd, srcStage, dstStage, 0, 0, null, 0, null, 1, &barrier);
        self._device:.endSingleTimeCommand (alias cmd);
    }

    /**
     * ======================================================================================================
     * ======================================================================================================
     * ==============================================   DISPOSING  ==========================================
     * ======================================================================================================
     * ======================================================================================================
     */

    impl Disposable {

        pub over dispose (mut self) {
            if (self._image != null) {
                self._allocator:.freeImage (alias self._image, self._memAlloc);

                self._image = null;
                self._width = 0;
                self._height = 0;
            }
        }
    }

    __dtor (mut self) {
        self:.dispose ();
    }

}
