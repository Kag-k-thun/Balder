in buffer;

use balder::core::{memory, memory::_, driver::device};
use balder::core::{error, dispose};
use balder::utils::log;

use ::vulkan::core;

extern (C) fn memcpy (src : *void, dst : *void, size : usize);

__version DEBUG {
    lazy dmut __UID__ = copy [0us];
}

@final
pub class Buffer {

    __version DEBUG {

        // The uniq id of the buffer
        let mut _uid : usize = 0;
    }

    // The device on which the buffer is allocated
    let dmut _device : &VulkanDevice;

    // The allocator used to allocate the buffer memory
    let dmut _allocator : &MemoryAllocator;

    // The buffer handle
    let dmut _buffer : VkBuffer = null;

    // The size of the allocation
    let dmut _size : VkDeviceSize = 0u64;

    // The memory allocation of the buffer (description used by MemoryAllocator)
    let dmut _memAlloc : MemoryAllocation;

    // The descriptor of the buffer
    let dmut _descriptor : VkDescriptorBufferInfo = VkDescriptorBufferInfo ();

    // If self._mapped, this pointer can be used to get or modified the content of the buffer
    let dmut _mappedData : *void = null;

    // True if the buffer is local to host
    let _isLocal : bool;

    /**
     * ======================================================================================================
     * ======================================================================================================
     * =======================================   CTOR AND CONFIGURE  ========================================
     * ======================================================================================================
     * ======================================================================================================
     */

    /**
     * Create a buffer using a device
     * @params:
     *    - device: the device used for the allocation
     *    - size: the size of the allocation
     *    - usage: the usage of the memory that will be allocated
     */
    pub self (dmut alloc : &MemoryAllocator, memAlloc : MemoryAllocation, dmut buffer : VkBuffer, isLocal : bool)
        with  _allocator = alias alloc
        , _device = alloc:.getDevice ()
        , _size = memAlloc.size
        , _buffer = alias buffer
        , _memAlloc = memAlloc
        , _descriptor = VkDescriptorBufferInfo ()
        , _isLocal = isLocal
    {
        self._descriptor.buffer = buffer;
        self._descriptor.offset = 0u64;
        self._descriptor.range = memAlloc.size;

        __version DEBUG {
            atomic {
                self._uid = __UID__ [0] + 1;
                __UID__ [0] += 1;
            }
        }
    }

    /**
     * ======================================================================================================
     * ======================================================================================================
     * ================================================   GETTERS  ==========================================
     * ======================================================================================================
     * ======================================================================================================
     */

    /**
     * @returns: the handle on the vulkan buffer
     */
    pub fn getVulkanBuffer (self)-> VkBuffer {
        self._buffer
    }

    /**
     * @returns: the device responsible of the allocation of the buffer
     */
    pub fn getDevice (mut self)-> dmut &VulkanDevice {
        alias self._device
    }

    /**
     * @returns: the device responsible of the allocation of the buffer
     */
    pub fn getDevice (self)-> &VulkanDevice {
        self._device
    }

    /**
     * @returns: the size of the buffer in memory
     */
    pub fn getSize (self)-> VkDeviceSize {
        self._size
    }

    pub fn getMapAddress (mut self)-> dmut *void {
        return self._allocator:.getMapAddress (self._memAlloc);
    }

    /**
     * @returns: the address of the descriptor buffer info
     */
    pub fn getDescriptorInfo (mut self)-> dmut *VkDescriptorBufferInfo {
        alias &self._descriptor
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          LOCAL MAPPING          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Map the buffer onto CPU memory , so it can be updated
     * @assume: the buffer was not disposed
     */
    pub fn map (mut self)-> bool {
        self._mappedData = self._allocator:.getMapAddress (self._memAlloc);
        return self._mappedData != null;
    }

    /**
     * Unmap the address of the buffer
     * */
    pub fn unmap (mut self) {
        self._allocator:.unmap (self._memAlloc);
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          LOCAL COPIES          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Copy the data on a local buffer
     * @warning: unlike self:.update (), this does not unmap at the end of the copy
     * */
    pub fn copyMappedData {T of [U], U} (mut self, datas : T) {
        atomic self._device {
            if (self:.map ()) {
                memcpy (self._mappedData, cast!{*void} (datas.ptr), datas.len * U::size);
            }
        }
    }

    /**
     * Copy the data on a local buffer
     * @warning: unlike self:.update (), this does not unmap at the end of the copy
     * */
    pub fn copyMappedData {T} (mut self, datas : *T) {
        atomic self._device {
            if (self:.map ()) {
                memcpy (self._mappedData, cast!{*void} (datas), T::size);
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ============================          AUTO LOCAL/REMOTE COPIES          ============================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Update the buffer from CPU datas
     */
    pub fn update {T of [U], U} (mut self, datas : T)
        throws BalderError
    {
        atomic self._device {
            if (self._isLocal) {
                if (self:.map  ()) {
                    memcpy (self._mappedData, cast!{*void} (datas.ptr), datas.len * U::size);
                    self:.unmap ();
                } else throw copy BalderError ("Failed to map memory");
            } else {
                let dmut stagingBuf = self._device:.getMemoryAllocator ():.allocBuffer (
                    self._size,
                    cast!u32 (VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFER_SRC_BIT),
                    cast!u32 (VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_COHERENT_BIT |
                              VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT));

                stagingBuf:.map ();
                memcpy (stagingBuf._mappedData, cast!{*void} (datas.ptr), datas.len * U::size);
                stagingBuf:.unmap ();

                self:.copyFrom (alias stagingBuf);
                stagingBuf:.dispose ();
            }
        }
    }

    /**
     * Update the buffer from CPU datas
     */
    pub fn update {T} (mut self, datas : T)
        throws BalderError
    {
        let d = copy [datas];
        self:.update (d);
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          STAGING BUFFER          =================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Copy the buffer 'src' into the self buffer
     * @params:
     *    - src: the buffer to copy from
     */
    prv fn copyFrom (mut self, dmut src : &Buffer) {
        let dmut cmd = self._device:.beginSingleTimeCommand ();
        let mut copyRegion = VkBufferCopy ();

        copyRegion.srcOffset = 0u64;
        copyRegion.dstOffset = 0u64;
        copyRegion.size = self._size;

        vkCmdCopyBuffer (cmd, src._buffer, self._buffer, 1u32, &copyRegion);
        self._device:.endSingleTimeCommand (alias cmd);
    }

    /**
     * ======================================================================================================
     * ======================================================================================================
     * ==============================================   DISPOSING  ==========================================
     * ======================================================================================================
     * ======================================================================================================
     */

    impl Disposable {

        pub over dispose (mut self) {
            if (self._buffer != null) {
                self._allocator:.freeBuffer (alias self._buffer, self._memAlloc);

                self._buffer = null;
                self._size = 0u64;
            }
        }
    }

    __dtor (mut self) {
        self:.dispose ();
    }

}
