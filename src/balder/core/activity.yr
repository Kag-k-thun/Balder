mod balder::core::activity;

import balder::core::application;

/**
 * Ancestor of all activities in an application
 */
pub class @abstract Activity {

    let dmut _app : &Application;
    
    // let dmut _widgetManager : &WidgetManager;

    pub self (dmut app : &Application) with
        _app = alias app
    {}

    /**
     * Method called by the application when the activity is created for the first time
     */
    pub def onCreate (mut self)-> void {}

    /**
     * Method called by the application each frame (before rendering)
     */
    pub def onUpdate (mut self)-> void {}

    /**
     * Method called by the application before putting the activity on hold
     */
    pub def onPause (mut self)-> void {}
    
    /**
     * Method called by the application before resuming the activity
     */
    pub def onResume (mut self)-> void {}


    impl Disposable {
        /**
         * Method called by the application before destroying the activity
         */
        pub over dispose (mut self)-> void {}
    }

    __dtor (mut self) {
        self:.dispose ();
    }
    
}

/**
 * An empty activity that does nothing
 */
pub class EmptyActivity over Activity {

    pub self (dmut app : &Application) with super (alias app) {}
    
}
