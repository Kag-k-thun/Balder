in layout;

use balder::core::driver::{device, utils};
use balder::core::{error, dispose};
use balder::math::vector;

use vulkan::_;

/**
 * Ancestor of all pipeline layout classes
 */
@abstract
pub class PipelineLayout {

    // The pipeline layout for vulkan shader
    let dmut _layout : VkPipelineLayout = null;

    // The descriptor set layout describing the uniform values that can be bound to the shader
    let dmut _descriptorSetLayout : VkDescriptorSetLayout = null;

    // The device containing the pipeline layout
    let dmut _device : &VulkanDevice ;
    
    pub self (dmut device : &VulkanDevice)
        with _device = alias device
    {}

    /**
     * @returns: the vulkan handle of the pipeline layout
     */
    pub fn getVulkanHandle (mut self)-> dmut VkPipelineLayout {
        alias self._layout
    }

    /**
     * @returns: the descriptor set layout usable for descriptor set allocation
     */
    pub fn getDescriptorSetLayout (mut self)-> dmut VkDescriptorSetLayout {
        alias self._descriptorSetLayout
    }
    
    /**
     * @returns: the device used by the pipeline layout
     */
    pub fn getDevice (mut self)-> dmut &VulkanDevice {
        alias self._device
    }
    
    impl Disposable {
        pub over dispose (mut self) {
            if (self._descriptorSetLayout != null) {
                vkDestroyDescriptorSetLayout (self._device:.getDeviceHandle (), self._descriptorSetLayout, null);
                self._descriptorSetLayout = null;
            }

            if (self._layout != null) {
                vkDestroyPipelineLayout (self._device:.getDeviceHandle (), self._layout, null);
                self._layout = null;
            }
        }        
    }
    
    __dtor (mut self) {
        self:.dispose ();
    }

    
}


/**
 * A pipeline layout describing a shader content
 * @params: 
 *    - T: the struct fnining the content of a shader
 */
pub class PipelineLayout {record T} over PipelineLayout {

    /**
     * @params: 
     *    - device: the device allocating the pipelinelayout 
     */
    pub self (dmut device : &VulkanDevice)
        with super (alias device)
        throws BalderError
    {
        self._descriptorSetLayout = self:.createDescriptorSetLayout ();
        self._layout = self:.createPipelineLayout ();
    }
    
    /**
     * Create the descriptor set layout for the given T template struct
     * @returns: the descriptor set layout
     */
    prv fn createDescriptorSetLayout (mut self)-> dmut VkDescriptorSetLayout
        throws BalderError
    {
        let infos = __pragma!field_infos (T);
        let dmut res = copy [VkDescriptorSetLayoutBinding () ; infos.len];
        cte for i in 0 .. infos.len {
            let mut desc = VkDescriptorSetLayoutBinding ();
            desc.descriptorCount    = 1u32;
            desc.descriptorType     = getDescriptorType!{__pragma!field_type (T, infos [i].name)} ();
            desc.stageFlags         = getDescriptorStage (infos [i].name);
            desc.pImmutableSamplers = null;
            desc.binding            = cast!u32 (i);

            res [i] = desc;
        }

        let mut layoutInfo= VkDescriptorSetLayoutCreateInfo ();
        layoutInfo.sType        = VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
        layoutInfo.bindingCount = cast!u32 (res.len);
        layoutInfo.pBindings    = res.ptr;

        let dmut descSet : VkDescriptorSetLayout = null;
        if (vkCreateDescriptorSetLayout (self._device:.getDeviceHandle (), &layoutInfo, null, alias &descSet) != VkResult::VK_SUCCESS) {
            throw copy BalderError ("Failed to create descriptor set layout");
        }

        return alias descSet;
    }

    /**
     * Create the pipeline layout from self._descriptorSetLayout
     */
    prv fn createPipelineLayout (mut self)-> dmut VkPipelineLayout
        throws BalderError
    {
        let dmut layout : VkPipelineLayout = null;
        let mut pipelineLayoutInfo = VkPipelineLayoutCreateInfo ();
        pipelineLayoutInfo.sType                  = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
        pipelineLayoutInfo.setLayoutCount         = 1u32;
        pipelineLayoutInfo.pSetLayouts            = &self._descriptorSetLayout;
        pipelineLayoutInfo.pushConstantRangeCount = 0u32;
        pipelineLayoutInfo.pPushConstantRanges    = null;

        if (vkCreatePipelineLayout (self._device:.getDeviceHandle (), &pipelineLayoutInfo, null, alias &layout) != VkResult::VK_SUCCESS) {
            throw copy BalderError ("Failed to create pipeline layout.");
        }

        return alias layout;
    }
        
}
