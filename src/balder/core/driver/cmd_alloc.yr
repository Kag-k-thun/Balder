in cmd_alloc;

use balder::core::driver::_;
use balder::core::{error, dispose};

use vulkan::_;
use std::io;

pub enum
| LOADING = 0u32
| DRAWING = 1u32
 -> CommandAllocatorPhase;

/**
 * The indirect command allocator is used to allocate indirect command, and generate the indirect command buffer used to draw indirect
 */
@final
pub class IndirectCommandAllocator {

    // The device used to allocate and draw
    let dmut _device : &VulkanDevice;

    // The phase of the command allocator
    let mut _phase : CommandAllocatorPhase = CommandAllocatorPhase::LOADING;
    
    // The list of indexed indirect commands
    let mut _indexedCmds : [mut VkDrawIndexedIndirectCommand] = [];

    // The id of the current index being drawn
    let mut _currentIndexed = 0;

    // The buffer storing information about the indirect drawing
    let dmut _indexedCmdBuffer : (&Buffer)? = none;
    
    /**
     * Crete an empty indirect command allocator
     * @params:
     *    - device: the device used to allocate and draw
     */
    pub self (dmut device : &VulkanDevice)
        with _device = alias device
    {}

    /**
     * ======================================================================================================
     * ======================================================================================================
     * =============================================   GETTERS   ============================================
     * ======================================================================================================
     * ======================================================================================================
     */

    /**
     * @returns: the current phase of the allocator
     */
    pub fn getPhase (self)-> CommandAllocatorPhase {
        self._phase
    }
    
    /**
     * ======================================================================================================
     * ======================================================================================================
     * ==========================================   LOADING PHASE   =========================================
     * ======================================================================================================
     * ======================================================================================================
     */

    /**
     * Register an indexed mesh that will be drawn during the draw phase
     * @params:
     *    - nbPoints: the number of points to draw
     *    - nbInstance: the number of instance to draw
     *    - firstIndex: the offset of the first index in the ibo buffer
     *    - vertexOffset: the offset of the first vertex in the vbo buffer
     *    - firstInstance: the offset of the first instance in the instance buffer
     */
    pub fn registerIndexedObject (mut self, nbPoints : u32, nbInstance : u32 = 1u32, firstIndex : u32 = 0u32, vertexOffset : i32 = 0, firstInstance : u32 = 0u32) {
        let mut cmd = VkDrawIndexedIndirectCommand ();
        cmd.indexCount    = nbPoints;
        cmd.instanceCount = nbInstance;
        cmd.firstIndex    = firstIndex;
        cmd.vertexOffset  = vertexOffset;
        cmd.firstInstance = firstInstance;

        self._indexedCmds ~= [cmd];
    }

    /**
     * Finalize the loading phase of the command buffer allocator. So it enter the drawing phase.
     */
    pub fn finalizeLoading (mut self)
        throws BalderError
    {
        self._phase = CommandAllocatorPhase::DRAWING;
        if (self._indexedCmds.len != 0us) {
            let flag = cast!u32 (VkBufferUsageFlagBits::VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT |
                                 VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFER_DST_BIT);

            let dmut buf = self._device:.getMemoryAllocator ():.allocBuffer (cast!u64 (self._indexedCmds.len * VkDrawIndexedIndirectCommand::size),
                                                                             flag,
                                                                             cast!u32 (VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT));

            buf:.update (self._indexedCmds);
            self._indexedCmdBuffer = alias (alias buf)?;
        }
    }

    /**
     * ======================================================================================================
     * ======================================================================================================
     * ==========================================   DRAWING PHASE   =========================================
     * ======================================================================================================
     * ======================================================================================================
     */

    /**
     * Start the recording of drawings
     */
    pub fn startRecording (mut self) {
        if (self._phase != CommandAllocatorPhase::DRAWING) {
            eprintln ("Recording in loading phase, Panic !");
            panic;
        }

        self._currentIndexed = 0u64;
    }

    /**
     * Draw the next indexed buffer
     * @assume: associated buffers, shaders and descriptor set are correctly bound
     */
    pub fn drawNextIndexed (mut self) {
        if let Ok (dmut buf) = alias self._indexedCmdBuffer {
            vkCmdDrawIndexedIndirect (commandBuffer-> self._device:.getCommandBuffer (),
                                      buffer-> buf:.getVulkanBuffer (),
                                      offset-> cast!u64 (self._currentIndexed * VkDrawIndexedIndirectCommand::size),
                                      drawCount-> 1u32,
                                      stride-> VkDrawIndexedIndirectCommand::size);

            self._currentIndexed += 1u64;
        }
    }

    /**
     * ======================================================================================================
     * ======================================================================================================
     * ============================================   DISPOSING   ===========================================
     * ======================================================================================================
     * ======================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            if let Ok (dmut buf) = alias self._indexedCmdBuffer {
                buf:.dispose ();
                self._indexedCmdBuffer = none;
            }

            self._indexedCmds = [];
            self._currentIndexed = 0u64;
            self._phase = CommandAllocatorPhase::LOADING;
        }
    }

    __dtor (mut self) {
        self:.dispose ();
    }
    
}
