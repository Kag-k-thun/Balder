in subpass;

use ::vulkan::core;

use balder::core::{_, driver::_, memory::_, application::_, shader::_};
use balder::utils::log;

mod ::depth;
mod ::color;

pub def VulkanDepthSubpass : depth::VulkanDepthSubpass;
pub def VulkanColorSubpass : color::VulkanColorSubpass;

@abstract
pub class VulkanSubpass {

    // The vulkan device used to render the subpass
    let dmut _device : &VulkanDevice;

    prot { // Rendering pass

        // The frame buffer attached to the rendering texture
        let dmut _framebuffer : VkFramebuffer = null;

        // The render pass of the subpass
        let dmut _renderPass : VkRenderPass = null;

        // The color used when clearing an image of the swap chain;
        let dmut _clearColor : [VkClearValue] = [];

    }

    prot { // Output buffers

        // The width of the subpass texture
        let dmut _width : u32;

        // The height of the subpass texture
        let dmut _height : u32;

    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          CTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (dmut device : &VulkanDevice, width : u32, height : u32)
        with _device = alias device
        , _width = width
        , _height = height
    {}

    __dtor (mut self) {
        self:.dispose ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the render pass of the subpass
     * */
    pub fn getRenderPass (self)-> VkRenderPass {
        self._renderPass
    }

    /**
     * @returns: the dimension of the subpass
     *     - .0: the width
     *     - .1: the height
     * */
    pub fn getDimension (self)-> (u32, u32) {
        (self._width, self._height)
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          RENDERING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub fn startRenderPass (mut self)-> void;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable;

}
