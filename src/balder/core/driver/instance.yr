in instance;

use vulkan::_;
use sdl2::vulkan;
use balder::core::{_, application::window};
use balder::utils::log;

use std::{io, config::_, conv};

@final
pub class VulkanInstance {

    // The handle of the vulkan instance
    let dmut _instance : VkInstance = null;

    // The configuration of the instance
    let mut _config : &Config = copy Dict ();

    // The handle for the debug messenger
    let dmut _debugMessenger : VkDebugUtilsMessengerEXT = null;
    
    /**
     * Create an empty vulkan instance
     */
    pub self () {}

    /**
     * Configure the vulkan instance
     * @params: 
     *    - config: the configuration to use
     */
    pub fn configure (mut self, dmut win : &Window, config : &Config)
        throws BalderError
    {
        self:.dispose ();

        self._config = config;        
        self:.createInstance (alias win);
        
        __version DEBUG {
            self:.configureDebug ();
        }
    }
    
    /**
     * @returns: the handle of the vulkan instance
     */
    pub fn getHandle (mut self)-> VkInstance {
        self._instance
    }

    /**
     * Create the vulkan instance using the configuration `self._config`
     */
    fn createInstance (mut self, dmut win : &Window)
        throws BalderError
    {
        let mut validationLayers : [*c8] = [];
        __version DEBUG {
            if (self.checkValidationLayerSupport ()) {
                validationLayers = copy ["VK_LAYER_KHRONOS_validation".ptr];
            }
        }

        let mut appInfo = VkApplicationInfo ();
        appInfo.sType              = VkStructureType::VK_STRUCTURE_TYPE_APPLICATION_INFO;
        appInfo.pApplicationName   = win.getName ().toStringZ ();
        appInfo.applicationVersion = cast!u32 (VK_API_VERSION_1_0);
        appInfo.pEngineName        = "No egine".ptr;
        appInfo.engineVersion      = cast!u32 (VK_API_VERSION_1_0);
        appInfo.apiVersion         = cast!u32 (VK_API_VERSION_1_0);
        appInfo.pNext              = null;

        let mut extensionCount = 0u32;
        SDL_Vulkan_GetInstanceExtensions (win:.getSDLHandle (), alias &extensionCount, null);
        let mut extensionNames : [mut *c8]  = copy [null ; extensionCount];
        SDL_Vulkan_GetInstanceExtensions (win:.getSDLHandle (), alias &extensionCount, alias extensionNames.ptr);

        __version DEBUG {
            extensionNames = alias (extensionNames ~ [(VK_EXT_DEBUG_UTILS_EXTENSION_NAME).ptr]);
        }
        
        let mut createInfo = VkInstanceCreateInfo ();
        createInfo.sType                   = VkStructureType::VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
        createInfo.pNext                   = null;
        createInfo.flags                   = 0u32;
        createInfo.pApplicationInfo        = &appInfo;
        createInfo.enabledLayerCount       = cast!u32 (validationLayers.len);
        createInfo.ppEnabledLayerNames     = validationLayers.ptr;
        createInfo.enabledExtensionCount   = cast!u32 (extensionNames.len);
        createInfo.ppEnabledExtensionNames = extensionNames.ptr;

        if (vkCreateInstance (&createInfo, null, alias &self._instance) != VkResult::VK_SUCCESS) {
            throw copy BalderError ("Failed to create vulkan instance");
        }

    }
    
    __version DEBUG {

        /**
         * Debug function that configures the vulkan sdk to print error messages
         */
        fn configureDebug (mut self)
            throws BalderError
        {
            let mut debugCreateInfo = VkDebugUtilsMessengerCreateInfoEXT (&debugCallback);
            debugCreateInfo.sType           = VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
            debugCreateInfo.messageSeverity =
                cast!u32 (VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT |
                          VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT |
                          VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT);

            debugCreateInfo.messageType     =
                cast!u32 (VkDebugUtilsMessageTypeFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT |
                          VkDebugUtilsMessageTypeFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT |
                          VkDebugUtilsMessageTypeFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT);

            debugCreateInfo.pUserData       = null;
            debugCreateInfo.pNext           = null;
            debugCreateInfo.flags           = 0u32;
            
            let f = VKDebugFunctionCaster (vkGetInstanceProcAddr (self._instance, "vkCreateDebugUtilsMessengerEXT".ptr));
            if (!f.isNull) {
                if (f.create (self._instance, &debugCreateInfo, null, alias &self._debugMessenger) != VkResult::VK_SUCCESS) {
                    throw copy BalderError ("Failed to create vulkan debugger");
                }
            } else {
                throw copy BalderError ("Failed to find vulkan debugger function");
            }
        }

        /**
         * Debug function, that verifies that the installed vulkan SDK support debug messaging
         * @returns: true if the sdk support the validation layer `VK_LAYER_KHRONOS_validation`
         */
        fn checkValidationLayerSupport (self)-> bool {
            let mut layerCount = 0u32;
            vkEnumerateInstanceLayerProperties (alias &layerCount, null);
            
            let dmut avalaibleLayers = copy [VkLayerProperties () ; layerCount];
            vkEnumerateInstanceLayerProperties (alias &layerCount, alias avalaibleLayers.ptr);

            for p in avalaibleLayers {
                unsafe {
                    let name = fromStringZ (p.layerName.ptr);
                    if (name == "VK_LAYER_KHRONOS_validation") return true;
                }
            }

            return false;
        }
    }

    impl Disposable {
        pub over dispose (mut self) {
            __version DEBUG {
                if (self._debugMessenger != null) {
                    let f = VKDebugFunctionCaster (vkGetInstanceProcAddr (self._instance, "vkDestroyDebugUtilsMessengerEXT".ptr));
                    if (!f.isNull) {
                        f.destroy (self._instance, self._debugMessenger, null);
                    }
                    
                    self._debugMessenger = null;
                }
            }

            if (self._instance != null) {
                vkDestroyInstance (alias self._instance, null);
                self._instance = null;
            }
        }        
    }

    __dtor (mut self) {
        self:.dispose ();
    }
    
}



__version DEBUG {

    fn debugCallback (messageSeverity : VkDebugUtilsMessageSeverityFlagBitsEXT,
                      _ : VkDebugUtilsMessageTypeFlagsEXT,
                      pCallBackData : *VkDebugUtilsMessengerCallbackDataEXT,
                      dmut _ : *void)-> VkBool32 {

        if (pCallBackData == null) return VK_FALSE;
        if (messageSeverity >= VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT) {
            unsafe {
                let msg = std::conv::fromStringZ ((*pCallBackData).pMessage);
                eprintln ("Validation layer =>\n ", msg);
            }
        }

        return VK_FALSE;
    }

    union VKDebugFunctionCaster {
        let a : PFN_vkVoidFunction;
        pub let create : PFN_vkCreateDebugUtilsMessengerEXT = &emptyCreateDebug;
        pub let destroy : PFN_vkDestroyDebugUtilsMessengerEXT = &emptyDestroyDebug;
        let c : *void = null;
        pub self (a : PFN_vkVoidFunction)
            with a = a
        {}

        @field
        pub fn isNull (self)-> bool {
            self.c == null
        }
    }

    fn emptyCreateDebug (_ : VkInstance, _ : *VkDebugUtilsMessengerCreateInfoEXT, _ : *VkAllocationCallbacks, dmut _ : *VkDebugUtilsMessengerEXT)-> VkResult {
        VkResult::VK_SUCCESS
    }

    fn emptyDestroyDebug (_ : VkInstance, _ : VkDebugUtilsMessengerEXT, _ : *VkAllocationCallbacks)-> void {
    }

}
