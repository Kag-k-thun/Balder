in desc_set;

use balder::core::{memory::_, driver::_};
use balder::core::error;

use vulkan::_;
use std::io;

/**
 * Ancestor of all descriptor sets
 */
@final
pub class DescriptorSet {

    // The allocator that allocated the descriptor set    
    let dmut _allocator : &DescriptorAllocator;

    // The allocated descriptor sets (one by in flight frame)
    let dmut _set : [VkDescriptorSet];

    // The buffer and image binding 
    let dmut _writes : [VkWriteDescriptorSet] = [];

    // The size of the buffers bound to the desc set
    let _size : usize;

    /**
     * @params:
     *    - allocator: the allocator used to allocate the descriptor set
     *    - sets: the descriptor set (assumed to have one by frame in flight of the drawing device)
     *    - uniformSize: the size of the uniform content
     */
    pub self (dmut allocator : &DescriptorAllocator, dmut set : [VkDescriptorSet], uniformSize : usize)
        with _allocator = alias allocator
        , _set = alias set
        , _size = uniformSize
    {}

    /**
     * Bind a buffer to a uniform value in the descriptor description
     * @params:
     *    - buffers: the list of buffers (assumed one per image in flight)
     */
    pub fn bind (mut self, dmut buffers : [&Buffer], index : u32) {
        let dmut device = self._allocator:.getDevice ();
        __version DEBUG {
            if (buffers.len < device.getSwapchainNbFrames ()) {
                balder::utils::log::error ("malformed descriptor set");
                panic;
            }
        }


        for i in 0 .. buffers.len {
            let mut bufferInfo = VkDescriptorBufferInfo ();
            bufferInfo.buffer = buffers [i]:.getVulkanBuffer ();
            bufferInfo.offset = 0;
            bufferInfo.range = cast!u64 (self._size);

            let mut descWrite = VkWriteDescriptorSet ();
            descWrite.sType = VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
            descWrite.dstSet = self._set [i];
            descWrite.dstBinding = index;
            descWrite.dstArrayElement = 0;
            descWrite.descriptorType = VkDescriptorType::VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
            descWrite.descriptorCount = 1;
            descWrite.pBufferInfo = &bufferInfo;

            vkUpdateDescriptorSets (device:.getDeviceHandle (), 1, &descWrite, 0, null);
        }
    }

    /**
     * Use the descriptor set for the drawing of the next frame
     */
    pub fn select (mut self) {
        let dmut device = self._allocator:.getDevice ();
        let dmut pipeline = self._allocator:.getPipelineLayout ();
        let current = self._set [device.getCurrentFrameIndex ()];

        vkCmdBindDescriptorSets (device:.getCommandBuffer (),
                                 VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_GRAPHICS,
                                 pipeline:.getVulkanHandle (),
                                 0u32,
                                 1u32,
                                 &current,
                                 0u32,
                                 null);
    }

}
