in device;


use balder::core::{_,
                   driver::_,
                   memory::_,
                   application::_,
                   shader::texture};

use balder::utils::log;

use ::vulkan::core;
use ::sdl2::_;

use std::{io, conv, time::_};

/**
 * A vulkan device used to manage vulkan rendering tools
 */
pub class VulkanDevice {

    // The pointer to the window holding the device
    let dmut _win : (&Window)? = none;
    
    // The vulkan instance used to configure vulkan lib
    let dmut _instance : &VulkanInstance = copy VulkanInstance ();

    prot {
        
        // The logical device handle of vulkan
        let dmut _device : VkDevice = null;
        
        // The graphics queue
        let dmut _graphicsQueue : VkQueue = null;

        // The present queue
        let dmut _presentQueue : VkQueue = null;

        // The submit information
        let dmut _submitInfo : VkSubmitInfo = VkSubmitInfo ();

        //
        let mut _waitPipelineStage : u32 = 0u32;

    }

    prot {    
        // The handle of the physical device of vulkan
        let dmut _physicalDevice : VkPhysicalDevice = null;
        
        // The name of the physical device in use
        let mut _physicalDeviceName : [c8] = "";

        // The indices for graphics and present 
        let mut _physicalDeviceFamilyIndices : [u32] = [];

    }    

    prot {

        // The swap chain of the window
        let dmut _swapChain : (&SwapChain)? = none;

        // True when the window was resized and the swap chain needs to be recreated
        let mut _resizingWindow : bool = false;

    }

    prot {
        
        // The command pool of the device used for drawing
        let dmut _drawPool : VkCommandPool = null;

        // The command pool used for single time commands
        let dmut _memoryPool : VkCommandPool = null;

        // The command buffer for recording (one per frame in flight)
        let dmut _commandBuffers : [VkCommandBuffer] = [];

        // The fences to synchronize inflight frames
        let dmut _inFlightFence : VkFence = null;

        // Semaphore used to signal when an image is ready
        let dmut _imageAvailableSem : VkSemaphore = null;

        // Semaphore used to signal that an image is finished rendering
        let dmut _renderFinishedSem : VkSemaphore = null;
        
        // The memory allocator
        let dmut _allocator : (&MemoryAllocator)? = none;

        // The allocator used to allocate descriptor sets
        let dmut _descPool : (&DescriptorAllocator)? = none;

        // The index of the frame being drawn
        let mut _currentFrame : u32 = 0u32;

    }
    
    prot {
        // The context configuration
        let mut _cfg : &BalderConfig = copy BalderConfig::default ();

        // The list of extension required by the vulkan device
        let mut _requiredExtensions : [[c8] => mut ()] = copy [];
    }

    /**
     * ======================================================================================================
     * ======================================================================================================
     * =======================================   CTOR AND CONFIGURE  ========================================
     * ======================================================================================================
     * ======================================================================================================
     */
    
    /**
     * @params: 
     *    - app: the application holding the vulkan device
     */
    pub self () {}

    /**
     * Configure the device using a given configuration
     * @params: 
     *    - config: the configuration to use for the device
     */
    pub fn configure (mut self, dmut win : &Window, cfg : &BalderConfig)
        throws BalderError
    {
        self:.dispose ();

        atomic self {
            self._win = (alias win)?;
            self._instance = alias win:.getVulkanInstance ();

            self._cfg = cfg;
            self._requiredExtensions [VK_KHR_SWAPCHAIN_EXTENSION_NAME] = ();

            self:.selectPhysicalDevice (alias win);
            self:.createLogicalDevice (alias win);

            // allocators
            self:.createMemoryAllocator ();
            self:.createDescriptorAllocator ();

            // buffer images
            self:.createSwapchain (alias win);

            self:.createCommandPools ();
            self:.createCommandBuffers ();
            self:.createSyncObjects ();
        }

        log::debug #("Device", "Device configured");
    }

    /**
     * ======================================================================================================
     * ======================================================================================================
     * ===============================================   GETTERS  ===========================================
     * ======================================================================================================
     * ======================================================================================================
     */

    /**
     * @returns: the configuration of the device
     * */
    pub fn getConfiguration (self)-> &BalderConfig {
        self._cfg
    }

    /**
     * @returns: the vulkan handle of the physical device (might be null)
     */
    pub fn getPhysicalDeviceHandle (self)-> VkPhysicalDevice {
        self._physicalDevice
    }

    /**
     * @returns: the handle of the logical device (can be null)
     */
    pub fn getDeviceHandle (self)-> VkDevice {
        self._device
    }

    /**
     * @returns: the extent of the current swap chain
     */
    pub fn getSwapchainExtent (self)-> VkExtent2D {
        if let Ok (swp) = self._swapChain {
            return swp.extent;
        }

        panic;
    }

    /**
     * @returns: the number of samples in the rendering swapchain (for msaa)
     * */
    pub fn getSwapchainNumSamples (self)-> VkSampleCountFlagBits {
        if let Ok (swp) = self._swapChain {
            return swp.numSamples;
        }

        panic;
    }

    /**
     * @returns: the format used by the current swapchain
     */
    pub fn getSwapchainFormat (self)-> VkFormat {
        if let Ok (swp) = self._swapChain {
            return swp.format;
        }

        panic;
    }

    /**
     * @returns: the depth format of the selected device
     * */
    pub fn getDepthFormat (self)-> VkFormat {
        if let Ok (swp) = self._swapChain {
            return swp.depthFormat;
        }

        panic;
    }

    /**
     * @returns: the vulkan handle of the render pass
     */
    pub fn getRenderPass (self)-> VkRenderPass {
        if let Ok (swp) = self._swapChain {
            return swp.renderPass;
        }

        panic;
    }

    /**
     * @returns: the command buffer of the rendering frame
     */
    pub fn getCommandBuffer (self)-> VkCommandBuffer {
        self._commandBuffers [self._currentFrame]
    }

    /**
     * @returns: the number of images in the swap chain
     * */
    pub fn getSwapchainNbFrames (self)-> u32 {
        if let Ok (swp) = self._swapChain {
            return cast!u32 (swp.framebuffers.len);
        }

        panic;
    }

    /**
     * @returns: the command pool used to create command buffers
     */
    pub fn getDrawCommandPool (self)-> VkCommandPool {
        self._drawPool
    }

    /**
     * @returns: the command pool used to create command buffers
     */
    pub fn getSingleTimeCommandPool (self)-> VkCommandPool {
        self._memoryPool
    }

    /**
     * @returns: the graphics queue of the device
     */
    pub fn getGraphicsQueue (self)-> VkQueue {
        self._graphicsQueue
    }

    /**
     * @returns: the present queue of the device
     * */
    pub fn getPresentQueue (self)-> VkQueue {
        self._presentQueue
    }

    /**
     * @returns: the vma allocator of the device
     */
    pub fn getMemoryAllocator (mut self)-> dmut &MemoryAllocator {
        if let Ok (dmut a) = alias self._allocator {
            return alias a;
        }

        panic;
    }

    /**
     * @returns: the allocator for descriptor sets
     * */
    pub fn getDescriptorAllocator (mut self)-> dmut &DescriptorAllocator {
        if let Ok (dmut a) = alias self._descPool {
            return alias a;
        }

        panic;
    }

    /**
     * @returns: the index of the frame being drawn (on which command are sent)
     */
    pub fn getCurrentFrameIndex (self)-> u32 {
        self._currentFrame
    }

    /**
     * @returns: the indices of the queue family used by the physical device (basically graphics and present)
     */
    pub fn getPhysicalDeviceFamilyIndices (self)-> [u32] {
        self._physicalDeviceFamilyIndices
    }

    /**
     * @returns: the number of uniq family indices
     */
    pub fn getPhysicalDeviceFamilyIndiceCounts (self)-> u32 {
        if (self._physicalDeviceFamilyIndices [0] == self._physicalDeviceFamilyIndices [1]) {
            1u32
        } else 2u32
    }

    /**
     * @returns: the maximum number of samples that can be attached to an image
     * */
    pub fn getMaxSampleCounts (self)-> VkSampleCountFlagBits {
        let dmut properties = VkPhysicalDeviceProperties ();
        vkGetPhysicalDeviceProperties (self._physicalDevice, alias &properties);

        let count = properties.limits.framebufferColorSampleCounts & properties.limits.framebufferDepthSampleCounts;
        if (count & VkSampleCountFlagBits::VK_SAMPLE_COUNT_64_BIT) != 0 { return VkSampleCountFlagBits::VK_SAMPLE_COUNT_64_BIT };
        if (count & VkSampleCountFlagBits::VK_SAMPLE_COUNT_32_BIT) != 0 { return VkSampleCountFlagBits::VK_SAMPLE_COUNT_32_BIT };
        if (count & VkSampleCountFlagBits::VK_SAMPLE_COUNT_16_BIT) != 0 { return VkSampleCountFlagBits::VK_SAMPLE_COUNT_16_BIT };
        if (count & VkSampleCountFlagBits::VK_SAMPLE_COUNT_8_BIT) != 0 { return VkSampleCountFlagBits::VK_SAMPLE_COUNT_8_BIT };
        if (count & VkSampleCountFlagBits::VK_SAMPLE_COUNT_4_BIT) != 0 { return VkSampleCountFlagBits::VK_SAMPLE_COUNT_4_BIT };
        if (count & VkSampleCountFlagBits::VK_SAMPLE_COUNT_2_BIT) != 0 { return VkSampleCountFlagBits::VK_SAMPLE_COUNT_2_BIT };

        VkSampleCountFlagBits::VK_SAMPLE_COUNT_1_BIT
    }

    /**
     * @returns: true iif the swapchain is outdated
     * */
    pub fn needResize (self)-> bool {
        self._resizingWindow
    }

    /**
     * ======================================================================================================
     * ======================================================================================================
     * ===============================================   USAGE  =============================================
     * ======================================================================================================
     * ======================================================================================================
     */

    /**
     * Wait for the previous frame to be finished rendering
     */
    pub fn waitPreviousFrame (mut self) {
        loop {
            if vkWaitForFences (self._device, 1u32, &self._inFlightFence, VK_TRUE, u64::max) != VkResult::VK_TIMEOUT {
                break;
            }
        }

        vkResetFences (self._device, 1u32, &self._inFlightFence);
    }

    /**
     * Wait for the device to be idle
     */
    pub fn waitIdle (mut self) {
        vkDeviceWaitIdle (self._device);
    }

    /**
     * The window size changed so we need to inform the device
     */
    pub fn windowResize (mut self) {
        self._resizingWindow = true;
    }

    /**
     * Reset the command buffers
     */
    pub fn clearCommandBuffer (mut self) {
        vkResetCommandBuffer (self._commandBuffers [self._currentFrame], 0u32);
    }

    /**
     * Wait for an image to be available for rendering, and return its index
     */
    pub fn acquireNextImage (mut self)-> i32 {
        if let Ok (swp) = self._swapChain {
            use std::time::_;

            let mut imageIndex = 0u32;

            let result = vkAcquireNextImageKHR (self._device, swp.chain, u64::max, self._imageAvailableSem, null, alias &imageIndex);
            if (result == VkResult::VK_ERROR_OUT_OF_DATE_KHR) {
                self._resizingWindow = true;
                return -1;
            }
            else if (result != VkResult::VK_SUCCESS && result != VkResult::VK_SUBOPTIMAL_KHR) {
                self._resizingWindow = true;
                return -1;
            }

            self._currentFrame = imageIndex;
            return cast!i32 (imageIndex);
        }

        return -1;
    }

    /**
     * Start the recording of drawing
     */
    pub fn startRecording (self)-> VkResult {
        let mut cmdBegin = VkCommandBufferBeginInfo ();
        cmdBegin.sType = VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;

        vkBeginCommandBuffer (self._commandBuffers [self._currentFrame], &cmdBegin)
    }

    /**
     * Stop the recording of drawing
     * @assume the recording was started
     */
    pub fn stopRecording (self)-> VkResult {
        vkEndCommandBuffer (self._commandBuffers [self._currentFrame])
    }

    /**
     * Start a the render pass
     * @params:
     *    - imageIndex: the index of the image to use for rendering
     * @assume: imageIndex was acquired with self:.acquireNextImage ()
     */
    pub fn startRenderPass (self, imageIndex : u32) {
        if let Ok (swp) = self._swapChain {
            swp.startRenderPass (imageIndex, self._commandBuffers [self._currentFrame]);
        }
    }

    /**
     * Stop the render pass
     * @assume: it was started
     */
    pub fn stopRenderPass (self) {
        vkCmdEndRenderPass (self._commandBuffers [self._currentFrame]);
    }

    /**
     * Wait the inflight frame to be rendered and present it to the window surface
     */
    pub fn presentScreen (mut self, image : u32)-> VkResult {
        if let Ok (swp) = self._swapChain {
            atomic self {
                self._submitInfo.commandBufferCount   = 1u32;
                self._submitInfo.pCommandBuffers      = &self._commandBuffers [self._currentFrame];

                let r = vkQueueSubmit (self._graphicsQueue, 1u32, &self._submitInfo, self._inFlightFence);
                if (r != VkResult::VK_SUCCESS) {
                    log::error #("Device", "Error present screen queue submit : ", self._currentFrame, " ", image);
                    return r;
                }

                let chain = swp.chain;

                let mut presentInfo = VkPresentInfoKHR ();
                presentInfo.sType              = VkStructureType::VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;
                presentInfo.waitSemaphoreCount = 1u32;
                presentInfo.pWaitSemaphores    = &self._renderFinishedSem;
                presentInfo.swapchainCount     = 1u32;
                presentInfo.pSwapchains        = &chain;
                presentInfo.pImageIndices      = &image;

                let r2 = vkQueuePresentKHR (self._presentQueue, &presentInfo);
                if (r2 == VkResult::VK_ERROR_OUT_OF_DATE_KHR || r2 == VkResult::VK_SUBOPTIMAL_KHR) {
                    self._resizingWindow = true;
                } else if (r2 != VkResult::VK_SUCCESS) {
                    log::error #("Device", "Error present screen queue present : ", self._currentFrame, " ", image);
                    return r2;
                }

                // self._currentFrame = (self._currentFrame + 1u32) % cast!u32 (swp.framebuffers.len);
                vkQueueWaitIdle (self._presentQueue);
            }

            return VkResult::VK_SUCCESS;
        }

        VkResult::VK_ERROR_UNKNOWN
    }

    /**
     * Create a command buffer for a single time command
     */
    pub fn beginSingleTimeCommand (mut self)-> dmut VkCommandBuffer {
        let mut allocInfo = VkCommandBufferAllocateInfo ();
        allocInfo.sType              = VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
        allocInfo.level              = VkCommandBufferLevel::VK_COMMAND_BUFFER_LEVEL_PRIMARY;
        allocInfo.commandPool        = self._memoryPool;
        allocInfo.commandBufferCount = 1u32;

        let dmut cmd : VkCommandBuffer = null;
        vkAllocateCommandBuffers (self._device, &allocInfo, alias &cmd);

        let mut beginInfo = VkCommandBufferBeginInfo ();
        beginInfo.sType = VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
        beginInfo.flags = cast!u32 (VkCommandBufferUsageFlagBits::VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT);

        vkBeginCommandBuffer (cmd, &beginInfo);
        return alias cmd;
    }

    /**
     * End a command that was created by 'self:.beginSingleTimeCommand ()'
     * @params:
     *     - cmd: the command to end
     * @warning: the command buffer is unusable afterwards
     */
    pub fn endSingleTimeCommand (mut self, dmut cmd : VkCommandBuffer) {
        vkEndCommandBuffer (cmd);
        let mut submitInfo = VkSubmitInfo ();
        submitInfo.sType              = VkStructureType::VK_STRUCTURE_TYPE_SUBMIT_INFO;
        submitInfo.commandBufferCount = 1u32;
        submitInfo.pCommandBuffers    = &cmd;

        vkQueueSubmit (self._graphicsQueue, 1u32, &submitInfo, null);
        vkQueueWaitIdle (self._graphicsQueue);

        vkFreeCommandBuffers (self._device, self._memoryPool, 1u32, &cmd);
    }

    /**
     * ======================================================================================================
     * ======================================================================================================
     * ============================================   MEM ALLOCATOR  ========================================
     * ======================================================================================================
     * ======================================================================================================
     */

    prv fn createMemoryAllocator (mut self) {
        self._allocator = (copy MemoryAllocator (alias self))?;
    }

    prv fn createDescriptorAllocator (mut self) {
        self._descPool = (copy DescriptorAllocator (alias self))?;
    }

    /**
     * ======================================================================================================
     * ======================================================================================================
     * ============================================   COMMAND POOL  =========================================
     * ======================================================================================================
     * ======================================================================================================
     */

    /**
     * Create a command pool for the device used to instantiate command buffers on the graphic queue
     */
    prv fn createCommandPools (mut self)
        throws BalderError
    {
        let mut poolInfo = VkCommandPoolCreateInfo ();
        poolInfo.sType            = VkStructureType::VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
        poolInfo.flags            = cast!u32 (VkCommandPoolCreateFlagBits::VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT);
        poolInfo.queueFamilyIndex = self._physicalDeviceFamilyIndices [1];

        if (vkCreateCommandPool (self._device, &poolInfo, null, alias &self._drawPool) != VkResult::VK_SUCCESS) {
            throw copy BalderError ("Failed to create the command poll");
        }

        if (vkCreateCommandPool (self._device, &poolInfo, null, alias &self._memoryPool) != VkResult::VK_SUCCESS) {
            throw copy BalderError ("Failed to create the command poll");
        }
    }

    /**
     * Create the command buffers of the device
     */
    prv fn createCommandBuffers (mut self)
        throws BalderError
    {
        if let Ok (swp) = self._swapChain {
            self._commandBuffers = copy [null ; swp.framebuffers.len];
            let mut allocInfo = VkCommandBufferAllocateInfo ();
            allocInfo.sType              = VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
            allocInfo.commandPool        = self._drawPool;
            allocInfo.level              = VkCommandBufferLevel::VK_COMMAND_BUFFER_LEVEL_PRIMARY;
            allocInfo.commandBufferCount = cast!u32 (self._commandBuffers.len);

            if (vkAllocateCommandBuffers (self._device, &allocInfo, alias self._commandBuffers.ptr) != VkResult::VK_SUCCESS) {
                throw copy BalderError ("Failed to allocate command buffers");
            }
        }
    }

    /**
     * Create the synchronization object used to synchronize frame rendering and presenting
     */
    prv fn createSyncObjects (mut self)
        throws BalderError
    {
        let mut semInfo = VkSemaphoreCreateInfo ();
        semInfo.sType = VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;

        let mut fenceInfo = VkFenceCreateInfo ();
        fenceInfo.sType = VkStructureType::VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;
        fenceInfo.flags = cast!u32 (VkFenceCreateFlagBits::VK_FENCE_CREATE_SIGNALED_BIT);

        {
            let r = vkCreateFence (self._device, &fenceInfo, null, alias &self._inFlightFence);
            if (r != VkResult::VK_SUCCESS) {
                throw copy BalderError ("Failed to create fence");
            }
        }

        {
            let r = vkCreateSemaphore (self._device, &semInfo, null, alias &self._renderFinishedSem);
            if (r != VkResult::VK_SUCCESS) {
                throw copy BalderError ("Failed to create semaphore");
            }
        }

        {
            let r = vkCreateSemaphore (self._device, &semInfo, null, alias &self._imageAvailableSem);
            if (r != VkResult::VK_SUCCESS) {
                throw copy BalderError ("Failed to create semaphore");
            }
        }

        self._waitPipelineStage = VkPipelineStageFlagBits::VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;

        self._submitInfo.sType                = VkStructureType::VK_STRUCTURE_TYPE_SUBMIT_INFO;
        self._submitInfo.waitSemaphoreCount   = 1u32;
        self._submitInfo.pWaitSemaphores      = &self._imageAvailableSem;
        self._submitInfo.pWaitDstStageMask    = &self._waitPipelineStage;
        self._submitInfo.signalSemaphoreCount = 1u32;
        self._submitInfo.pSignalSemaphores    = &self._renderFinishedSem;
    }

    /**
     * ======================================================================================================
     * ======================================================================================================
     * =============================================   SWAP CHAIN  ==========================================
     * ======================================================================================================
     * ======================================================================================================
     */

    /**
     * Create the swapchain of the device
     * */
    fn createSwapchain (mut self, dmut win : &Window)
        throws BalderError
    {
        let dmut swp = copy SwapChain (alias self);
        swp:.configure (alias win, self._cfg);
        self._swapChain = (alias swp)?;
    }

    /**
     * Recreate the swapchain that became obsolete
     */
    pub fn recreateSwapchain (mut self)
        throws BalderError
    {
        vkDeviceWaitIdle (self._device);

        atomic self {
            self:.disposeSwapchain ();
            if let Ok (dmut w) = alias self._win {
                self:.createSwapchain (alias w);
            } else {
                throw copy BalderError ("Malformed device");
            }
        }

        self._resizingWindow = false;
        log::debug #("Device", "Recreated swap chain");
    }

    /**
     * Dispose the swap chain and its components
     */
    pub fn disposeSwapchain (mut self) {
        if let Ok (dmut swp) = alias self._swapChain {
            swp:.dispose ();
            self._swapChain = none;
        }
    }
    
    /**
     * ======================================================================================================
     * ======================================================================================================
     * ===========================================   LOGICAL DEVICE  ========================================
     * ======================================================================================================
     * ======================================================================================================
     */

    /**
     * Create the logical device to attach to the selected physical device to render things
     */
    fn createLogicalDevice (mut self, dmut _ : &Window)
        throws BalderError
    {
        let mut priority = 1.0f;

        let mut uniq : [u32 => mut ()] = copy [];
        let mut v : [mut VkDeviceQueueCreateInfo] = [];

        for i in self._physicalDeviceFamilyIndices {
            if (i !in uniq) {
                let mut queue = VkDeviceQueueCreateInfo ();
                queue.sType = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
                queue.queueFamilyIndex = i;
                queue.queueCount = 1u32;
                queue.pQueuePriorities = &priority;

                v ~= [queue];
                uniq [i] = ();
            }
        }

        let mut queueCreateInfos = v;
        let mut logFeatures = VkPhysicalDeviceFeatures ();
        if self._cfg.vulkan.anisotropy {
            logFeatures.samplerAnisotropy = VK_TRUE;
        }

        let mut extensions = copy [std::conv::toStringZ (i) for i in self._requiredExtensions];

        let mut createInfo = VkDeviceCreateInfo ();
        createInfo.sType                   = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
        createInfo.pQueueCreateInfos       = queueCreateInfos.ptr;
        createInfo.queueCreateInfoCount    = cast!u32 (queueCreateInfos.len);
        createInfo.pEnabledFeatures        = &logFeatures;
        createInfo.enabledExtensionCount   = cast!u32 (extensions.len);
        createInfo.ppEnabledExtensionNames = extensions.ptr;

        if (vkCreateDevice (self._physicalDevice, &createInfo, null, alias &self._device) != VkResult::VK_SUCCESS) {
            throw copy BalderError ("Failed to create logical device");
        }

        vkGetDeviceQueue (self._device, self._physicalDeviceFamilyIndices [0], 0u32, alias &self._graphicsQueue);
        vkGetDeviceQueue (self._device, self._physicalDeviceFamilyIndices [1], 0u32, alias &self._presentQueue);

        if (self._graphicsQueue == null) throw copy BalderError ("Failed to retreive graphics queue");
        if (self._presentQueue == null) throw copy BalderError ("Failed to retreive present queue");

        log::debug #("Device", "Created logical device");
    }
    
    /**
     * ======================================================================================================
     * ======================================================================================================
     * ===========================================   PHYSICAL DEVICE  =======================================
     * ======================================================================================================
     * ======================================================================================================
     */

    /**
     * List all available devices and select the best one for rendering
     */
    fn selectPhysicalDevice (mut self, dmut win : &Window)
        throws BalderError
    {
        let mut deviceCount = 0u32;
        if (self._instance:.getHandle () == null) throw copy BalderError ("Invalid vulkan instance");

        vkEnumeratePhysicalDevices (self._instance:.getHandle (), alias &deviceCount, null);
        if (deviceCount == 0u32) throw copy BalderError ("No available devices");

        let dmut devices : [VkPhysicalDevice] = copy [null ; deviceCount];
        vkEnumeratePhysicalDevices (self._instance:.getHandle (), alias &deviceCount, alias devices.ptr);

        let mut maxScore = 0;
        for i in 0u32 .. deviceCount {
            let (name, score, fam) = self.ratePhysicalDevice (win:.getVulkanSurface (), devices [i]);
            if (maxScore <= score) {
                self._physicalDevice = alias devices [i];
                self._physicalDeviceName = name;
                self._physicalDeviceFamilyIndices = fam;
                maxScore = score;
            }
        }

        if (self._physicalDevice == null) throw copy BalderError ("No suitable device found");
        log::debug #("Device", "Selected physical device : ", self._physicalDeviceName);
    }

    /**
     * @returns: a score for the physical device, -1 if the device is not suitable
     */
    fn ratePhysicalDevice (self, surface : VkSurfaceKHR, device : VkPhysicalDevice)-> ([c8], i32, [u32]) {
        let dmut properties = VkPhysicalDeviceProperties ();
        let dmut features = VkPhysicalDeviceFeatures ();
        let dmut memProperties = VkPhysicalDeviceMemoryProperties ();

        vkGetPhysicalDeviceProperties (device, alias &properties);
        vkGetPhysicalDeviceFeatures (device, alias &features);
        vkGetPhysicalDeviceMemoryProperties (device, alias &memProperties);

        let name = unsafe {
            fromStringZ (properties.deviceName.ptr)
        };

        if (features.geometryShader == 0u32) return ("", -1, []);

        let family = self.findQueueFamily (surface, device);
        if (!family._0) return ("", -1, []);
        if (!self.checkDeviceExtensionSupport (device)) return ("", -1, []);

        let mut formatCount = 0u32;
        vkGetPhysicalDeviceSurfaceFormatsKHR (device, surface, alias &formatCount, null);
        if formatCount == 0 return ("", -1, []);

        let mut presentCount = 0u32;
        vkGetPhysicalDeviceSurfacePresentModesKHR (device, surface, alias &presentCount, null);
        if presentCount == 0 return ("", -1, []);

        let mut score = cast!i32 (properties.limits.maxImageDimension2D);

        if properties.deviceType == VkPhysicalDeviceType::VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU {
            score += 1000;
        }

        if properties.deviceType == VkPhysicalDeviceType::VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU {
            score += 2000;
        }

        if self._cfg.vulkan.device != "" {
            if name == self._cfg.vulkan.device {
                score = 1;
            } else score = 0;
        }

        log::debug #("Device", "Rating physical device : ", name, " = ", score);
        (name, score, copy [family._1, family._2])
    }

    /**
     * Find the indices of the queue family (graphics and present)
     */
    fn findQueueFamily (self, surface : VkSurfaceKHR, device : VkPhysicalDevice)-> (bool, u32, u32) {
        let mut gr = 0u32, mut pr = 0u32;
        let mut foundGr = false, mut foundPr = false;

        let mut queueFamilyCount = 0u32;
        vkGetPhysicalDeviceQueueFamilyProperties (device, alias &queueFamilyCount, null);

        if (queueFamilyCount != 0u32) {
            let dmut queueFamilies = copy [VkQueueFamilyProperties () ; queueFamilyCount];
            vkGetPhysicalDeviceQueueFamilyProperties (device, alias &queueFamilyCount, alias queueFamilies.ptr);

            for i, q in queueFamilies {
                if (q.queueFlags & cast!u32 (VkQueueFlagBits::VK_QUEUE_GRAPHICS_BIT) != 0u32) {
                    gr = cast!u32 (i);
                    foundGr = true;
                }

                let mut presentSupport = VK_FALSE;
                vkGetPhysicalDeviceSurfaceSupportKHR (device, cast!u32 (i), surface, alias &presentSupport);
                if (presentSupport != VK_FALSE) {
                    pr = cast!u32 (i);
                    foundPr = true;
                }

                if (foundPr && foundGr) break;
            }
        }

        return (foundGr && foundPr, gr, pr);
    }

    /**
     * @returns: true if the physical device has the correct extension for the balder engine to work, false otherwise
     */
    fn checkDeviceExtensionSupport (self, device : VkPhysicalDevice)-> bool {
        let mut extensionCount = 0u32;
        vkEnumerateDeviceExtensionProperties (device, null, alias &extensionCount, null);

        if (extensionCount != 0u32) {
            let dmut availableExtensions = copy [VkExtensionProperties () ; extensionCount];
            vkEnumerateDeviceExtensionProperties (device, null, alias &extensionCount, alias availableExtensions.ptr);

            let dmut required = copy self._requiredExtensions;
            for a in availableExtensions {
                unsafe {
                    required:.remove (fromStringZ (a.extensionName.ptr));
                }
            }

            return required.len == 0us;
        }

        false
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {

        pub over dispose (mut self) {
            atomic self {
                self._requiredExtensions = copy [];
                self._win = none;

                // No need to destroy the command buffers, they are managed by the pool
                if (self._drawPool != null) {
                    vkDestroyCommandPool (self._device, self._drawPool, null);
                    self._drawPool = null;

                    // So they are destroyed here
                    self._commandBuffers = [];
                }

                if self._memoryPool != null {
                    vkDestroyCommandPool (self._device, self._memoryPool, null);
                    self._memoryPool = null;
                }

                self:.disposeSwapchain ();

                if let Ok (dmut a) = alias self._allocator {
                    a:.dispose ();
                    self._allocator = none;
                }

                if let Ok (dmut d) = alias self._descPool {
                    d:.dispose ();
                    self._descPool = none;
                }


                if (self._imageAvailableSem != null) {
                    // We dispose the three elements at the same time, they are always constructed and used together
                    vkDestroySemaphore (self._device, self._imageAvailableSem, null);
                    vkDestroySemaphore (self._device, self._renderFinishedSem, null);
                    vkDestroyFence (self._device, self._inFlightFence, null);

                    self._imageAvailableSem = null;
                    self._renderFinishedSem = null;
                    self._inFlightFence = null;
                }

                if (self._device != null) {
                    vkDestroyDevice (self._device, null);
                    self._device = null;
                    self._graphicsQueue = null;
                    self._presentQueue = null;

                    log::debug #("Device", "Disposing device");
                }

                self._physicalDevice = null;
                self._physicalDeviceName = "";
                self._physicalDeviceFamilyIndices = [];
            }
        }
    }

    __dtor (mut self) {
        self:.dispose ();
    }


}
