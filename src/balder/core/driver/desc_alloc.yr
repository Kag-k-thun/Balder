in desc_alloc;

use balder::core::driver::_;
use balder::core::{error, dispose};
use vulkan::_;

use balder::utils::log;


@final
pub class DescriptorAllocator {
    
    // The vulkan device used for allocation
    let dmut _device : &VulkanDevice;

    // The pool being used
    let dmut _currentPool : VkDescriptorPool = null;

    // The set of used pools
    let dmut _usedPools : [VkDescriptorPool] = [];

    // The set of free pools
    let dmut _freePools : [VkDescriptorPool] = [];

    /**
     * ======================================================================================================
     * ======================================================================================================
     * =======================================   CTOR AND CONFIGURE   =======================================
     * ======================================================================================================
     * ======================================================================================================
     */
    
    pub self (dmut device : &VulkanDevice)
        with _device = alias device
    {}

    /**
     * @returns: the device used to allocate descriptor sets
     */
    pub fn getDevice (mut self)-> dmut &VulkanDevice {
        alias self._device
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          ALLOCATION          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Allocate a descriptor set
     */
    pub fn allocate (mut self, dmut layout : VkDescriptorSetLayout)-> dmut [VkDescriptorSet]
        throws BalderError
    {
        let dmut pool = self:.getPool ();
        let dmut set : [VkDescriptorSet] = copy [null ; self._device.getSwapchainNbFrames ()];
        let mut layouts : [mut VkDescriptorSetLayout] = copy [layout ; self._device.getSwapchainNbFrames ()];

        let mut allocInfo = VkDescriptorSetAllocateInfo ();
        allocInfo.sType              = VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
        allocInfo.descriptorPool     = pool;
        allocInfo.descriptorSetCount = cast!u32 (layouts.len);
        allocInfo.pSetLayouts        = layouts.ptr;

        let mut res = vkAllocateDescriptorSets (self._device:.getDeviceHandle (), &allocInfo, alias set.ptr);
        if (res == VkResult::VK_ERROR_FRAGMENTED_POOL || res == VkResult::VK_ERROR_OUT_OF_POOL_MEMORY) {
            log::debug ("Pool is full, try to reallocate in a new one");
            allocInfo.descriptorPool = self:.getPool (forceFree-> true);
            res = vkAllocateDescriptorSets (self._device:.getDeviceHandle (), &allocInfo, alias set.ptr);
        }

        if (res != VkResult::VK_SUCCESS) {
            throw copy BalderError ("Failed to allocate a descriptor set."s8);
        }

        return alias set;
    }
    
    /**
     * ======================================================================================================
     * ======================================================================================================
     * =============================================   PRIVATE   ============================================
     * ======================================================================================================
     * ======================================================================================================
     */

    /**
     * @returns: a usable pool for set allocation
     */
    fn getPool (mut self, forceFree : bool = false)-> dmut VkDescriptorPool
        throws BalderError
    {
        let dmut pool = if (forceFree || self._currentPool == null) {
            let dmut p = alias self:.getFreePool ();
            self._usedPools = alias (self._usedPools ~ [alias p]);
            alias p
        } else {
            alias self._currentPool
        };        

        alias pool
    }
    
    /**
     * @returns: a usable descriptor pool for allocation
     */
    fn getFreePool (mut self)-> dmut VkDescriptorPool
        throws BalderError
    {
        if (self._freePools.len != 0us) {
            let dmut fr = alias self._freePools [$ - 1us];
            self._freePools = alias self._freePools [0us .. $ - 1us];

            return alias fr;
        }

        return self:.createDescriptorPool ();
    }

    /**
     * Create a new descriptor pool
     */
    fn createDescriptorPool (mut self)-> dmut VkDescriptorPool
        throws BalderError
    {
        let mut desc = VkDescriptorPoolSize ();
        desc.descriptorCount = self._device.getSwapchainNbFrames ();

        let mut poolInfo = VkDescriptorPoolCreateInfo ();
        poolInfo.sType         = VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
        poolInfo.poolSizeCount = 1;
        poolInfo.pPoolSizes    = &desc;
        poolInfo.maxSets       = self._device.getSwapchainNbFrames ();

        let dmut descPool : VkDescriptorPool = null;
        if (vkCreateDescriptorPool (self._device:.getDeviceHandle (), &poolInfo, null, alias &descPool) != VkResult::VK_SUCCESS) {
            throw copy BalderError ("failed to create descriptor pool."s8);
        }

        return alias descPool;
    }
    
    /**
     * ======================================================================================================
     * ======================================================================================================
     * =============================================  CLEANING   ============================================
     * ======================================================================================================
     * ======================================================================================================
     */
    
    impl Disposable {
        pub over dispose (mut self) {
            log::debug ("Disposing descriptor allocator");
            for i in 0us .. self._freePools.len {
                vkDestroyDescriptorPool (self._device:.getDeviceHandle (), self._freePools [i], null);
            }

            for i in 0us .. self._usedPools.len {
                vkDestroyDescriptorPool (self._device:.getDeviceHandle (), self._usedPools [i], null);
            }

            self._freePools = [];
            self._usedPools = [];
        }
    }

    __dtor (mut self) {
        self:.dispose ();
    }
}
