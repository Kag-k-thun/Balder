in desc_alloc;

use balder::core::driver::_;
use balder::core::{error, dispose};
use balder::utils::log;

use ::vulkan::core;
use ::std::io;

class DescriptorPool {
    pub let uid : usize;
    pub let dmut handle : VkDescriptorPool;
    pub let maxSet : u32;
    pub let mult : u32;

    pub let config : [VkDescriptorType];
    pub let mut usedSet : u32;

    pub self (uid : usize, dmut handle : VkDescriptorPool, maxSet : u32, multiplier : u32, config : [VkDescriptorType])
        with uid = uid
        , handle = alias handle
        , maxSet = maxSet
        , config = config
        , usedSet = 0
        , mult = multiplier
    {}

}

@final
pub class DescriptorAllocator {
    
    // The vulkan device used for allocation
    let dmut _device : &VulkanDevice;

    // The uniq ids of the allocated pools
    let mut _uid : usize = 0;

    // The set of used pools
    let dmut _pools : [usize => &DescriptorPool] = copy [];

    // The set of free pools
    let dmut _freePools : [usize => &DescriptorPool] = copy [];

    // The multiplier used for each configuration (nextPow2 when it reaches the limit of allocated pools)
    let dmut _multiplier : [[VkDescriptorType] => u32] = copy [];

    /**
     * ======================================================================================================
     * ======================================================================================================
     * =======================================   CTOR AND CONFIGURE   =======================================
     * ======================================================================================================
     * ======================================================================================================
     */
    
    pub self (dmut device : &VulkanDevice)
        with _device = alias device
    {}

    /**
     * @returns: the device used to allocate descriptor sets
     */
    pub fn getDevice (mut self)-> dmut &VulkanDevice {
        alias self._device
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          ALLOCATION          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Allocate a descriptor set
     */
    pub fn allocate (mut self, layout : VkDescriptorSetLayout, sizes : [VkDescriptorType])-> dmut (usize, [VkDescriptorSet])
        throws BalderError
    {
        atomic self._device {
            let dmut pool = self:.getPool (sizes, self._device.getSwapchainNbFrames ());

            let dmut set : [VkDescriptorSet] = copy [null ; self._device.getSwapchainNbFrames ()];
            let mut layouts : [mut VkDescriptorSetLayout] = copy [layout ; self._device.getSwapchainNbFrames ()];

            let mut allocInfo = VkDescriptorSetAllocateInfo ();
            allocInfo.sType              = VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
            allocInfo.descriptorPool     = pool.handle;
            allocInfo.descriptorSetCount = self._device.getSwapchainNbFrames ();
            allocInfo.pSetLayouts        = layouts.ptr;

            let mut res = vkAllocateDescriptorSets (self._device.getDeviceHandle (), &allocInfo, alias set.ptr);
            if res == VkResult::VK_SUCCESS {
                pool.usedSet += self._device.getSwapchainNbFrames ();
                if pool.usedSet == pool.maxSet {
                    self._freePools:.remove (pool.uid);
                }

                return (pool.uid, alias set);
            }
        }

        throw copy BalderError ("Failed to allocate a descriptor set."s8);
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DEALLOCATE          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Deallocate descriptor set allocated by a descriptor pool
     * @params:
     *    - uid: the uid of the descriptor pool that performed the allocation
     *    - sets: the sets to free
     * */
    pub fn deallocate (mut self, uid : usize, dmut sets : [VkDescriptorSet]) {
        atomic self._device {
            if let Ok (dmut pool) = alias self._pools [uid] {
                vkFreeDescriptorSets (self._device.getDeviceHandle (), pool.handle, cast!u32 (sets.len), sets.ptr);

                pool.usedSet -= cast!u32 (sets.len);

                if pool.usedSet == 0 {
                    self._freePools:.remove (uid);
                    self._pools:.remove (uid);
                    vkDestroyDescriptorPool (self._device.getDeviceHandle (), pool.handle, null);

                    let mut maxMult = 1u32, mut has = false;
                    for _, z in self._pools {
                        if z.config == pool.config {
                            has = true;
                            if maxMult < z.mult { maxMult = z.mult; }
                        }
                    }

                    if has { self._multiplier [pool.config] = maxMult; }
                    else { self._multiplier:.remove (pool.config); }
                } else {
                    self._freePools [uid] = alias pool;
                }
            } else {
                log::error #("DescAlloc", "Sets not allocated by this pool?");
            }
        }
    }

    /**
     * ======================================================================================================
     * ======================================================================================================
     * =============================================   PRIVATE   ============================================
     * ======================================================================================================
     * ======================================================================================================
     */

    /**
     * @returns: a usable pool for set allocation
     */
    fn getPool (mut self, config : [VkDescriptorType], needSet : u32)-> dmut &DescriptorPool
        throws BalderError
    {
        for _, dmut p in alias self._freePools {
            if p.config == config && p.maxSet - p.usedSet >= needSet {
                return alias p;
            }
        }

        return self:.createDescriptorPool (config);
    }

    /**
     * Create a new descriptor pool
     */
    fn createDescriptorPool (mut self, sizes : [VkDescriptorType])-> dmut &DescriptorPool
        throws BalderError
    {
        let multiplier = if let Ok (m) = self._multiplier [sizes] { m * 2u32 } else { 1u32 };

        let dmut descs = copy [VkDescriptorPoolSize () ; sizes.len];
        for i, t in sizes {
            descs [i].type = t;
            descs [i].descriptorCount = self._device.getSwapchainNbFrames () * multiplier;
        }

        let mut poolInfo = VkDescriptorPoolCreateInfo ();
        poolInfo.sType         = VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
        poolInfo.poolSizeCount = cast!u32 (descs.len);
        poolInfo.pPoolSizes    = descs.ptr;
        poolInfo.maxSets       = self._device.getSwapchainNbFrames () * multiplier;
        poolInfo.flags = VkDescriptorPoolCreateFlagBits::VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT;

        let dmut descPool : VkDescriptorPool = null;
        if (vkCreateDescriptorPool (self._device.getDeviceHandle (), &poolInfo, null, alias &descPool) != VkResult::VK_SUCCESS) {
            throw copy BalderError ("failed to create descriptor pool."s8);
        }

        let uid = self._uid + 1;
        self._uid += 1;
        self._multiplier [sizes] = multiplier;

        let dmut result = copy DescriptorPool (uid, alias descPool, poolInfo.maxSets, multiplier, sizes);
        self._freePools [uid] = alias result;
        self._pools [uid] = alias result;

        return alias result;
    }
    
    /**
     * ======================================================================================================
     * ======================================================================================================
     * =============================================  CLEANING   ============================================
     * ======================================================================================================
     * ======================================================================================================
     */
    
    impl Disposable {
        pub over dispose (mut self) {
            if self._pools.len != 0 {
                log::debug #("DescAlloc", "Disposing descriptor allocator");
                for _, z in self._pools {
                    vkDestroyDescriptorPool (self._device.getDeviceHandle (), z.handle, null);
                }

                self._freePools = copy [];
                self._pools = copy [];
                self._multiplier = copy [];
            }
        }
    }

    __dtor (mut self) {
        self:.dispose ();
    }
}
