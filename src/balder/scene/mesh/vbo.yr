mod balder::scene::mesh::vbo;

import balder::core::vulkan::_;
import balder::core::error;

import vulkan::_;

/**
 * Ancestor of all vertex buffer objects
 */
pub class @abstract VertexBufferObject {
    
    // The content of the vbo
    let dmut _buf : &Buffer;

    // The number of points in the vbo
    let mut _nbPoints : u32;

    /**
     * @params:
     *    - buf: the buffer containing the content of the vbo
     *    - nbPoints: the number of points in the vbo
     */
    prot self (dmut buf : &Buffer, nbPoints : u32)
        with _buf = alias buf, _nbPoints = nbPoints
    {}    


    pub def use (mut self) {
        let buffer = self._buf:.getVulkanBuffer ();
        let offset = 0u64;
        
        vkCmdBindVertexBuffers (self._buf:.getDevice ():.getCommandBuffer (), 0u32, 1u32, &buffer, &offset);
    }
    
    /**
     * @returns: the buffer containing the points of the vbo
     */
    pub def getBuffer (mut self)-> dmut &Buffer {
        alias self._buf
    }
    
    /**
     * @returns: the number of points in the vbo
     */
    pub def getNbPoints (self)-> u32 {
        self._nbPoints
    }
    
    impl Disposable {

        pub over dispose (mut self) {
            self._buf:.dispose ();
            self._nbPoints = 0u32;
        }        

    }        

}


/**
 * @templates: 
 *    - T: the struct defining the content of each point
 */
pub class VertexBufferObject {struct T} over VertexBufferObject {

    /**
     * @params:
     *    - device: the device used to allocate the buffer
     *    - datas: the datas to put in the buffer
     */
    pub self (dmut device : &VulkanDevice, datas : [T])
        with super (
            device:.getMemoryAllocator ():.allocBuffer (
                cast!u64 (datas.len * sizeof (T)),
                cast!u32 (VkBufferUsageFlagBits::VK_BUFFER_USAGE_VERTEX_BUFFER_BIT |
                          VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFER_DST_BIT),                
                cast!u32 (VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)),
            cast!u32 (datas.len))
        throws &BalderError
    {        
        self._buf:.update (datas);
    }
    
}
