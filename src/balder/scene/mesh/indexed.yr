mod balder::scene::mesh::indexed;

import balder::core::vulkan::cmd_alloc;
import balder::core::vulkan::device;
import balder::core::error;

import balder::scene::mesh::ibo;
import balder::scene::mesh::vbo;
import balder::scene::mesh::base;

/**
 * Ancestor of all indexed mesh
 */
pub class @abstract IndexedMesh over Mesh {

    // The buffer containing the indices of the mesh
    let dmut _ibo : &IndexBufferObject;

    // The buffer containing the vertices of the mesh
    let dmut _vbo : &VertexBufferObject;
    
    prot self (dmut ibo : &IndexBufferObject, dmut vbo : &VertexBufferObject)
        with _ibo = alias ibo, _vbo = alias vbo
    {}

    /**
     * Register the mesh using the command allocator
     * @assume: the command allocator is in load mode
     * @params:
     *    - cmd: the command allocator in which the mesh has to be registered
     */
    pub over register (mut self, dmut cmd : &IndirectCommandAllocator) {
        cmd:.registerIndexedObject (self._ibo.getNbPoints ());
    }

    /**
     * Draw the mesh using the command allocator
     * @assume: the command allocator is in draw mode
     * @params:
     *    - cmd: the command allocator in which the mesh has to be drawn
     */
    pub over draw (mut self, dmut cmd : &IndirectCommandAllocator) {
        self._vbo:.use ();
        self._ibo:.use ();

        cmd:.drawNextIndexed ();
    }

    impl Disposable {

        pub over dispose (mut self) {
            self._vbo:.dispose ();
            self._ibo:.dispose ();
        }        

    }

}

/**
 * @template:
 *    - V: the type of vertices
 *    - I: the type of indexes
 */
pub class if (is!{I}{T of u16} || is!{I}{T of u32}) IndexedMesh {struct V, I} over IndexedMesh {
    
    /**
     * Create a new indexed mesh 
     * @params:
     *    - device: the device used to allocate and render the mesh
     *    - vertices: the list of points inside the mesh
     *    - indices: the indices of the points forming the mesh
     */
    pub self (dmut device : &VulkanDevice, vertices : [V], indices : [I])
        with super (IndexBufferObject::new (alias device, indices),
                    VertexBufferObject::new (alias device, vertices))
        throws &BalderError
    {}
    
}
