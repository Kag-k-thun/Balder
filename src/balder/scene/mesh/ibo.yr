mod balder::scene::mesh::ibo;

import balder::core::vulkan::_;
import balder::core::error;

import std::traits;
import vulkan::_;

/**
 * Ancestor of all ibos
 */
pub class @abstract IndexBufferObject {

    // The buffer containing the index of the points
    let dmut _buf : &Buffer;

    // The number of points in the mesh
    let mut _nbPoints : u32;
    
    /**
     * @params: 
     *    - buf: the buffer containing the points
     *    - nbPoints: the number of points in the buffer
     */
    prot self (dmut buf : &Buffer, nbPoints : u32)
        with _buf = alias buf, _nbPoints = nbPoints
    {}

    /**
     * Use the index buffer for the next draw
     */
    pub def use (mut self);   
   
    /**
     * @returns: the buffer containing the points of the ibo
     */
    pub def getBuffer (mut self)-> dmut &Buffer {
        alias self._buf
    }
    
    /**
     * @returns: the number of points in the ibo
     */
    pub def getNbPoints (self)-> u32 {
        self._nbPoints
    }
    
    impl Disposable {

        pub over dispose (mut self) {
            self._buf:.dispose ();
            self._nbPoints = 0u32;
        }        

    }        

    
}

/**
 * @templates:
 *    - U: an unsigned int type
 */
pub class if (is!{U}{T of u16} || is!{U}{T of u32}) IndexBufferObject {U} over IndexBufferObject {

    /**
     * @params:
     *    - device: the device used to allocate the buffer
     *    - datas: the datas to put in the buffer
     */
    pub self (dmut device : &VulkanDevice, datas : [U])
        with super (
            device:.getMemoryAllocator ():.allocBuffer (           
                cast!u64 (datas.len * sizeof (U)),
                cast!u32 (VkBufferUsageFlagBits::VK_BUFFER_USAGE_INDEX_BUFFER_BIT |
                          VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFER_DST_BIT),
                cast!u32 (VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)),
            cast!u32 (datas.len))        
        throws &BalderError
    {
        self._buf:.update (datas);
    }

    /**
     * Use the index buffer for the next draw
     */
    pub over use (mut self) {
        cte if (is!{U}{T of u16}) {
            vkCmdBindIndexBuffer (self._buf:.getDevice ():.getCommandBuffer (), self._buf:.getVulkanBuffer (), 0u64, VkIndexType::VK_INDEX_TYPE_UINT16);
        } else {
            vkCmdBindIndexBuffer (self._buf:.getDevice ():.getCommandBuffer (), self._buf:.getVulkanBuffer (), 0u64, VkIndexType::VK_INDEX_TYPE_UINT32);
        } 
    }
    
}
