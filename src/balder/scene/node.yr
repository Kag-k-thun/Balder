in node;

pub mod ::node2D;
pub mod ::node3D;

use std::fs::path;
use balder::core::driver::_;
use balder::scene::_;

/**
 * Base
 * */
pub class Node {

    // The scene in which the node can be found
    let dmut _scene : (&Scene)? = none;

    // The name of the node
    let mut _name : Path;

    // The parent of the node (none if this is a root node)
    let dmut _parent : (&Node)? = none;

    // The list of childs in the node
    let dmut _childs : [[c8] => &Node] = copy [];

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          CTORS          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (name : [c8])
        with _name = Path (name)
    {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==============================          ATTACHING/DETACHING          ===============================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Attach the node to a scene
     * */
    pub fn attach (mut self, dmut scene : &Scene) {
        if let Ok (dmut sc) = alias self._scene {
            sc:.detach (alias self);
        }

        self._scene = (alias scene)?;
        scene:.attach (alias self);
        for _, dmut c in alias self._childs {
            c:.attach (alias scene);
        }
    }

    /**
     * Add a child node in the trees of node
     * */
    pub fn addChild (mut self, name : [c8], dmut node : &Node) {
        self:.removeChild (name);

        node._name = self._name.push (name);
        node._parent = (alias self)?;

        if let Ok (dmut sc) = alias self._scene {
            node:.attach (alias sc);
        }
    }

    /**
     * Remove a direct child in the node
     * */
    pub fn removeChild (mut self, name : [c8]) {
        if let Ok (dmut c) = alias self._childs [name] {
            if let Ok (dmut sc) = alias self._scene {
                sc:.detach (alias self);
            }

            c._scene = none;
            c._name = Path (name);
            c._parent = none;
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          FINDING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Find a child in the node tree
     * */
    pub fn getChild (mut self, name : Path)-> dmut (&Node)? {
        return self:.getChild (name.parts ());
    }

    /**
     * @returns: the parent of the node
     * */
    pub fn getParent (mut self)-> dmut (&Node)? {
        alias self._parent
    }

    /**
     * Find a child in the node tree
     * */
    fn getChild (mut self, name : [[c8]])-> dmut (&Node)? {
        if name.len == 0 { return (alias self)?; }
        if let Ok (dmut c) = alias self._childs [name [0]] {
            return c:.getChild (name [1 .. $]);
        }

        none
    }

    /**
     * @returns: the name of the node
     * */
    pub fn getName (self)-> Path {
        self._name
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          USAGE          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub fn onReady (mut self) {}

    pub fn onUpdate (mut self, delta : f32) { delta; }

}
