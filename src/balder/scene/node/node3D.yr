in node3D;

pub mod ::visual;

use balder::core::application::signal;
use balder::math::_;

@abstract
pub class Node3D over Node {

    // the position of the node
    let mut _position : vec3;

    // The rotation of the node
    let mut _rotation : vec3;

    // The scale of the node
    let mut _scale : vec3;

    // The transformation matrix of the node
    let mut _transformation : mat4;

    // Signal emited when the node changed position/rotation/scale
    let dmut _transformationChanged : (&Signal!{()})? = none;

    prot self (name : [c8], position : vec3 = vec3 (), rotation : vec3 = vec3 (), scale : vec3 = makeVec3 (1.f, 1.f, 1.f))
        with super (name)
        , _position = position
        , _rotation = rotation
        , _scale = scale
        , _transformation = (math::utils::scaling (self._scale) *
                             math::utils::translation (position))
    {
        self._transformation *= math::utils::rotationX (self._rotation.x);
        self._transformation *= math::utils::rotationY (self._rotation.y);
        self._transformation *= math::utils::rotationZ (self._rotation.z);
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GET/SET          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    @{field, final}
    pub fn position (self)-> vec3 {
        self._position
    }

    /**
     * Change the position of the node in the scene
     * */
    @final
    pub fn setPosition (mut self, pos : vec3) {
        self._position = pos;
        self:.updateTransformation ();
    }

    @{field, final}
    pub fn rotation (self)-> vec3 {
        self._rotation
    }

    /**
     * Change the rotation of the node in the scene
     * */
    @final
    pub fn setRotation (mut self, rot : vec3) {
        self._rotation = rot;
        self:.updateTransformation ();
    }

    @{field, final}
    pub fn scale (self)-> vec3 {
        self._scale
    }

    /**
     * Change the scale of the node in the scene
     * */
    @final
    pub fn setScale (mut self, scale : vec3) {
        self._scale = scale;
        self:.updateTransformation ();
    }

    /**
     * @returns: the transformation matrix of the object
     * */
    @{field, final}
    pub fn objectMatrix (self)-> mat4 {
        self._transformation
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SIGNALS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Connect the signal emitted when the node changed position/rotation/scale
     * */
    pub fn transformationChanged (mut self)-> dmut &Signal!{()} {
        if let Ok (dmut t) = alias self._transformationChanged {
            return alias t;
        }

        let dmut sig = copy Signal!{()} ();
        self._transformationChanged = (alias sig)?;

        alias sig
    }

    /**
     * Update the transformation matrix of the node
     * */
    @final
    prv fn updateTransformation (mut self) {
        self._transformation =
            math::utils::scaling (self._scale) *
            math::utils::translation (self._position);

        self._transformation *= math::utils::rotationX (self._rotation.x);
        self._transformation *= math::utils::rotationY (self._rotation.y);
        self._transformation *= math::utils::rotationZ (self._rotation.z);

        if let Ok (dmut t) = alias self._transformationChanged {
            t:.emit ();
        }
    }
    
}
