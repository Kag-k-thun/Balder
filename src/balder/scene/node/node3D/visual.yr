in visual;

pub mod ::indexed_mesh;
pub mod ::material;
pub mod ::array;

use balder::core::{shader, error, application::_};

use balder::core::driver::_;
use balder::core::shader::_;
use balder::core::config::_;

use balder::scene::node::_;
use balder::scene::node::node3D::visual::material;

use balder::math::_;

@abstract
pub class VisualInstance3D over Node3D {

    // The window that will draw the object
    let dmut _window : &Window;

    // The size of the visual instance
    let mut _aabb : (vec3, vec3);

    // The uniq id of the visual instance in the scene
    let mut _uid : usize = 0us;

    // True if the visual instance casts shadows
    let mut _castShadow : bool;

    // The material used to draw the node
    let dmut _material : &Material;

    // The buffer containing the world transformation of the visual instance
    let dmut _world : (&UniformBufferObject)? = none;

    // The descriptor set used to attach buffers
    let dmut _descSet : (&DescriptorSet)? = none;

    // The descriptor set used to attach buffers
    let dmut _shadowDescSet : (&DescriptorSet)? = none;

    prot self (dmut window : &Window,
               name : [c8],
               position : vec3 = makeVec3 (0.f, 0.f, 0.f),
               rotation : vec3 = makeVec3 (0.f, 0.f, 0.f),
               scale : vec3 = makeVec3 (1.f, 1.f, 1.f),
               aabb : (vec3, vec3),
               dmut material : &Material,
               shadow : bool)
        with super (name, position-> position, rotation-> rotation, scale-> scale)
        , _window = alias window
        , _aabb = aabb
        , _castShadow = shadow
        , _material = alias material
    {
        self:.connectTransformationChanged (&self:.updateUBO);
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          CONFIGURATION          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Attach the object to a shader
     * */
    pub fn attach (mut self, dmut shader : &Shader)
        throws BalderError
    {
        self:.detach ();
        self._material:.dispose ();

        let dmut set = shader:.allocateDescriptorSet ();
        let dmut world = copy UniformBufferObject (shader:.getDevice (), mat4::size);

        set:.setUniform (UniformNames::WORLD, world);
        self._descSet = (alias set)?;
        self._world = (alias world)?;

        if self._castShadow {
            let dmut shadowSet = shader:.allocateDescriptorSet ();
            shadowSet:.setUniform (UniformNames::WORLD, world);
            self._shadowDescSet = (alias shadowSet)?;
        }

        self._material:.attach (alias self._window, alias set);
    }

    /**
     * Detach the visual object from the rendering scene
     * */
    pub fn detach (mut self) {
        let dmut bin = self._window:.getGarbageBin ();
        if let Ok (dmut w) = alias self._world {
            bin:.insert (alias w);
            self._world = none;
        }

        if let Ok (dmut s) = alias self._descSet {
            bin:.insert (alias s);
            self._descSet = none;
        }

        if let Ok (dmut s) = alias self._shadowDescSet {
            bin:.insert (alias s);
            self._shadowDescSet = none;
        }

        self._material:.dispose ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GET/SET          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    @field
    pub fn aabb (self)-> (vec3, vec3) {
        self._aabb
    }

    /**
     * Set the uid of the visual instance
     * */
    pub fn setUID (mut self, uid : usize) {
        self._uid = uid;
    }

    @field
    pub fn uid (self)-> usize {
        self._uid
    }

    /**
     * @returns: true iif the mesh casts shadow
     * */
    pub fn castShadow (self)-> bool {
        self._castShadow
    }

    /**
     * The material used to draw the object
     * */
    @field
    pub fn material (self)-> &Material {
        self._material
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          DRAWING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Register the mesh for drawing in the command allocator
     * @params:
     *    - cmd: the command allocator in which the mesh has to be registered
     */
    pub fn register (self, dmut cmd : &IndirectCommandAllocator);

    /**
     * Draw the mesh using the command allocator
     * @params:
     *    - cmd: the command allocator in which the mesh has to be drawn
     */
    pub fn draw (self, dmut shader : &Shader, dmut cmd : &IndirectCommandAllocator);

    /**
     * Draw the mesh for shadow mapping only
     * @params:
     *    - cmd: the command allocator in which the mesh has to be drawn
     * */
    pub fn drawShadow (self, dmut shader : &Shader, dmut cmd : &IndirectCommandAllocator);

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          TRIGGERS          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    fn updateUBO (mut self) {
        if let Ok (dmut w) = alias self._world {
            w:.setData (0, self._transformation);
        }
    }

}
