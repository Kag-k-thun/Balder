in visual;

pub mod ::indexed_mesh;
pub mod ::material;
pub mod ::array;

use balder::core::{shader, error, dispose, application::_};

use balder::core::driver::_;
use balder::core::shader::_;
use balder::core::shader::buffers::_;
use balder::core::config::_;

use balder::scene::node::_;
use balder::scene::node::node3D::visual::material;

use balder::math::_;

@abstract
pub class VisualInstance3D over Node3D {

    // The size of the visual instance
    let mut _aabb : (vec3, vec3);

    // True if the visual instance casts shadows
    let mut _castShadow : bool;

    prot self (name : [c8],
               dmut scene : &Scene,
               position : vec3 = makeVec3 (0.f, 0.f, 0.f),
               rotation : vec3 = makeVec3 (0.f, 0.f, 0.f),
               scale : vec3 = makeVec3 (1.f, 1.f, 1.f),
               aabb : (vec3, vec3),
               shadow : bool)
        with super (name, alias scene, position-> position, rotation-> rotation, scale-> scale)
        , _aabb = aabb
        , _castShadow = shadow
    {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GET/SET          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    @field
    pub fn aabb (self)-> (vec3, vec3) {
        self._aabb
    }

    /**
     * @returns: true iif the mesh casts shadow
     * */
    pub fn castShadow (self)-> bool {
        self._castShadow
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          DRAWING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Register the mesh for drawing in the command allocator
     * @params:
     *    - cmd: the command allocator in which the mesh has to be registered
     */
    pub fn register (mut self, dmut cmd : &IndirectCommandAllocator);

    /**
     * Draw the mesh using the command allocator
     * @params:
     *    - cmd: the command allocator in which the mesh has to be drawn
     */
    pub fn draw (self, dmut shader : &Shader, dmut cmd : &IndirectCommandAllocator);

    /**
     * Draw the mesh for shadow mapping only
     * @params:
     *    - cmd: the command allocator in which the mesh has to be drawn
     * */
    pub fn drawShadow (self, dmut shader : &Shader, dmut cmd : &IndirectCommandAllocator);

    /**
     * Clean phase after drawing
     * */
    pub fn clean (mut self) {}

}
