in indexed_mesh;

use balder::core::{_,
                   config::_,
                   shader::_,
                   shader::buffers::_,
                   driver::_,
                   application::_};

use balder::scene::node::_;
use balder::math::_;

use balder::scene::node::node3D::visual::_;

/**
 * Mesh with two buffers, one for vertices, and one for indices
 */
pub class IndexedMesh3D over VisualInstance3D {

    // The buffer containing the indices of the mesh
    let dmut _ibo : &IndexBufferObject;

    // The buffer containing the vertices of the mesh
    let dmut _vbo : &VertexBufferObject = copy VertexBufferObject ();

    // The buffer containing simpler version of the vertices of the mesh
    let dmut _shadowVBO : &VertexBufferObject;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          CTORS          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create a new indexed mesh
     * @params:
     *    - device: the device used to allocate and render the mesh
     *    - indices: the indices of the points forming the mesh
     */
    pub self  (dmut window : &Window,
               name : [c8],
               indices : [u32],
               array : MeshArray,
               dmut material : &Material,
               shadow : bool = true)
        with super (alias window, name, array.aabb (), alias material, shadow)
        , _ibo = copy IndexBufferObject!{u32} (window:.getVulkanDevice (), indices)
        , _shadowVBO = alias self._vbo
        throws BalderError
    {
        self:.configure (window:.getVulkanDevice (), array, material, shadow);
    }

    /**
     * Create a new indexed mesh
     * @params:
     *    - device: the device used to allocate and render the mesh
     *    - indices: the indices of the points forming the mesh
     */
    pub self (dmut window : &Window,
              name : [c8],
              indices : [u16],
              dmut material : &Material,
              array : MeshArray,
              shadow : bool = true)
        with super (alias window, name, array.aabb (), alias material, shadow)
        , _ibo = copy IndexBufferObject!{u16} (window:.getVulkanDevice (), indices)
        , _shadowVBO = alias self._vbo
        throws BalderError
    {
        self:.configure (window:.getVulkanDevice (), array, material, shadow);
    }

    __dtor (mut self) {
        self:.dispose ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          CONFIGURATION          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Configure the points of the mesh
     * */
    fn configure (mut self, dmut device : &VulkanDevice, array : MeshArray, material : &Material, shadow : bool)
        throws BalderError
    {
        let data = array.compactVertices (material, forShadow-> false);
        self._vbo:.update (alias device, cast!{u32} (array.positions.len), data);

        if (shadow && data.len != array.positions.len * 3u32) {
            self._shadowVBO = copy VertexBufferObject ();
            let shadowData = array.compactVertices (material, forShadow-> true);
            self._shadowVBO:.update (alias device, cast!{u32} (array.positions.len), shadowData);
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          USAGE          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Register the mesh using the command allocator
     * @assume: the command allocator is in load mode
     * @params:
     *    - cmd: the command allocator in which the mesh has to be registered
     */
    pub over register (self, dmut cmd : &IndirectCommandAllocator) {
        cmd:.registerIndexedObject (self._ibo.getNbPoints ());
    }

    /**
     * Draw the mesh using the command allocator
     * @assume:
     *    - the command allocator is in draw mode
     *    - the shader is already selected
     * @params:
     *    - shader: the shader used to draw
     *    - cmd: the command allocator in which the mesh has to be drawn
     */
    pub over draw (self, dmut _ : &Shader, dmut cmd : &IndirectCommandAllocator) {
        if let Ok (s) = self._descSet {
            s.select ();
            self._vbo.select ();
            self._ibo.select ();

            cmd:.drawNextIndexed ();
        }
    }

    /**
     * Draw the shadow of the mesh using the command allocator
     * @assume:
     *    - the command allocator is in draw mode
     *    - the shader is already selected
     * @params:
     *    - shader: the shader used to draw (basically only a vertex shader)
     *    - cmd: the command allocator in which the mesh has to be drawn
     * */
    pub over drawShadow (self, dmut _ : &Shader, dmut cmd : &IndirectCommandAllocator) {
        if let Ok (s) = self._shadowDescSet {
            s.select ();
            self._shadowVBO.select ();
            self._ibo.select ();

            cmd:.drawNextIndexed ();
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          DISPOSING          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            self:.detach ();

            self._window:.insertBin (alias self._vbo);
            self._window:.insertBin (alias self._shadowVBO);
            self._window:.insertBin (alias self._ibo);
        }
    }

}
