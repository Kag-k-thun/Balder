in color;

use balder::core::_;
use balder::core::shader::_;
use balder::core::shader::buffers::_;
use balder::core::application::_;

use balder::core::config::_;

use balder::math::_;

pub class ColorMaterial over Material {

    let dmut _window : (&Window)? = none;
    let dmut _color : (&UniformBufferObject)? = none;

    let mut _value : vec4 = makeVec4 (1.f, 1.f, 1.f, 1.f);

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          CTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self ()
        with super (copy ShaderConfig (DefaultShaders::COLOR_3D))
        throws BalderError
    {}

    __dtor (mut self) {
        self:.dispose ()
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          USAGE          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Attach the material to a shader
     * */
    pub over attach (mut self, dmut window : &Window, dmut set : &DescriptorSet)
        throws BalderError
    {
        self:.dispose ();

        self._window = (alias window)?;
        let dmut buffer = copy UniformBufferObject (set:.getShader ():.getDevice (), vec4::size);
        buffer:.setData (0, self._value, commit-> true);
        set:.setUniform (UniformNames::COLOR, buffer);

        self._color = (alias buffer)?;
    }

    pub over detach (mut self) {
        if let Ok (dmut win) = alias self._window {
            if let Ok (dmut c) = alias self._color {
                win:.insertBin (alias c);
                self._color = none;
            }

            self._window = none;
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GET/SET          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub fn setColor (mut self, color : vec4) {
        if self._value != color {
            self._value = color;
            if let Ok (dmut ubo) = alias self._color {
                ubo:.setData (0, self._value, commit-> true);
            }
        }
    }

    @field
    pub fn color (self)-> vec4 {
        self._value
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          DISPOSE          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            self:.detach ();
        }
    }

}
