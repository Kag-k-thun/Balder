in color;

use balder::core::_;
use balder::core::shader::_;
use balder::core::shader::buffers::_;
use balder::core::application::_;

use balder::core::config::_;

use balder::math::_;

pub class ColorMaterial {

    let dmut _window : (&Window)? = none;
    let dmut _color : (&UniformBufferObject!{vec3})? = none;
    let _value : vec3;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          CTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self ()
        with super (copy ShaderConfig (config::shaders::BASE_SHADER_COLOR_3D))
    {}

    __dtor (mut self) {
        self:.dispose ()
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          USAGE          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Attach the material to a shader
     * */
    pub over attach (self, dmut window : &Window, dmut set : &DescriptorSet)
        throws BalderError
    {
        self:.dispose ();

        self._window = (alias window)?;
        let dmut buffer = copy UniformBufferObject!{vec3} (set:.getShader ():.getDevice ());
        self._color = (alias buffer)?;

        set:.setUniform (UniformNames::COLOR, buffer);
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GET/SET          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub fn setColor (mut self, color : vec3) {
        self._value = color;
        if let Ok (dmut c) = alias self._descSet {
            c:.update (color);
        }
    }

    @field
    pub fn color (self)-> vec3 {
        self._value
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          DISPOSE          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Disposable {
        pub over dispose (mut self) {
            if let Ok (dmut win) = alias self._window {
                if let Ok (dmut c) = alias self._color {
                    win:.getGarbageBin ():.insert (alias c);
                    self._color = none;
                }

                self._window = none;
            }
        }
    }

}
