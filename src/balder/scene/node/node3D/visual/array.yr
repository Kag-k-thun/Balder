in array;

use balder::math::_;
use balder::scene::node::node3D::visual::material;
use balder::core::config::_;
use balder::core::error;

/**
 * Record containing the kind of point data that a mesh can accept
 * */
pub record MeshArray {

    pub let dmut positions : [vec3] = [];
    pub let dmut normals : [vec3] = [];
    pub let dmut tangents : [vec3] = [];
    pub let dmut colors : [vec3] = [];
    pub let dmut textureUVs : [vec2] = [];
    pub let dmut textureUVs2 : [vec2] = [];
    pub let dmut bones : [vec4] = [];
    pub let dmut weights : [vec4] = [];

    pub self () {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          COMPUTE          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Compute the the bounding box of a cloud of points
     * @returns:
     *    - .0: the minimal point (smallest x,y,z)
     *    - .1: the maximal point (biggest x,y,z)
     * */
    pub fn aabb (self)-> (vec3, vec3) {
        let mut min = makeVec3 (f32::max, f32::max, f32::max);
        let mut max = makeVec3 (f32::min, f32::min, f32::min);

        for aux in self.positions {
            let min_x = if (min.x > aux.x) { aux.x } else { min.x }
            let min_y = if (min.y > aux.y) { aux.y } else { min.y }
            let min_z = if (min.z > aux.z) { aux.z } else { min.z }

            let max_x = if (max.x < aux.x) { aux.x } else { max.x }
            let max_y = if (max.y < aux.y) { aux.y } else { max.y }
            let max_z = if (max.z < aux.z) { aux.z } else { max.z }

            max = makeVec3 (max_x, max_y, max_z);
            min = makeVec3 (min_x, min_y, min_z);
        }

        (min, max)
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          USAGE          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Compact the vertices to make them fold in one buffer
     * */
    pub fn compactVertices (self, material : &Material, forShadow : bool)-> [f32]
        throws BalderError
    {
        let mut size = 0u32;
        size += self.addSize (material.shaderConfig, VertexEntry::POSITIONS, self.positions);
        if !forShadow {
            size += self.addSize (material.shaderConfig, VertexEntry::NORMALS, self.normals);
            size += self.addSize (material.shaderConfig, VertexEntry::TANGENTS, self.tangents);
            size += self.addSize (material.shaderConfig, VertexEntry::COLORS, self.colors);
            size += self.addSize (material.shaderConfig, VertexEntry::TEX_UV, self.textureUVs);
            size += self.addSize (material.shaderConfig, VertexEntry::TEX_UV2, self.textureUVs2);
            size += self.addSize (material.shaderConfig, VertexEntry::BONES, self.bones);
            size += self.addSize (material.shaderConfig, VertexEntry::WEIGHTS, self.weights);
        }

        let dmut result = copy [0.f ; cast!usize (size) * self.positions.len];
        let mut current = 0us;
        for i in 0 .. self.positions.len {
            current = self.append (material.shaderConfig.hasEntry (VertexEntry::POSITIONS),     alias result, self.positions, current, i);
            if !forShadow {
                current = self.append (material.shaderConfig.hasEntry (VertexEntry::NORMALS),     alias result, self.normals, current, i);
                current = self.append (material.shaderConfig.hasEntry (VertexEntry::TANGENTS),    alias result, self.tangents, current, i);
                current = self.append (material.shaderConfig.hasEntry (VertexEntry::COLORS),      alias result, self.colors, current, i);
                current = self.append (material.shaderConfig.hasEntry (VertexEntry::TEX_UV),  alias result, self.textureUVs, current, i);
                current = self.append (material.shaderConfig.hasEntry (VertexEntry::TEX_UV2),  alias result, self.textureUVs2, current, i);
                current = self.append (material.shaderConfig.hasEntry (VertexEntry::BONES),  alias result, self.bones, current, i);
                current = self.append (material.shaderConfig.hasEntry (VertexEntry::WEIGHTS),  alias result, self.weights, current, i);
            }
        }

        result
    }

    fn append {V} (self, has : bool, dmut result : [f32], elements : [V], current : usize, index : usize) -> usize {
        if has {
            if elements.len > index {
                result [current] = elements [index].x;
                result [current + 1] = elements [index].y;
                cte if arity!{V} > 2 {
                    result [current + 2] = elements [index].z;
                }
                cte if arity!{V} > 3 {
                    result [current + 3] = elements [index].w;
                }
            } else {
                for i in 0 .. arity!{V} {
                    result [current + cast!usize (i)] = 0.f;
                }
            }

            current + cast!usize (arity!{V})
        } else {
            current
        }
    }

    fn addSize {V} (self, config : &ShaderConfig, entry : VertexEntry, _ : [V])-> u32
        throws BalderError
    {
        if !config.hasEntry (entry) { return 0; } // no entry, skipped
        if config.vertexEntry (entry)._1 != arity!{V} * 4 { // entry but wrong size, error
            throw copy BalderError ("Incompatible entry : " ~ entry);
        }

        arity!{V} * 4
    }

}
