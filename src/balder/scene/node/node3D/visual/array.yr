in array;

use balder::math::_;

use balder::scene::node::node3D::visual::material;

/**
 * Record containing the kind of point data that a mesh can accept
 * */
pub record MeshArray {

    pub let mut positions : [vec3];
    pub let mut normals : [vec3];
    pub let mut tangents : [vec3];
    pub let mut colors : [vec3];
    pub let mut textureUVs : [vec2];
    pub let mut textureUVs2 : [vec2];
    pub let mut bones : [vec4];
    pub let mut weights : [vec4];

    pub self (positions : [vec3],
              normals : [vec3] = [],
              tangents : [vec3] = [],
              colors : [vec3] = [],
              textureUVs : [vec2] = [],
              textureUVs2 : [vec2] = [],
              bones : [vec4] = [],
              weights : [vec4] = [])
        with positions = positions
        , normals = normals
        , tangents = tangents
        , colors = colors
        , textureUVs = textureUVs
        , textureUVs2 = textureUVs2
        , bones = bones
        , weights = weights
    {}

    /**
     * Compute the the bounding box of a cloud of points
     * @returns:
     *    - .0: the minimal point (smallest x,y,z)
     *    - .1: the maximal point (biggest x,y,z)
     * */
    pub fn aabb (self)-> (vec3, vec3) {
        let mut min = makeVec3 (f32::max, f32::max, f32::max);
        let mut max = makeVec3 (f32::min, f32::min, f32::min);

        for aux in self.positions {
            let min_x = if (min.x > aux.x) { aux.x } else { min.x }
            let min_y = if (min.y > aux.y) { aux.y } else { min.y }
            let min_z = if (min.z > aux.z) { aux.z } else { min.z }

            let max_x = if (max.x < aux.x) { aux.x } else { max.x }
            let max_y = if (max.y < aux.y) { aux.y } else { max.y }
            let max_z = if (max.z < aux.z) { aux.z } else { max.z }

            max = makeVec3 (max_x, max_y, max_z);
            min = makeVec3 (min_x, min_y, min_z);
        }

        (min, max)
    }


    /**
     * Compact the vertices to make them fold in one buffer
     * */
    pub fn compactVertices (self, material : &Material, forShadow : bool)-> [f32]
    {
        let mut size = self.positions.len * 3;

        if !forShadow {
            if material.shaderConfig.normals { size += (self.positions.len * 3); }
            if material.shaderConfig.tangents { size += (self.positions.len * 3); }
            if material.shaderConfig.colors { size += (self.positions.len * 3); }

            if material.shaderConfig.textureUVs { size += (self.positions.len * 2); }
            if material.shaderConfig.textureUVs2 { size += (self.positions.len * 2); }

            if material.shaderConfig.bones { size += (self.positions.len * 4); }
            if material.shaderConfig.weights { size += (self.positions.len * 4); }
        }

        let dmut result = copy [0.f ; size];
        let mut current = 0us;
        for i in 0 .. self.positions.len {
            current = self.append (true, alias result, self.positions, current, i);

            if !forShadow {
                current = self.append (material.shaderConfig.normals,     alias result, self.normals, current, i);
                current = self.append (material.shaderConfig.tangents,    alias result, self.tangents, current, i);
                current = self.append (material.shaderConfig.colors,      alias result, self.colors, current, i);
                current = self.append (material.shaderConfig.textureUVs,  alias result, self.textureUVs, current, i);
                current = self.append (material.shaderConfig.textureUVs2, alias result, self.textureUVs2, current, i);
                current = self.append (material.shaderConfig.bones,       alias result, self.bones, current, i);
                current = self.append (material.shaderConfig.weights,     alias result, self.weights, current, i);
            }
        }

        result
    }

    fn append {V} (self, has : bool, dmut result : [f32], elements : [V], current : usize, index : usize) -> usize {
        if has {
            if elements.len > index {
                result [current] = elements [index].x;
                result [current + 1] = elements [index].y;
                cte if arity!{V} > 2 {
                    result [current + 2] = elements [index].z;
                }
                cte if arity!{V} > 3 {
                    result [current + 3] = elements [index].w;
                }
            } else {
                for i in 0 .. arity!{V} {
                    result [current + cast!usize (i)] = 0.f;
                }
            }

            current + cast!usize (arity!{V})
        } else {
            current
        }
    }

}
