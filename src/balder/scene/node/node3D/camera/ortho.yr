in ortho;

use balder::core::shader::buffers::_;
use balder::math::_;
use balder::scene::node::node3D::camera;

pub class OrthoCamera over Camera {

    let mut _left : f32 = -10.f;
    let mut _right : f32 = 10.f;

    let mut _top : f32 = -10.f;
    let mut _bottom : f32 = 10.f;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          CTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (name : [c8], dmut parent : &Node)
        with super (name, alias parent)
    {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GET/SET          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    @field
    pub fn left (self)-> f32 {
        self._left
    }

    @field
    pub fn left (mut self, left : f32) {
        self._left = left;
        self:.updateTransformation ();
    }

    @field
    pub fn right (self)-> f32 {
        self._right
    }

    @field
    pub fn right (mut self, right : f32) {
        self._right = right;
        self:.updateTransformation ();
    }

    @field
    pub fn top (self)-> f32 {
        self._top
    }

    @field
    pub fn top (mut self, top : f32) {
        self._top = top;
        self:.updateTransformation ();
    }


    @field
    pub fn bottom (self)-> f32 {
        self._bottom
    }

    @field
    pub fn bottom (mut self, bottom : f32) {
        self._bottom = bottom;
        self:.updateTransformation ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          COMPUTATION          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    over computeProj (mut self) {
        self._proj = ortho!{f32} (self._left, self._right, self._bottom, self._top, self._near, self._far);
    }

}
