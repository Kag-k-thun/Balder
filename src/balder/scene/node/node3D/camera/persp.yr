in persp;


use balder::core::shader::buffers::_;
use balder::math::_;
use balder::scene::node::node3D::camera;

pub class PerspectiveCamera over Camera {

    // The fov angle of the camera
    let mut _fov : f32 = 90.f;
    let mut _aspect : f32 = 1920.f / 1080.f;

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          CTOR          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub self (name : [c8], dmut parent : &Node)
        with super (name, alias parent)
    {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GET/SET          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    @field
    pub fn fov (self)-> f32 {
        self._fov
    }

    @field
    pub fn fov (mut self, fov : f32) {
        self._fov = fov;
        self:.updateTransformation ();
    }

    @field
    pub fn aspect (self)-> f32 {
        self._aspect
    }

    @field
    pub fn aspect (mut self, aspect : f32) {
        self._aspect = aspect;
        self:.updateTransformation ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          COMPUTATION          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    over computeProj (mut self) {
        self._proj = perspective!{f32} (balder::math::utils::radian (self._fov),
                                        self._aspect,
                                        self._near,
                                        self._far);
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          BINDING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over onEnter (mut self, dmut scene : &Scene) {
        self._super:.onEnter (alias scene);

    self._aspect = 1920.f / 1080.f;
        scene:.aspectChanged ():.connect (scene:.getWindow ():.getSlotEmitter (), &self:.updateAspect);
    }

    pub over onExit (mut self, dmut scene : &Scene) {
        self._super:.onExit (alias scene);
        scene:.aspectChanged ():.disconnect (&self:.updateAspect);
    }

    fn updateAspect (mut self, _ : u32, _ : u32) {}

}
